[
  {
    "id": "00-01-understanding-ehi-and-the-cures-act-0",
    "originalQuery": "SELECT \n    COUNT(DISTINCT table_name) as total_tables,\n    COUNT(*) as total_columns,\n    SUM(CASE WHEN documentation IS NOT NULL THEN 1 ELSE 0 END) as documented_columns,\n    ROUND(100.0 * SUM(CASE WHEN documentation IS NOT NULL THEN 1 ELSE 0 END) / COUNT(*), 1) as documentation_rate\nFROM _metadata\nWHERE column_name IS NOT NULL",
    "description": "View the scope of EHI data available in our export",
    "chapterId": "00-01-understanding-ehi-and-the-cures-act",
    "index": 0
  },
  {
    "id": "00-02-the-ehi-playground-0",
    "originalQuery": "SELECT \n    PAT_ENC_CSN_ID,\n    PAT_ID,\n    CONTACT_DATE,\n    ENC_CLOSED_YN\nFROM pat_enc\nWHERE CONTACT_DATE IS NOT NULL\nORDER BY CONTACT_DATE DESC\nLIMIT 5;",
    "description": "Your first EHI query - see real patient encounters",
    "chapterId": "00-02-the-ehi-playground",
    "index": 0
  },
  {
    "id": "00-02-the-ehi-playground-1",
    "originalQuery": "SELECT \n    CONTACT_DATE,\n    -- Extract just the date part\n    SUBSTR(CONTACT_DATE, 1, 10) as date_only,\n    -- Count encounters by date\n    COUNT(*) as encounters_on_date\nFROM pat_enc\nWHERE CONTACT_DATE IS NOT NULL\nGROUP BY date_only\nORDER BY encounters_on_date DESC\nLIMIT 5;",
    "description": "Understanding Epic's date formats",
    "chapterId": "00-02-the-ehi-playground",
    "index": 1
  },
  {
    "id": "00-02-the-ehi-playground-2",
    "originalQuery": "SELECT \n    p.PAT_NAME,\n    p.BIRTH_DATE,\n    COUNT(e.PAT_ENC_CSN_ID) as total_encounters\nFROM PATIENT p\nLEFT JOIN pat_enc e ON p.PAT_ID = e.PAT_ID\nGROUP BY p.PAT_ID, p.PAT_NAME, p.BIRTH_DATE;",
    "description": "Pattern 1: Join patient data with encounters",
    "chapterId": "00-02-the-ehi-playground",
    "index": 2
  },
  {
    "id": "00-02-the-ehi-playground-3",
    "originalQuery": "SELECT \n    table_name,\n    column_name,\n    documentation\nFROM _metadata\nWHERE table_name = 'PATIENT'\n  AND column_name IN ('PAT_ID', 'PAT_MRN_ID', 'BIRTH_DATE')",
    "description": "Pattern 2: Find tables by keyword using metadata",
    "chapterId": "00-02-the-ehi-playground",
    "index": 3
  },
  {
    "id": "00-03-understanding-the-metadata-table-0",
    "originalQuery": "SELECT \n    table_name,\n    column_name,\n    SUBSTR(documentation, 1, 100) || '...' as documentation_preview\nFROM _metadata\nWHERE table_name = 'PATIENT' \n  AND column_name = 'PAT_ID'\nLIMIT 1;",
    "description": "Your first look at the _metadata table structure",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 0
  },
  {
    "id": "00-03-understanding-the-metadata-table-1",
    "originalQuery": "SELECT \n    COUNT(DISTINCT table_name) as documented_tables,\n    COUNT(*) as total_documentation_entries,\n    COUNT(CASE WHEN column_name IS NULL THEN 1 END) as table_descriptions,\n    COUNT(CASE WHEN column_name IS NOT NULL THEN 1 END) as column_descriptions\nFROM _metadata;",
    "description": "Understanding the _metadata structure",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 1
  },
  {
    "id": "00-03-understanding-the-metadata-table-2",
    "originalQuery": "SELECT \n    table_name,\n    SUBSTR(documentation, 1, 150) as table_purpose\nFROM _metadata\nWHERE column_name IS NULL\n  AND table_name IN ('PATIENT', 'PAT_ENC', 'ORDER_MED', 'CLARITY_EDG')\nORDER BY table_name;",
    "description": "Discover what key tables do",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 2
  },
  {
    "id": "00-03-understanding-the-metadata-table-3",
    "originalQuery": "-- Replace 'PAT_ENC' with any table name\nWITH table_info AS (\n    SELECT name as column_name, cid as column_order\n    FROM pragma_table_info('PAT_ENC')\n)\nSELECT \n    ti.column_name,\n    COALESCE(m.documentation, '(No documentation available)') as description\nFROM table_info ti\nLEFT JOIN _metadata m \n    ON m.table_name = 'PAT_ENC' \n    AND m.column_name = ti.column_name\nORDER BY ti.column_order;",
    "description": "Get full documentation for any table",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 3
  },
  {
    "id": "00-03-understanding-the-metadata-table-4",
    "originalQuery": "SELECT DISTINCT\n    table_name,\n    COUNT(*) as relevant_columns\nFROM _metadata\nWHERE LOWER(documentation) LIKE '%diagnos%'\n  AND column_name IS NOT NULL\nGROUP BY table_name\nORDER BY relevant_columns DESC\nLIMIT 10;",
    "description": "Find all tables related to diagnoses",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 4
  },
  {
    "id": "00-03-understanding-the-metadata-table-5",
    "originalQuery": "SELECT \n    table_name,\n    column_name,\n    SUBSTR(documentation, 1, 100) as description\nFROM _metadata\nWHERE column_name LIKE '%ADMSN%' \n   OR (LOWER(documentation) LIKE '%admission%' AND column_name LIKE '%_DT%')\nORDER BY table_name, column_name\nLIMIT 10;",
    "description": "Find all date/time columns related to admission",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 5
  },
  {
    "id": "00-03-understanding-the-metadata-table-6",
    "originalQuery": "SELECT \n    table_name,\n    COUNT(*) as patient_linked_columns\nFROM _metadata\nWHERE column_name = 'PAT_ID'\n  AND table_name != 'PATIENT'\nGROUP BY table_name\nORDER BY table_name\nLIMIT 15;",
    "description": "Find foreign key relationships for patients",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 6
  },
  {
    "id": "00-03-understanding-the-metadata-table-7",
    "originalQuery": "WITH all_tables AS (\n    SELECT name as table_name\n    FROM sqlite_master\n    WHERE type = 'table' AND name != '_metadata'\n),\ndocumented_tables AS (\n    SELECT DISTINCT table_name\n    FROM _metadata\n)\nSELECT \n    (SELECT COUNT(*) FROM all_tables) as total_tables,\n    (SELECT COUNT(*) FROM documented_tables) as documented_tables,\n    ROUND(\n        100.0 * (SELECT COUNT(*) FROM documented_tables) / \n        (SELECT COUNT(*) FROM all_tables), \n        1\n    ) as documentation_percentage,\n    -- List any undocumented tables\n    GROUP_CONCAT(\n        CASE \n            WHEN at.table_name NOT IN (SELECT table_name FROM documented_tables)\n            THEN at.table_name\n        END\n    ) as undocumented_tables\nFROM all_tables at;",
    "description": "Analyze metadata completeness",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 7
  },
  {
    "id": "00-03-understanding-the-metadata-table-8",
    "originalQuery": "SELECT documentation \nFROM _metadata \nWHERE table_name = 'PAT_ENC' AND column_name = 'CONTACT_DATE';",
    "description": "First, get the documentation",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 8
  },
  {
    "id": "00-03-understanding-the-metadata-table-9",
    "originalQuery": "SELECT \n    CONTACT_DATE,\n    COUNT(*) as encounters_on_date\nFROM PAT_ENC\nWHERE CONTACT_DATE IS NOT NULL\nGROUP BY CONTACT_DATE\nORDER BY encounters_on_date DESC\nLIMIT 5;",
    "description": "Then see actual data patterns",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 9
  },
  {
    "id": "01-01-epic-data-architecture-0",
    "originalQuery": "-- Count tables that use the LINE pattern\nSELECT COUNT(DISTINCT table_name) as tables_with_line_column\nFROM _metadata\nWHERE column_name = 'LINE';",
    "description": "See evidence of hierarchical data in relational form",
    "chapterId": "01-01-epic-data-architecture",
    "index": 0
  },
  {
    "id": "01-01-epic-data-architecture-1",
    "originalQuery": "SELECT \n    ACCOUNT_ID,\n    LINE,\n    LETTER_NAME as contact_name,\n    CONTACT_STATUS_C_NAME,\n    CONTACT_DATE\nFROM ACCOUNT_CONTACT\nWHERE ACCOUNT_ID IN (\n    SELECT ACCOUNT_ID \n    FROM ACCOUNT_CONTACT \n    GROUP BY ACCOUNT_ID \n    HAVING COUNT(*) > 1\n)\nORDER BY ACCOUNT_ID, LINE\nLIMIT 10;",
    "description": "Observe hierarchical patterns in account contacts",
    "chapterId": "01-01-epic-data-architecture",
    "index": 1
  },
  {
    "id": "01-01-epic-data-architecture-2",
    "originalQuery": "-- Epic must handle massive transaction volumes\nSELECT \n    'Orders' as data_type, COUNT(*) as record_count FROM ORDER_PROC\nUNION ALL\nSELECT 'Results', COUNT(*) FROM ORDER_RESULTS\nUNION ALL\nSELECT 'Medications', COUNT(*) FROM ORDER_MED\nUNION ALL\nSELECT 'Encounters', COUNT(*) FROM PAT_ENC\nORDER BY record_count DESC;",
    "description": "See the scale that demands this architecture",
    "chapterId": "01-01-epic-data-architecture",
    "index": 2
  },
  {
    "id": "01-01-epic-data-architecture-3",
    "originalQuery": "-- Epic stores dates as days since 12/31/1840\nSELECT \n    column_name,\n    COUNT(DISTINCT table_name) as table_count,\n    GROUP_CONCAT(DISTINCT table_name) as appears_in_tables\nFROM _metadata\nWHERE column_name LIKE '%_REAL'\nGROUP BY column_name\nORDER BY table_count DESC\nLIMIT 5;",
    "description": "Discover Epic's internal date system",
    "chapterId": "01-01-epic-data-architecture",
    "index": 3
  },
  {
    "id": "01-01-epic-data-architecture-4",
    "originalQuery": "-- Find tables that share the same base record structure\nWITH base_tables AS (\n    SELECT DISTINCT \n        SUBSTR(table_name, 1, LENGTH(table_name) - 2) as base_name,\n        table_name\n    FROM _metadata\n    WHERE table_name LIKE '%\\_2' ESCAPE '\\'\n       OR table_name LIKE '%\\_3' ESCAPE '\\'\n       OR table_name LIKE '%\\_4' ESCAPE '\\'\n)\nSELECT \n    base_name,\n    GROUP_CONCAT(table_name, ', ') as related_tables,\n    COUNT(*) as table_count\nFROM base_tables\nGROUP BY base_name\nHAVING table_count > 1\nORDER BY table_count DESC\nLIMIT 10;",
    "description": "Trace hierarchical relationships through shared IDs",
    "chapterId": "01-01-epic-data-architecture",
    "index": 4
  },
  {
    "id": "01-01-epic-data-architecture-5",
    "originalQuery": "SELECT \n    SUBSTR(table_name, 1, 3) as prefix,\n    COUNT(*) as table_count,\n    GROUP_CONCAT(DISTINCT table_name) as example_tables\nFROM (\n    SELECT table_name\n    FROM _metadata\n    WHERE column_name IS NULL\n      AND table_name NOT LIKE '\\_%' ESCAPE '\\'\n    ORDER BY table_name\n    LIMIT 200\n)\nGROUP BY SUBSTR(table_name, 1, 3)\nHAVING COUNT(*) >= 3\nORDER BY table_count DESC\nLIMIT 10;",
    "description": "Common Epic master file prefixes",
    "chapterId": "01-01-epic-data-architecture",
    "index": 5
  },
  {
    "id": "01-02-modeling-a-simple-list-id-line-pattern-0",
    "originalQuery": "SELECT COUNT(DISTINCT table_name) as tables_with_line_column\nFROM _metadata\nWHERE column_name = 'LINE';",
    "description": "Discover the prevalence of the LINE pattern",
    "chapterId": "01-02-modeling-a-simple-list-id-line-pattern",
    "index": 0
  },
  {
    "id": "01-02-modeling-a-simple-list-id-line-pattern-1",
    "originalQuery": "SELECT \n    PAT_ENC_CSN_ID,\n    LINE,\n    DX_ID,\n    PRIMARY_DX_YN,\n    ANNOTATION\nFROM PAT_ENC_DX\nWHERE PAT_ENC_CSN_ID = 991225117\nORDER BY LINE;",
    "description": "Examine the (ID, LINE) pattern in encounter diagnoses",
    "chapterId": "01-02-modeling-a-simple-list-id-line-pattern",
    "index": 1
  },
  {
    "id": "01-02-modeling-a-simple-list-id-line-pattern-2",
    "originalQuery": "SELECT \n    PAT_ENC_CSN_ID,\n    LINE,\n    DX_ID,\n    PRIMARY_DX_YN,\n    CASE \n        WHEN PRIMARY_DX_YN = 'Y' AND LINE > 1 \n        THEN '⚠️ Primary diagnosis not in LINE 1!'\n        ELSE 'Normal'\n    END as note\nFROM PAT_ENC_DX\nWHERE PRIMARY_DX_YN = 'Y' \n  AND LINE > 1\nLIMIT 5;",
    "description": "Proof that LINE does not indicate priority",
    "chapterId": "01-02-modeling-a-simple-list-id-line-pattern",
    "index": 2
  },
  {
    "id": "01-02-modeling-a-simple-list-id-line-pattern-3",
    "originalQuery": "WITH line_analysis AS (\n    SELECT \n        table_name,\n        MIN(line) as min_line,\n        MAX(line) as max_line,\n        COUNT(DISTINCT line) as distinct_lines\n    FROM (\n        SELECT 'PAT_ENC_DX' as table_name, PAT_ENC_CSN_ID as id, LINE \n        FROM PAT_ENC_DX\n        UNION ALL\n        SELECT 'ALLERGY_REACTIONS', ALLERGY_ID, LINE \n        FROM ALLERGY_REACTIONS\n        UNION ALL\n        SELECT 'PAT_ADDRESS', PAT_ID, LINE \n        FROM PAT_ADDRESS\n    )\n    GROUP BY table_name, id\n)\nSELECT \n    table_name,\n    MIN(min_line) as always_starts_at,\n    MAX(max_line) as can_go_up_to,\n    COUNT(*) as parent_records\nFROM line_analysis\nGROUP BY table_name;",
    "description": "Verify LINE numbering always starts at 1",
    "chapterId": "01-02-modeling-a-simple-list-id-line-pattern",
    "index": 3
  },
  {
    "id": "01-02-modeling-a-simple-list-id-line-pattern-4",
    "originalQuery": "SELECT \n    table_name,\n    SUBSTR(documentation, 1, 100) || '...' as table_purpose\nFROM _metadata\nWHERE column_name IS NULL\n  AND table_name IN (\n    SELECT DISTINCT table_name \n    FROM _metadata \n    WHERE column_name = 'LINE'\n  )\nORDER BY table_name\nLIMIT 10;",
    "description": "See the variety of data using the (ID, LINE) pattern",
    "chapterId": "01-02-modeling-a-simple-list-id-line-pattern",
    "index": 4
  },
  {
    "id": "01-02-modeling-a-simple-list-id-line-pattern-5",
    "originalQuery": "SELECT \n    PAT_ENC_CSN_ID,\n    COUNT(*) as diagnosis_count,\n    MAX(LINE) as max_line_number,\n    COUNT(CASE WHEN PRIMARY_DX_YN = 'Y' THEN 1 END) as primary_dx_count\nFROM PAT_ENC_DX\nGROUP BY PAT_ENC_CSN_ID\nHAVING COUNT(*) > 2\nLIMIT 5;",
    "description": "Count items per parent correctly",
    "chapterId": "01-02-modeling-a-simple-list-id-line-pattern",
    "index": 5
  },
  {
    "id": "01-03-modeling-a-grouped-list-id-group-line-value-line-pattern-0",
    "originalQuery": "SELECT \n    table_name,\n    COUNT(*) as column_count\nFROM _metadata\nWHERE column_name IN ('GROUP_LINE', 'VALUE_LINE')\nGROUP BY table_name\nHAVING COUNT(*) = 2\nORDER BY table_name;",
    "description": "Discover tables using the grouped list pattern",
    "chapterId": "01-03-modeling-a-grouped-list-id-group-line-value-line-pattern",
    "index": 0
  },
  {
    "id": "01-03-modeling-a-grouped-list-id-group-line-value-line-pattern-1",
    "originalQuery": "-- During an encounter, providers review different aspects of patient history\n-- Each review session (GROUP_LINE) covers multiple history types (VALUE_LINE)\nSELECT \n    tp.GROUP_LINE as review_session,\n    tp.VALUE_LINE as item_number,\n    tp.HX_REVIEWED_HEADER as review_location,\n    ty.HX_REVIEWED_TYPE_C_NAME as history_type\nFROM PAT_HX_REV_TOPIC tp\nJOIN PAT_HX_REV_TYPE ty \n    ON tp.PAT_ENC_CSN_ID = ty.PAT_ENC_CSN_ID \n    AND tp.GROUP_LINE = ty.GROUP_LINE \n    AND tp.VALUE_LINE = ty.VALUE_LINE\nWHERE tp.PAT_ENC_CSN_ID = 724623985 \n    AND tp.GROUP_LINE IN (6,7)\nORDER BY tp.GROUP_LINE, tp.VALUE_LINE;",
    "description": "See the grouped list pattern in action",
    "chapterId": "01-03-modeling-a-grouped-list-id-group-line-value-line-pattern",
    "index": 1
  },
  {
    "id": "01-03-modeling-a-grouped-list-id-group-line-value-line-pattern-2",
    "originalQuery": "SELECT \n    name as column_name,\n    CASE \n        WHEN name LIKE '%_ID' THEN 'Parent identifier'\n        WHEN name = 'GROUP_LINE' THEN 'Group sequence number'\n        WHEN name = 'VALUE_LINE' THEN 'Item sequence within group'\n        ELSE 'Data column'\n    END as column_role\nFROM pragma_table_info('PAT_HX_REV_TOPIC')\nORDER BY cid;",
    "description": "Examine the structure of a grouped list table",
    "chapterId": "01-03-modeling-a-grouped-list-id-group-line-value-line-pattern",
    "index": 2
  },
  {
    "id": "01-03-modeling-a-grouped-list-id-group-line-value-line-pattern-3",
    "originalQuery": "SELECT DISTINCT\n    m1.table_name,\n    SUBSTR(m1.documentation, 1, 80) || '...' as table_purpose\nFROM _metadata m1\nWHERE m1.column_name IS NULL\n  AND m1.table_name IN (\n    SELECT table_name\n    FROM _metadata\n    WHERE column_name IN ('GROUP_LINE', 'VALUE_LINE')\n    GROUP BY table_name\n    HAVING COUNT(*) = 2\n  )\nLIMIT 5;",
    "description": "Understand the variety of grouped list applications",
    "chapterId": "01-03-modeling-a-grouped-list-id-group-line-value-line-pattern",
    "index": 3
  },
  {
    "id": "01-03-modeling-a-grouped-list-id-group-line-value-line-pattern-4",
    "originalQuery": "-- Count history types reviewed in each session\nSELECT \n    PAT_ENC_CSN_ID,\n    GROUP_LINE as review_session,\n    COUNT(*) as history_types_reviewed,\n    GROUP_CONCAT(HX_REVIEWED_TYPE_C_NAME, ', ') as types_reviewed\nFROM PAT_HX_REV_TYPE\nWHERE PAT_ENC_CSN_ID = 724623985\nGROUP BY PAT_ENC_CSN_ID, GROUP_LINE\nHAVING COUNT(*) > 1\nORDER BY GROUP_LINE;",
    "description": "Aggregate values within groups",
    "chapterId": "01-03-modeling-a-grouped-list-id-group-line-value-line-pattern",
    "index": 4
  },
  {
    "id": "01-03-modeling-a-grouped-list-id-group-line-value-line-pattern-5",
    "originalQuery": "WITH line_rules AS (\n    SELECT \n        'ORDER_RPTD_SIG_TEXT' as table_name,\n        MIN(GROUP_LINE) as min_group,\n        MAX(GROUP_LINE) as max_group,\n        MIN(VALUE_LINE) as min_value,\n        MAX(VALUE_LINE) as max_value\n    FROM ORDER_RPTD_SIG_TEXT\n    \n    UNION ALL\n    \n    SELECT \n        'IMM_ADMIN_GROUPS',\n        MIN(GROUP_LINE),\n        MAX(GROUP_LINE),\n        MIN(VALUE_LINE),\n        MAX(VALUE_LINE)\n    FROM IMM_ADMIN_GROUPS\n)\nSELECT * FROM line_rules;",
    "description": "Verify the numbering rules for grouped lists",
    "chapterId": "01-03-modeling-a-grouped-list-id-group-line-value-line-pattern",
    "index": 5
  },
  {
    "id": "01-04-modeling-history-and-change-hx-pattern-0",
    "originalQuery": "SELECT \n    COUNT(*) as history_tables,\n    GROUP_CONCAT(REPLACE(name, '_HX', ''), ', ') as tracked_entities\nFROM sqlite_master \nWHERE type = 'table' \n  AND name LIKE '%_HX'\nORDER BY name;",
    "description": "Discover the scope of history tracking",
    "chapterId": "01-04-modeling-history-and-change-hx-pattern",
    "index": 0
  },
  {
    "id": "01-04-modeling-history-and-change-hx-pattern-1",
    "originalQuery": "-- First, see a current address\nSELECT \n    PAT_ID,\n    LINE,\n    ADDRESS\nFROM PAT_ADDRESS\nWHERE PAT_ID = 'Z7004242';",
    "description": "Compare a regular table to its history counterpart",
    "chapterId": "01-04-modeling-history-and-change-hx-pattern",
    "index": 1
  },
  {
    "id": "01-04-modeling-history-and-change-hx-pattern-2",
    "originalQuery": "-- Then see the address history with full details\nSELECT \n    PAT_ID,\n    LINE,\n    EFF_START_DATE,\n    EFF_END_DATE,\n    ADDR_HX_LINE1,\n    CITY_HX,\n    ZIP_HX\nFROM PAT_ADDR_CHNG_HX\nWHERE PAT_ID = 'Z7004242'\nORDER BY EFF_START_DATE;",
    "description": "See the address change history",
    "chapterId": "01-04-modeling-history-and-change-hx-pattern",
    "index": 2
  },
  {
    "id": "01-04-modeling-history-and-change-hx-pattern-3",
    "originalQuery": "SELECT \n    PAT_ID,\n    LINE,\n    EFF_START_DATE,\n    EFF_END_DATE,\n    CASE \n        WHEN EFF_END_DATE IS NULL OR EFF_END_DATE = '' \n        THEN '✓ Currently Active'\n        ELSE 'Historical'\n    END as record_status\nFROM PAT_ADDR_CHNG_HX\nORDER BY PAT_ID, EFF_START_DATE;",
    "description": "Understand the active record pattern",
    "chapterId": "01-04-modeling-history-and-change-hx-pattern",
    "index": 3
  },
  {
    "id": "01-04-modeling-history-and-change-hx-pattern-4",
    "originalQuery": "-- What was the patient's address on August 1, 2018?\nSELECT \n    PAT_ID,\n    ADDR_HX_LINE1,\n    CITY_HX,\n    ZIP_HX,\n    EFF_START_DATE,\n    EFF_END_DATE,\n    'Note: Sample data may not contain historical addresses' as note\nFROM PAT_ADDR_CHNG_HX\nLIMIT 5;",
    "description": "Find a patient's address on a specific date",
    "chapterId": "01-04-modeling-history-and-change-hx-pattern",
    "index": 4
  },
  {
    "id": "01-04-modeling-history-and-change-hx-pattern-5",
    "originalQuery": "SELECT \n    table_name,\n    COUNT(*) as column_count,\n    GROUP_CONCAT(column_name, ', ') as example_columns\nFROM _metadata\nWHERE table_name LIKE '%_HX'\n   OR table_name LIKE '%_HX_%'\n   OR table_name LIKE '%HIST%'\n   OR table_name LIKE '%CHNG%'\nGROUP BY table_name\nORDER BY table_name\nLIMIT 10;",
    "description": "Examine different types of historical data",
    "chapterId": "01-04-modeling-history-and-change-hx-pattern",
    "index": 5
  },
  {
    "id": "01-04-modeling-history-and-change-hx-pattern-6",
    "originalQuery": "SELECT \n    column_name,\n    COUNT(DISTINCT table_name) as table_count\nFROM _metadata\nWHERE column_name LIKE '%_INST%'\n   OR column_name LIKE '%_DTTM'\n   OR column_name LIKE '%_USER%'\nGROUP BY column_name\nORDER BY table_count DESC\nLIMIT 10;",
    "description": "Identify audit tracking columns",
    "chapterId": "01-04-modeling-history-and-change-hx-pattern",
    "index": 6
  },
  {
    "id": "01-04-modeling-history-and-change-hx-pattern-7",
    "originalQuery": "WITH hx_patterns AS (\n    SELECT \n        table_name,\n        CASE \n            WHEN column_name = 'LINE' THEN 'Has LINE'\n            WHEN column_name LIKE '%EFF_START%' THEN 'Has EFF_START'\n            WHEN column_name LIKE '%EFF_END%' THEN 'Has EFF_END'\n            WHEN column_name LIKE '%UPDATE%USER%' THEN 'Has UPDATE_USER'\n            ELSE NULL\n        END as pattern\n    FROM _metadata\n    WHERE table_name LIKE '%_HX'\n)\nSELECT \n    pattern,\n    COUNT(DISTINCT table_name) as table_count,\n    GROUP_CONCAT(DISTINCT table_name) as example_tables\nFROM hx_patterns\nWHERE pattern IS NOT NULL\nGROUP BY pattern\nORDER BY table_count DESC;",
    "description": "Analyze history table structures",
    "chapterId": "01-04-modeling-history-and-change-hx-pattern",
    "index": 7
  },
  {
    "id": "01-04-modeling-history-and-change-hx-pattern-8",
    "originalQuery": "WITH all_tables AS (\n    SELECT \n        name as table_name,\n        CASE \n            WHEN name LIKE '%_HX' THEN 'History Table'\n            WHEN EXISTS (\n                SELECT 1 FROM sqlite_master sm2\n                WHERE sm2.name = sm.name || '_HX'\n            ) THEN 'Has History Table'\n            ELSE 'No History Tracking'\n        END as history_status\n    FROM sqlite_master sm\n    WHERE type = 'table' AND name != '_metadata'\n)\nSELECT \n    history_status,\n    COUNT(*) as table_count\nFROM all_tables\nGROUP BY history_status\nORDER BY table_count DESC;",
    "description": "Compare tables with and without history tracking",
    "chapterId": "01-04-modeling-history-and-change-hx-pattern",
    "index": 8
  },
  {
    "id": "01-05-modeling-categories-c-name-pattern-0",
    "originalQuery": "-- Traditional Epic systems use ZC_ tables for lookups\nSELECT \n    COUNT(*) as zc_tables_found,\n    CASE \n        WHEN COUNT(*) = 0 THEN '❌ No ZC_ lookup tables in EHI export!'\n        ELSE 'Found lookup tables'\n    END as finding\nFROM sqlite_master \nWHERE type = 'table' \n  AND name LIKE 'ZC_%';",
    "description": "Prove that ZC_ lookup tables don't exist",
    "chapterId": "01-05-modeling-categories-c-name-pattern",
    "index": 0
  },
  {
    "id": "01-05-modeling-categories-c-name-pattern-1",
    "originalQuery": "SELECT \n    COUNT(DISTINCT column_name) as category_columns,\n    COUNT(DISTINCT table_name) as tables_with_categories\nFROM _metadata\nWHERE column_name LIKE '%_C_NAME%';",
    "description": "Discover the prevalence of the _C_NAME pattern",
    "chapterId": "01-05-modeling-categories-c-name-pattern",
    "index": 1
  },
  {
    "id": "01-05-modeling-categories-c-name-pattern-2",
    "originalQuery": "-- First, see the distinct values\nSELECT \n    APPT_STATUS_C_NAME as status,\n    COUNT(*) as encounter_count\nFROM pat_enc \nWHERE APPT_STATUS_C_NAME IS NOT NULL\nGROUP BY APPT_STATUS_C_NAME\nORDER BY encounter_count DESC;",
    "description": "See category values in practice",
    "chapterId": "01-05-modeling-categories-c-name-pattern",
    "index": 2
  },
  {
    "id": "01-05-modeling-categories-c-name-pattern-3",
    "originalQuery": "SELECT \n    table_name,\n    column_name,\n    SUBSTR(documentation, 1, 100) || '...' as shows_numeric_codes\nFROM _metadata\nWHERE column_name LIKE '%_C_NAME'\n  AND documentation LIKE '%1 -%'\nLIMIT 5;",
    "description": "Find columns where documentation reveals numeric codes",
    "chapterId": "01-05-modeling-categories-c-name-pattern",
    "index": 3
  },
  {
    "id": "01-05-modeling-categories-c-name-pattern-4",
    "originalQuery": "-- Are category values consistent?\nSELECT \n    APPT_STATUS_C_NAME,\n    UPPER(APPT_STATUS_C_NAME) as uppercase,\n    LOWER(APPT_STATUS_C_NAME) as lowercase,\n    COUNT(*) as occurrences\nFROM pat_enc\nWHERE APPT_STATUS_C_NAME IS NOT NULL\nGROUP BY APPT_STATUS_C_NAME\nORDER BY APPT_STATUS_C_NAME;",
    "description": "Check for case variations in category values",
    "chapterId": "01-05-modeling-categories-c-name-pattern",
    "index": 4
  },
  {
    "id": "01-05-modeling-categories-c-name-pattern-5",
    "originalQuery": "-- Find all unique statuses across different status columns\nWITH all_statuses AS (\n    SELECT DISTINCT 'APPT_STATUS' as status_type, APPT_STATUS_C_NAME as status_value \n    FROM pat_enc WHERE APPT_STATUS_C_NAME IS NOT NULL\n    \n    UNION\n    \n    SELECT DISTINCT 'PROBLEM_STATUS', PROBLEM_STATUS_C_NAME \n    FROM PROBLEM_LIST WHERE PROBLEM_STATUS_C_NAME IS NOT NULL\n)\nSELECT * FROM all_statuses\nORDER BY status_type, status_value;",
    "description": "Demonstrate lack of referential constraints",
    "chapterId": "01-05-modeling-categories-c-name-pattern",
    "index": 5
  },
  {
    "id": "01-05-modeling-categories-c-name-pattern-6",
    "originalQuery": "WITH category_types AS (\n    SELECT \n        SUBSTR(column_name, 1, INSTR(column_name, '_C_NAME') - 1) as base_name,\n        column_name,\n        table_name\n    FROM _metadata\n    WHERE column_name LIKE '%_C_NAME%'\n)\nSELECT \n    base_name,\n    COUNT(DISTINCT table_name) as table_count,\n    GROUP_CONCAT(DISTINCT table_name) as appears_in_tables\nFROM category_types\nGROUP BY base_name\nHAVING COUNT(DISTINCT table_name) > 3\nORDER BY table_count DESC\nLIMIT 10;",
    "description": "Analyze category naming patterns",
    "chapterId": "01-05-modeling-categories-c-name-pattern",
    "index": 6
  },
  {
    "id": "01-05-modeling-categories-c-name-pattern-7",
    "originalQuery": "SELECT \n    column_name,\n    table_name,\n    documentation\nFROM _metadata\nWHERE column_name LIKE '%_C'\n  AND column_name NOT IN (\n      SELECT REPLACE(column_name, '_NAME', '') \n      FROM _metadata \n      WHERE column_name LIKE '%_C_NAME%'\n  )\nLIMIT 10;",
    "description": "Investigate _C columns without _NAME",
    "chapterId": "01-05-modeling-categories-c-name-pattern",
    "index": 7
  },
  {
    "id": "01-05-modeling-categories-c-name-pattern-8",
    "originalQuery": "-- Build a reference of all appointment statuses\nSELECT DISTINCT \n    APPT_STATUS_C_NAME as status_name,\n    COUNT(*) as usage_count\nFROM PAT_ENC\nWHERE APPT_STATUS_C_NAME IS NOT NULL\nGROUP BY APPT_STATUS_C_NAME\nORDER BY usage_count DESC;",
    "description": "Create a reference list of valid values",
    "chapterId": "01-05-modeling-categories-c-name-pattern",
    "index": 8
  },
  {
    "id": "01-06-modeling-time-real-date-pattern-0",
    "originalQuery": "-- Multiple encounters on the same day\nSELECT \n    PAT_ENC_CSN_ID,\n    CONTACT_DATE,\n    PAT_ENC_DATE_REAL\nFROM pat_enc\nWHERE CONTACT_DATE LIKE '8/9/2018%'\nORDER BY PAT_ENC_DATE_REAL;",
    "description": "See why standard dates aren't enough",
    "chapterId": "01-06-modeling-time-real-date-pattern",
    "index": 0
  },
  {
    "id": "01-06-modeling-time-real-date-pattern-1",
    "originalQuery": "-- Calculate dates from _REAL values\nSELECT \n    PAT_ENC_DATE_REAL,\n    DATE('1840-12-31', '+' || CAST(PAT_ENC_DATE_REAL AS INT) || ' days') as calculated_date,\n    SUBSTR(CONTACT_DATE, 1, 10) as actual_date,\n    CASE \n        WHEN DATE('1840-12-31', '+' || CAST(PAT_ENC_DATE_REAL AS INT) || ' days') \n             = DATE(SUBSTR(CONTACT_DATE, 7, 4) || '-' || \n                    PRINTF('%02d', CAST(SUBSTR(CONTACT_DATE, 1, INSTR(CONTACT_DATE, '/') - 1) AS INT)) || '-' ||\n                    PRINTF('%02d', CAST(SUBSTR(CONTACT_DATE, INSTR(CONTACT_DATE, '/') + 1, 2) AS INT)))\n        THEN '✓ Match!'\n        ELSE '✗ Mismatch'\n    END as verification\nFROM pat_enc\nWHERE PAT_ENC_DATE_REAL IS NOT NULL\nLIMIT 5;",
    "description": "Verify the Epic epoch date",
    "chapterId": "01-06-modeling-time-real-date-pattern",
    "index": 1
  },
  {
    "id": "01-06-modeling-time-real-date-pattern-2",
    "originalQuery": "WITH real_analysis AS (\n    SELECT \n        PAT_ID,\n        CONTACT_DATE,\n        PAT_ENC_CSN_ID,\n        PAT_ENC_DATE_REAL,\n        CAST(PAT_ENC_DATE_REAL AS INT) as date_part,\n        ROUND((PAT_ENC_DATE_REAL - CAST(PAT_ENC_DATE_REAL AS INT)) * 100, 0) as sequence_part\n    FROM pat_enc\n    WHERE CONTACT_DATE LIKE '8/9/2018%'\n)\nSELECT \n    *,\n    'Encounter #' || (sequence_part + 1) as encounter_order\nFROM real_analysis\nORDER BY PAT_ENC_DATE_REAL;",
    "description": "Analyze decimal sequencing patterns",
    "chapterId": "01-06-modeling-time-real-date-pattern",
    "index": 2
  },
  {
    "id": "01-06-modeling-time-real-date-pattern-3",
    "originalQuery": "SELECT \n    column_name,\n    COUNT(DISTINCT table_name) as table_count,\n    GROUP_CONCAT(DISTINCT table_name) as appears_in_tables\nFROM _metadata\nWHERE column_name LIKE '%_REAL'\nGROUP BY column_name\nORDER BY table_count DESC",
    "description": "Discover all _REAL date columns",
    "chapterId": "01-06-modeling-time-real-date-pattern",
    "index": 3
  },
  {
    "id": "01-06-modeling-time-real-date-pattern-4",
    "originalQuery": "-- Create a scenario showing the problem\nWITH sorting_comparison AS (\n    SELECT \n        PAT_ENC_CSN_ID,\n        CONTACT_DATE,\n        PAT_ENC_DATE_REAL,\n        -- Different sorting approaches\n        ROW_NUMBER() OVER (ORDER BY CONTACT_DATE, PAT_ENC_CSN_ID) as sort_by_date_and_id,\n        ROW_NUMBER() OVER (ORDER BY PAT_ENC_DATE_REAL) as sort_by_real,\n        -- Check if they match\n        CASE \n            WHEN ROW_NUMBER() OVER (ORDER BY CONTACT_DATE, PAT_ENC_CSN_ID) = \n                 ROW_NUMBER() OVER (ORDER BY PAT_ENC_DATE_REAL)\n            THEN 'Same'\n            ELSE 'Different!'\n        END as sort_order_match\n    FROM pat_enc\n    WHERE CONTACT_DATE LIKE '8/9/2018%'\n)\nSELECT * FROM sorting_comparison;",
    "description": "Demonstrate why _REAL sorting is essential",
    "chapterId": "01-06-modeling-time-real-date-pattern",
    "index": 4
  },
  {
    "id": "01-06-modeling-time-real-date-pattern-5",
    "originalQuery": "-- Check for any duplicate _REAL values\nWITH duplicate_check AS (\n    SELECT \n        PAT_ID,\n        PAT_ENC_DATE_REAL,\n        COUNT(*) as occurrence_count\n    FROM pat_enc\n    WHERE PAT_ENC_DATE_REAL IS NOT NULL\n    GROUP BY PAT_ID, PAT_ENC_DATE_REAL\n    HAVING COUNT(*) > 1\n)\nSELECT \n    CASE \n        WHEN COUNT(*) = 0 THEN '✓ All _REAL values are unique per patient'\n        ELSE '✗ Found ' || COUNT(*) || ' duplicates'\n    END as uniqueness_check\nFROM duplicate_check;",
    "description": "Verify _REAL values are unique per patient",
    "chapterId": "01-06-modeling-time-real-date-pattern",
    "index": 5
  },
  {
    "id": "01-06-modeling-time-real-date-pattern-6",
    "originalQuery": "SELECT \n    column_name,\n    SUBSTR(documentation, 1, 150) as description\nFROM _metadata\nWHERE column_name LIKE '%_REAL'\nORDER BY column_name\nLIMIT 5;",
    "description": "Prove decimals aren't timestamps",
    "chapterId": "01-06-modeling-time-real-date-pattern",
    "index": 6
  },
  {
    "id": "01-07-other-common-patterns-0",
    "originalQuery": "WITH pattern_analysis AS (\n    SELECT \n        CASE\n            WHEN column_name LIKE '%_YN' THEN '_YN (Yes/No)'\n            WHEN column_name LIKE '%_ID_%NAME' THEN '_ID/_NAME pairs'\n            WHEN column_name LIKE '%_AMT' THEN '_AMT (Amounts)'\n            WHEN column_name LIKE '%_DTTM' THEN '_DTTM (DateTime)'\n            WHEN column_name LIKE '%_DT' THEN '_DT (Date)'\n            WHEN column_name LIKE '%_NUM' THEN '_NUM (Number)'\n            WHEN column_name LIKE '%_CSN' THEN '_CSN (Contact Serial)'\n            ELSE 'Other'\n        END as pattern_type,\n        column_name\n    FROM _metadata\n    WHERE column_name IS NOT NULL\n)\nSELECT \n    pattern_type,\n    COUNT(*) as occurrence_count\nFROM pattern_analysis\nWHERE pattern_type != 'Other'\nGROUP BY pattern_type\nORDER BY occurrence_count DESC",
    "description": "Discover the most common column patterns",
    "chapterId": "01-07-other-common-patterns",
    "index": 0
  },
  {
    "id": "01-07-other-common-patterns-1",
    "originalQuery": "-- Check valid values\nSELECT DISTINCT \n    PRIMARY_DX_YN as yn_value,\n    COUNT(*) as occurrences\nFROM PAT_ENC_DX\nGROUP BY PRIMARY_DX_YN\nORDER BY yn_value;\n\n-- See variety of boolean fields\nSELECT \n    column_name,\n    REPLACE(column_name, '_YN', '') as what_it_tracks\nFROM _metadata\nWHERE column_name LIKE '%_YN'\n  AND table_name = 'PATIENT'\nORDER BY column_name\nLIMIT 10",
    "description": "Understand the _YN boolean pattern",
    "chapterId": "01-07-other-common-patterns",
    "index": 1
  },
  {
    "id": "01-07-other-common-patterns-2",
    "originalQuery": "-- Find examples of paired columns\nSELECT \n    REPLACE(column_name, '_NAME', '') as base_column,\n    GROUP_CONCAT(column_name, ' + ') as paired_columns\nFROM _metadata\nWHERE table_name = 'PROBLEM_LIST'\n  AND (column_name LIKE '%USER_ID' OR column_name LIKE '%USER_ID_NAME')\nGROUP BY REPLACE(column_name, '_NAME', '')\nORDER BY base_column",
    "description": "Explore ID/NAME pairs",
    "chapterId": "01-07-other-common-patterns",
    "index": 2
  },
  {
    "id": "01-07-other-common-patterns-3",
    "originalQuery": "SELECT \n    PROBLEM_LIST_ID,\n    ENTRY_USER_ID,\n    ENTRY_USER_ID_NAME,\n    DESCRIPTION\nFROM PROBLEM_LIST\nWHERE ENTRY_USER_ID IS NOT NULL\nLIMIT 5;",
    "description": "See ID/NAME pairs in action",
    "chapterId": "01-07-other-common-patterns",
    "index": 3
  },
  {
    "id": "01-07-other-common-patterns-4",
    "originalQuery": "SELECT \n    SUBSTR(name, 1, LENGTH(name) - 2) as base_table,\n    GROUP_CONCAT(name, ', ') as all_parts,\n    COUNT(*) as table_count\nFROM sqlite_master\nWHERE type = 'table'\n  AND (name LIKE '%\\_2' ESCAPE '\\' \n       OR name LIKE '%\\_3' ESCAPE '\\' \n       OR name LIKE '%\\_4' ESCAPE '\\')\nGROUP BY base_table\nHAVING table_count >= 1\nORDER BY table_count DESC\nLIMIT 10;",
    "description": "Discover continuation tables",
    "chapterId": "01-07-other-common-patterns",
    "index": 4
  },
  {
    "id": "01-07-other-common-patterns-5",
    "originalQuery": "WITH date_patterns AS (\n    SELECT \n        CASE\n            WHEN column_name LIKE '%_DTTM' THEN 'DateTime (_DTTM)'\n            WHEN column_name LIKE '%_DT' AND column_name NOT LIKE '%_DTTM' THEN 'Date only (_DT)'\n            WHEN column_name LIKE '%_DATE' THEN 'Date (spelled out)'\n            WHEN column_name LIKE '%_TIME' THEN 'Time only (_TIME)'\n            WHEN column_name LIKE '%_TM' AND column_name NOT LIKE '%_DTTM' THEN 'Time (_TM)'\n        END as pattern,\n        column_name,\n        table_name\n    FROM _metadata\n    WHERE column_name LIKE '%_DT%' \n       OR column_name LIKE '%_DATE%'\n       OR column_name LIKE '%_TIME%'\n       OR column_name LIKE '%_TM'\n)\nSELECT \n    pattern,\n    COUNT(*) as column_count,\n    SUBSTR(GROUP_CONCAT(DISTINCT column_name), 1, 100) as examples\nFROM date_patterns\nWHERE pattern IS NOT NULL\nGROUP BY pattern\nORDER BY column_count DESC\nLIMIT 5",
    "description": "Analyze temporal column patterns",
    "chapterId": "01-07-other-common-patterns",
    "index": 5
  },
  {
    "id": "01-07-other-common-patterns-6",
    "originalQuery": "SELECT \n    table_name,\n    column_name,\n    SUBSTR(documentation, 1, 100) || '...' as description\nFROM _metadata\nWHERE column_name LIKE '%_AMT'\n  AND documentation LIKE '%dollar%' OR documentation LIKE '%amount%'\nORDER BY RANDOM()\nLIMIT 5",
    "description": "Explore financial amount columns",
    "chapterId": "01-07-other-common-patterns",
    "index": 6
  },
  {
    "id": "01-07-other-common-patterns-7",
    "originalQuery": "SELECT \n    column_name,\n    COUNT(DISTINCT table_name) as used_in_tables\nFROM _metadata\nWHERE column_name LIKE '%_CSN%'\nGROUP BY column_name\nORDER BY used_in_tables DESC\nLIMIT 10",
    "description": "Understand CSN usage",
    "chapterId": "01-07-other-common-patterns",
    "index": 7
  },
  {
    "id": "01-07-other-common-patterns-8",
    "originalQuery": "SELECT \n    -- ID/NAME pair\n    ENTRY_USER_ID,\n    ENTRY_USER_ID_NAME,\n    \n    -- _YN boolean\n    CHRONIC_YN,\n    \n    -- _C_NAME category\n    PROBLEM_STATUS_C_NAME,\n    \n    -- Standard date\n    DATE_OF_ENTRY,\n    \n    -- The actual problem\n    DESCRIPTION\n    \nFROM PROBLEM_LIST\nWHERE PROBLEM_LIST_ID IS NOT NULL\nLIMIT 5;",
    "description": "See all patterns working together",
    "chapterId": "01-07-other-common-patterns",
    "index": 8
  },
  {
    "id": "02-01-patient-identity-and-demographics-0",
    "originalQuery": "SELECT \n    PAT_ID,\n    PAT_MRN_ID,\n    PAT_NAME,\n    BIRTH_DATE,\n    SEX_C_NAME\nFROM PATIENT;",
    "description": "Explore the core patient record",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 0
  },
  {
    "id": "02-01-patient-identity-and-demographics-1",
    "originalQuery": "SELECT documentation\nFROM _metadata\nWHERE table_name = 'PATIENT' \n  AND column_name IS NULL",
    "description": "View the comprehensive patient master documentation",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 1
  },
  {
    "id": "02-01-patient-identity-and-demographics-2",
    "originalQuery": "SELECT \n    PAT_ID,\n    PAT_MRN_ID,\n    -- Extract the prefix patterns\n    SUBSTR(PAT_ID, 1, 1) as pat_id_prefix,\n    SUBSTR(PAT_MRN_ID, 1, 3) as mrn_prefix\nFROM PATIENT;",
    "description": "Compare internal and external patient identifiers",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 2
  },
  {
    "id": "02-01-patient-identity-and-demographics-3",
    "originalQuery": "SELECT \n    table_name,\n    COUNT(*) as tables_with_pat_id\nFROM _metadata\nWHERE column_name = 'PAT_ID'\n  AND table_name != 'PATIENT'\nGROUP BY table_name\nORDER BY table_name\nLIMIT 10",
    "description": "Prove PAT_ID is the universal foreign key",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 3
  },
  {
    "id": "02-01-patient-identity-and-demographics-4",
    "originalQuery": "SELECT \n    PAT_NAME,\n    PAT_FIRST_NAME,\n    PAT_MIDDLE_NAME,\n    PAT_LAST_NAME\nFROM PATIENT;",
    "description": "Examine the multiple name storage formats",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 4
  },
  {
    "id": "02-01-patient-identity-and-demographics-5",
    "originalQuery": "SELECT \n    p.PAT_NAME as primary_name,\n    a.LINE,\n    a.ALIAS as alternative_name\nFROM PATIENT p\nLEFT JOIN PATIENT_ALIAS a ON p.PAT_ID = a.PAT_ID\nORDER BY a.LINE;",
    "description": "Explore patient aliases and alternative names",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 5
  },
  {
    "id": "02-01-patient-identity-and-demographics-6",
    "originalQuery": "-- Race: Stored in separate table (supports multiple selections)\nSELECT \n    'Race' as data_type,\n    pr.LINE,\n    pr.PATIENT_RACE_C_NAME as value\nFROM PATIENT_RACE pr\nWHERE pr.PAT_ID = 'Z7004242'\n\nUNION ALL\n\n-- Ethnicity: Stored directly in PATIENT table (single selection)\nSELECT \n    'Ethnicity' as data_type,\n    1 as line,\n    p.ETHNIC_GROUP_C_NAME as value\nFROM PATIENT p\nWHERE p.PAT_ID = 'Z7004242'\nORDER BY data_type, line;",
    "description": "Compare race and ethnicity storage patterns",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 6
  },
  {
    "id": "02-01-patient-identity-and-demographics-7",
    "originalQuery": "-- Permanent address components in PATIENT table\nSELECT \n    'Permanent' as address_type,\n    CITY,\n    STATE_C_NAME,\n    ZIP,\n    COUNTY_C_NAME\nFROM PATIENT\nWHERE PAT_ID = 'Z7004242'\n\nUNION ALL\n\n-- Temporary address fields (if populated)\nSELECT \n    'Temporary' as address_type,\n    TMP_CITY,\n    TMP_STATE_C_NAME,\n    TMP_ZIP,\n    TMP_COUNTY_C_NAME\nFROM PATIENT\nWHERE PAT_ID = 'Z7004242' \n  AND TMP_CITY IS NOT NULL;",
    "description": "Understand the three-tier address system",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 7
  },
  {
    "id": "02-01-patient-identity-and-demographics-8",
    "originalQuery": "SELECT \n    p.CITY,\n    p.STATE_C_NAME,\n    p.ZIP,\n    pa.LINE,\n    pa.ADDRESS as street_line\nFROM PATIENT p\nLEFT JOIN PAT_ADDRESS pa ON p.PAT_ID = pa.PAT_ID\nORDER BY pa.LINE;",
    "description": "Get complete address with street lines",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 8
  },
  {
    "id": "02-01-patient-identity-and-demographics-9",
    "originalQuery": "SELECT \n    LANGUAGE_C_NAME as primary_language,\n    LANG_CARE_C_NAME as care_language,\n    LANG_WRIT_C_NAME as written_language,\n    PREF_PCP_LANG_C_NAME as preferred_pcp_language\nFROM PATIENT;",
    "description": "Explore granular language preferences",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 9
  },
  {
    "id": "02-01-patient-identity-and-demographics-10",
    "originalQuery": "SELECT \n    'PATIENT' as table_name, COUNT(*) as column_count \nFROM pragma_table_info('PATIENT')\nUNION ALL\nSELECT \n    'PATIENT_2', COUNT(*) \nFROM pragma_table_info('PATIENT_2')\nUNION ALL\nSELECT \n    'PATIENT_3', COUNT(*) \nFROM pragma_table_info('PATIENT_3')\nORDER BY table_name;",
    "description": "Explore the continuation table pattern",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 10
  },
  {
    "id": "02-01-patient-identity-and-demographics-11",
    "originalQuery": "-- PATIENT_2: Birth details and citizenship\nSELECT \n    BIRTH_TM as birth_time,\n    IS_ADOPTED_YN,\n    CITIZENSHIP_C_NAME\nFROM PATIENT_2\nWHERE PAT_ID = 'Z7004242';",
    "description": "See specialized data in overflow tables",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 11
  },
  {
    "id": "02-01-patient-identity-and-demographics-12",
    "originalQuery": "SELECT \n    p.CUR_PCP_PROV_ID,\n    p.PREF_PCP_SEX_C_NAME,\n    p.PREF_PCP_SPEC_C_NAME,\n    p.PREF_PCP_LANG_C_NAME\nFROM PATIENT p\nWHERE p.PAT_ID = 'Z7004242';",
    "description": "Examine PCP assignment and preferences",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 12
  },
  {
    "id": "02-01-patient-identity-and-demographics-13",
    "originalQuery": "SELECT column_name\nFROM _metadata\nWHERE table_name = 'PATIENT'\n  AND (LOWER(column_name) LIKE '%gender%' \n       OR LOWER(column_name) LIKE '%sex%')\nORDER BY column_name;",
    "description": "Confirm absence of gender identity fields",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 13
  },
  {
    "id": "02-01-patient-identity-and-demographics-14",
    "originalQuery": "SELECT \n    'No merge tracking tables found' as result,\n    COUNT(*) as tables_checked\nFROM sqlite_master \nWHERE type = 'table' \n  AND (name LIKE '%MERGE%' OR name LIKE '%DUPL%');",
    "description": "Search for merge tracking tables",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 14
  },
  {
    "id": "02-01-patient-identity-and-demographics-15",
    "originalQuery": "SELECT \n    p2.RECORD_TYPE_6_C_NAME\nFROM PATIENT_2 p2\nWHERE p2.PAT_ID = 'Z7004242';",
    "description": "Check for test patient identification",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 15
  },
  {
    "id": "02-01-patient-identity-and-demographics-16",
    "originalQuery": "WITH patient_summary AS (\n    SELECT \n        p.PAT_ID,\n        p.PAT_MRN_ID,\n        p.PAT_NAME,\n        p.BIRTH_DATE,\n        -- Calculate age\n        CAST((julianday('now') - julianday(SUBSTR(p.BIRTH_DATE, 7, 4) || '-' || \n             PRINTF('%02d', CAST(SUBSTR(p.BIRTH_DATE, 1, INSTR(p.BIRTH_DATE, '/') - 1) AS INT)) || '-' ||\n             PRINTF('%02d', CAST(SUBSTR(p.BIRTH_DATE, INSTR(p.BIRTH_DATE, '/') + 1, 2) AS INT)))) / 365.25 AS INT) as age,\n        p.SEX_C_NAME,\n        p.ETHNIC_GROUP_C_NAME,\n        p.LANGUAGE_C_NAME,\n        p.CUR_PCP_PROV_ID\n    FROM PATIENT p\n)\nSELECT \n    ps.*,\n    -- Add race (concatenated if multiple)\n    GROUP_CONCAT(pr.PATIENT_RACE_C_NAME) as races,\n    -- Add address\n    pa.ADDRESS as street_address,\n    p.CITY || ', ' || p.STATE_C_NAME || ' ' || p.ZIP as city_state_zip\nFROM patient_summary ps\nJOIN PATIENT p ON ps.PAT_ID = p.PAT_ID\nLEFT JOIN PATIENT_RACE pr ON ps.PAT_ID = pr.PAT_ID\nLEFT JOIN PAT_ADDRESS pa ON ps.PAT_ID = pa.PAT_ID AND pa.LINE = 1\nGROUP BY ps.PAT_ID;",
    "description": "Create a complete patient demographic summary",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 16
  },
  {
    "id": "02-02-encounters-and-patient-movement-0",
    "originalQuery": "SELECT \n    PAT_ENC_CSN_ID,\n    PAT_ID,\n    CONTACT_DATE,\n    APPT_STATUS_C_NAME,\n    DEPARTMENT_ID,\n    VISIT_PROV_ID\nFROM PAT_ENC\nLIMIT 5;",
    "description": "Explore the encounter master table",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 0
  },
  {
    "id": "02-02-encounters-and-patient-movement-1",
    "originalQuery": "SELECT \n    COUNT(*) as total_encounters,\n    COUNT(DISTINCT PAT_ENC_CSN_ID) as unique_csns,\n    -- CSN is the primary key\n    CASE \n        WHEN COUNT(*) = COUNT(DISTINCT PAT_ENC_CSN_ID) \n        THEN 'CSNs are unique (primary key)' \n        ELSE 'CSNs are not unique' \n    END as verification\nFROM PAT_ENC;",
    "description": "Verify CSN uniqueness and understand its role",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 1
  },
  {
    "id": "02-02-encounters-and-patient-movement-2",
    "originalQuery": "SELECT \n    table_name,\n    COUNT(*) as tables_using_csn\nFROM _metadata\nWHERE column_name = 'PAT_ENC_CSN_ID'\n  AND table_name != 'PAT_ENC'\nGROUP BY table_name\nORDER BY table_name\nLIMIT 10",
    "description": "See how CSN connects across the database",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 2
  },
  {
    "id": "02-02-encounters-and-patient-movement-3",
    "originalQuery": "SELECT \n    PAT_ID,\n    CONTACT_DATE,\n    PAT_ENC_DATE_REAL,\n    -- Extract the sequence number\n    ROUND((PAT_ENC_DATE_REAL - CAST(PAT_ENC_DATE_REAL AS INT)) * 100, 0) + 1 as encounter_sequence\nFROM PAT_ENC\nWHERE CONTACT_DATE = '9/28/2023 12:00:00 AM'\nORDER BY PAT_ENC_DATE_REAL;",
    "description": "Demonstrate the decimal date pattern",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 3
  },
  {
    "id": "02-02-encounters-and-patient-movement-4",
    "originalQuery": "WITH date_analysis AS (\n    SELECT \n        CONTACT_DATE,\n        COUNT(*) as encounters_on_date,\n        MIN(PAT_ENC_DATE_REAL) as first_encounter,\n        MAX(PAT_ENC_DATE_REAL) as last_encounter,\n        -- Calculate the decimal range\n        ROUND((MAX(PAT_ENC_DATE_REAL) - MIN(PAT_ENC_DATE_REAL)) * 100, 0) + 1 as sequential_encounters\n    FROM PAT_ENC\n    GROUP BY CONTACT_DATE\n    HAVING COUNT(*) > 1\n)\nSELECT * FROM date_analysis\nORDER BY encounters_on_date DESC\nLIMIT 5;",
    "description": "Prove decimal dates guarantee chronological ordering",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 4
  },
  {
    "id": "02-02-encounters-and-patient-movement-5",
    "originalQuery": "SELECT \n    APPT_STATUS_C_NAME,\n    COUNT(*) as count,\n    ROUND(100.0 * COUNT(*) / (SELECT COUNT(*) FROM PAT_ENC), 1) as percentage\nFROM PAT_ENC\nGROUP BY APPT_STATUS_C_NAME\nORDER BY count DESC;",
    "description": "Analyze appointment status distribution",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 5
  },
  {
    "id": "02-02-encounters-and-patient-movement-6",
    "originalQuery": "SELECT \n    -- Count populated provider fields\n    COUNT(VISIT_PROV_ID) as has_visit_provider,\n    COUNT(PCP_PROV_ID) as has_pcp,\n    -- REFERRING_PROV_ID not in this table\n    -- UPDATE_PROV_ID not in this table\n    -- Check if visit provider differs from PCP\n    SUM(CASE WHEN VISIT_PROV_ID != PCP_PROV_ID THEN 1 ELSE 0 END) as different_visit_pcp\nFROM PAT_ENC;",
    "description": "Understand the different provider roles",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 6
  },
  {
    "id": "02-02-encounters-and-patient-movement-7",
    "originalQuery": "SELECT \n    PAT_ENC_CSN_ID,\n    HOSP_ADMSN_TIME,\n    HOSP_DISCHRG_TIME,\n    -- Calculate length of stay when both times exist\n    CASE \n        WHEN HOSP_ADMSN_TIME IS NOT NULL AND HOSP_DISCHRG_TIME IS NOT NULL\n        THEN ROUND(julianday(HOSP_DISCHRG_TIME) - julianday(HOSP_ADMSN_TIME), 2)\n        ELSE NULL\n    END as los_days\nFROM PAT_ENC\nWHERE HOSP_ADMSN_TIME IS NOT NULL\nORDER BY HOSP_ADMSN_TIME\nLIMIT 5;",
    "description": "Examine hospital admission patterns",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 7
  },
  {
    "id": "02-02-encounters-and-patient-movement-8",
    "originalQuery": "SELECT \n    a.EVENT_ID,\n    a.PAT_ENC_CSN_ID,\n    a.EVENT_TYPE_C_NAME,\n    a.EFFECTIVE_TIME,\n    -- Link back to encounter\n    p.CONTACT_DATE\nFROM CLARITY_ADT a\nJOIN PAT_ENC p ON a.PAT_ENC_CSN_ID = p.PAT_ENC_CSN_ID\nORDER BY a.EFFECTIVE_TIME;",
    "description": "Explore ADT (Admission, Discharge, Transfer) events",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 8
  },
  {
    "id": "02-02-encounters-and-patient-movement-9",
    "originalQuery": "SELECT \n    EVENT_TYPE_C_NAME,\n    EFFECTIVE_TIME,\n    -- Calculate time between events\n    ROUND((julianday(EFFECTIVE_TIME) - \n           julianday(LAG(EFFECTIVE_TIME) OVER (ORDER BY EFFECTIVE_TIME))) * 24, 2) as hours_since_last_event\nFROM CLARITY_ADT\nWHERE PAT_ENC_CSN_ID = 922942674\nORDER BY EFFECTIVE_TIME;",
    "description": "Show the complete patient journey for an encounter",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 9
  },
  {
    "id": "02-02-encounters-and-patient-movement-10",
    "originalQuery": "SELECT \n    FIN_CLASS_C_NAME,\n    COUNT(*) as encounters,\n    -- Show common appointment statuses for each financial class\n    GROUP_CONCAT(DISTINCT APPT_STATUS_C_NAME) as appointment_statuses\nFROM PAT_ENC\nWHERE FIN_CLASS_C_NAME IS NOT NULL\nGROUP BY FIN_CLASS_C_NAME\nORDER BY encounters DESC;",
    "description": "Analyze financial classes across encounters",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 10
  },
  {
    "id": "02-02-encounters-and-patient-movement-11",
    "originalQuery": "SELECT \n    DEPARTMENT_ID,\n    COUNT(*) as encounter_count,\n    COUNT(DISTINCT PAT_ID) as unique_patients\nFROM PAT_ENC\nWHERE DEPARTMENT_ID IS NOT NULL\nGROUP BY DEPARTMENT_ID\nORDER BY encounter_count DESC\nLIMIT 10;",
    "description": "Find the busiest departments",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 11
  },
  {
    "id": "02-02-encounters-and-patient-movement-12",
    "originalQuery": "SELECT \n    ENC_CLOSED_YN,\n    COUNT(*) as count,\n    -- For closed encounters, check closure timing\n    AVG(CASE \n        WHEN ENC_CLOSED_YN = 'Y' AND ENC_CLOSE_DATE IS NOT NULL\n        THEN julianday(ENC_CLOSE_DATE) - julianday(CONTACT_DATE)\n        ELSE NULL\n    END) as avg_days_to_close\nFROM PAT_ENC\nGROUP BY ENC_CLOSED_YN;",
    "description": "Analyze encounter closure patterns",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 12
  },
  {
    "id": "02-02-encounters-and-patient-movement-13",
    "originalQuery": "-- Check hospital encounter data availability\nSELECT \n    COUNT(*) as total_encounters,\n    COUNT(HOSP_ADMSN_TIME) as has_admission_time,\n    COUNT(HOSP_DISCHRG_TIME) as has_discharge_time,\n    COUNT(CASE WHEN HOSP_ADMSN_TIME != '' AND HOSP_DISCHRG_TIME != '' THEN 1 END) as has_valid_times,\n    -- Note about data quality\n    'Note: Sample data may have empty timestamp fields' as data_note\nFROM PAT_ENC;",
    "description": "Calculate length of stay using different methods",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 13
  },
  {
    "id": "02-02-encounters-and-patient-movement-14",
    "originalQuery": "-- In full Epic, ENC_TYPE_C_NAME would classify encounters\nSELECT \n    'ENC_TYPE_C_NAME' as missing_column,\n    'Would classify encounters (Office Visit, Hospital, ED, etc.)' as purpose,\n    COUNT(*) as columns_in_pat_enc\nFROM _metadata\nWHERE table_name = 'PAT_ENC';",
    "description": "Check for missing encounter type classification",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 14
  },
  {
    "id": "02-02-encounters-and-patient-movement-15",
    "originalQuery": "WITH encounter_timeline AS (\n    SELECT \n        PAT_ENC_CSN_ID,\n        CONTACT_DATE,\n        PAT_ENC_DATE_REAL,\n        APPT_STATUS_C_NAME,\n        DEPARTMENT_ID,\n        VISIT_PROV_ID,\n        -- Calculate days since last encounter\n        ROUND(PAT_ENC_DATE_REAL - LAG(PAT_ENC_DATE_REAL) OVER (\n            PARTITION BY PAT_ID \n            ORDER BY PAT_ENC_DATE_REAL\n        ), 0) as days_since_last_visit\n    FROM PAT_ENC\n    WHERE PAT_ID = 'Z7004242'\n)\nSELECT * FROM encounter_timeline\nORDER BY PAT_ENC_DATE_REAL\nLIMIT 10;",
    "description": "Create a patient's encounter timeline",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 15
  },
  {
    "id": "02-02-encounters-and-patient-movement-16",
    "originalQuery": "WITH readmission_check AS (\n    SELECT \n        e1.PAT_ENC_CSN_ID as original_encounter,\n        e1.CONTACT_DATE as original_date,\n        e2.PAT_ENC_CSN_ID as potential_readmit,\n        e2.CONTACT_DATE as readmit_date,\n        ROUND(e2.PAT_ENC_DATE_REAL - e1.PAT_ENC_DATE_REAL, 0) as days_between\n    FROM PAT_ENC e1\n    JOIN PAT_ENC e2 ON e1.PAT_ID = e2.PAT_ID\n    WHERE e1.HOSP_DISCHRG_TIME IS NOT NULL\n      AND e2.HOSP_ADMSN_TIME IS NOT NULL\n      AND e2.PAT_ENC_DATE_REAL > e1.PAT_ENC_DATE_REAL\n      AND e2.PAT_ENC_DATE_REAL - e1.PAT_ENC_DATE_REAL <= 30\n)\nSELECT * FROM readmission_check\nORDER BY days_between\nLIMIT 5;",
    "description": "Find potential readmissions within 30 days",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 16
  },
  {
    "id": "02-03-diagnoses-and-problems-0",
    "originalQuery": "-- Encounter diagnoses: Multiple per visit\nSELECT 'Encounter Diagnoses' as type, COUNT(*) as total_records\nFROM PAT_ENC_DX\n\nUNION ALL\n\n-- Problem list: Ongoing conditions\nSELECT 'Problem List', COUNT(*)\nFROM PROBLEM_LIST;",
    "description": "Compare the two diagnosis storage models",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 0
  },
  {
    "id": "02-03-diagnoses-and-problems-1",
    "originalQuery": "SELECT \n    e.PAT_ENC_CSN_ID,\n    e.LINE,\n    e.DX_ID,\n    e.PRIMARY_DX_YN,\n    -- Join to get the diagnosis name\n    d.DX_NAME\nFROM PAT_ENC_DX e\nJOIN CLARITY_EDG d ON e.DX_ID = d.DX_ID\nWHERE e.PAT_ENC_CSN_ID = 720803470\nORDER BY e.LINE;",
    "description": "Examine the encounter diagnosis structure",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 1
  },
  {
    "id": "02-03-diagnoses-and-problems-2",
    "originalQuery": "-- Find cases where primary diagnosis is NOT LINE 1\nSELECT \n    PAT_ENC_CSN_ID,\n    LINE,\n    PRIMARY_DX_YN,\n    DX_ID,\n    CASE \n        WHEN PRIMARY_DX_YN = 'Y' AND LINE > 1 \n        THEN 'Primary diagnosis at LINE ' || LINE || '!'\n        ELSE 'Normal'\n    END as note\nFROM PAT_ENC_DX\nWHERE PRIMARY_DX_YN = 'Y' AND LINE > 1\nLIMIT 5;",
    "description": "Prove that LINE does not equal priority",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 2
  },
  {
    "id": "02-03-diagnoses-and-problems-3",
    "originalQuery": "SELECT \n    DX_ID,\n    DX_NAME,\n    -- Patient-friendly description when available\n    -- DX_NAME not always present\n    DX_NAME as patient_friendly_text\nFROM CLARITY_EDG\nWHERE DX_NAME LIKE '%reflux%'\nORDER BY DX_ID;",
    "description": "Explore the diagnosis master table",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 3
  },
  {
    "id": "02-03-diagnoses-and-problems-4",
    "originalQuery": "-- Check if diagnosis tables have ICD code columns\nSELECT \n    COUNT(*) as icd_columns,\n    'Note: ICD codes appear in CLM_DX table for claims, not in clinical diagnosis tables' as explanation\nFROM _metadata\nWHERE (LOWER(column_name) LIKE '%icd%' \n       OR LOWER(column_name) LIKE '%dx_code%')\n  AND table_name IN ('CLARITY_EDG', 'PAT_ENC_DX', 'PROBLEM_LIST');",
    "description": "Search for ICD code columns in diagnosis tables",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 4
  },
  {
    "id": "02-03-diagnoses-and-problems-5",
    "originalQuery": "SELECT \n    CLM_DX as icd_code,\n    CLM_DX_QUAL as code_type,\n    COUNT(*) as occurrences\nFROM CLM_DX\nWHERE CLM_DX IS NOT NULL\nGROUP BY CLM_DX, CLM_DX_QUAL\nORDER BY occurrences DESC\nLIMIT 5;",
    "description": "Find ICD codes in the claims table",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 5
  },
  {
    "id": "02-03-diagnoses-and-problems-6",
    "originalQuery": "SELECT \n    p.PROBLEM_LIST_ID,\n    p.DESCRIPTION,\n    p.PROBLEM_STATUS_C_NAME,\n    p.DATE_OF_ENTRY,\n    p.RESOLVED_DATE,\n    p.CHRONIC_YN\nFROM PROBLEM_LIST p\nORDER BY p.DATE_OF_ENTRY;",
    "description": "Examine the problem list structure",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 6
  },
  {
    "id": "02-03-diagnoses-and-problems-7",
    "originalQuery": "-- Look for history table\nSELECT COUNT(*) as history_records\nFROM PROBLEM_LIST_HX;",
    "description": "Check for problem list history tracking",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 7
  },
  {
    "id": "02-03-diagnoses-and-problems-8",
    "originalQuery": "-- Check chronic diagnosis documentation\nSELECT \n    DX_CHRONIC_YN,\n    COUNT(*) as count,\n    CASE \n        WHEN DX_CHRONIC_YN = 'Y' THEN 'Marked as chronic'\n        WHEN DX_CHRONIC_YN = 'N' THEN 'Not chronic'\n        ELSE 'Not specified'\n    END as chronic_status\nFROM PAT_ENC_DX\nGROUP BY DX_CHRONIC_YN;",
    "description": "Find chronic diagnoses that might be on problem list",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 8
  },
  {
    "id": "02-03-diagnoses-and-problems-9",
    "originalQuery": "WITH dx_summary AS (\n    SELECT \n        PAT_ENC_CSN_ID,\n        COUNT(*) as diagnosis_count,\n        SUM(CASE WHEN PRIMARY_DX_YN = 'Y' THEN 1 ELSE 0 END) as primary_count,\n        SUM(CASE WHEN DX_CHRONIC_YN = 'Y' THEN 1 ELSE 0 END) as chronic_count\n    FROM PAT_ENC_DX\n    GROUP BY PAT_ENC_CSN_ID\n)\nSELECT \n    diagnosis_count,\n    COUNT(*) as encounters,\n    ROUND(100.0 * COUNT(*) / (SELECT COUNT(DISTINCT PAT_ENC_CSN_ID) FROM PAT_ENC_DX), 1) as percentage\nFROM dx_summary\nGROUP BY diagnosis_count\nORDER BY diagnosis_count;",
    "description": "Analyze diagnosis patterns across encounters",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 9
  },
  {
    "id": "02-03-diagnoses-and-problems-10",
    "originalQuery": "SELECT \n    e.PAT_ENC_CSN_ID,\n    p.CONTACT_DATE,\n    e.PRIMARY_DX_YN,\n    d.DX_NAME\nFROM PAT_ENC_DX e\nJOIN CLARITY_EDG d ON e.DX_ID = d.DX_ID\nJOIN PAT_ENC p ON e.PAT_ENC_CSN_ID = p.PAT_ENC_CSN_ID\nWHERE d.DX_NAME LIKE '%reflux%'\nORDER BY p.CONTACT_DATE DESC;",
    "description": "Find all GERD encounters",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 10
  },
  {
    "id": "02-03-diagnoses-and-problems-11",
    "originalQuery": "SELECT \n    p.CONTACT_DATE,\n    e.LINE,\n    e.PRIMARY_DX_YN,\n    d.DX_NAME,\n    e.DX_CHRONIC_YN\nFROM PAT_ENC_DX e\nJOIN CLARITY_EDG d ON e.DX_ID = d.DX_ID\nJOIN PAT_ENC p ON e.PAT_ENC_CSN_ID = p.PAT_ENC_CSN_ID\nWHERE p.PAT_ID = 'Z7004242'\nORDER BY p.PAT_ENC_DATE_REAL, e.LINE;",
    "description": "Create a timeline of diagnoses",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 11
  },
  {
    "id": "02-03-diagnoses-and-problems-12",
    "originalQuery": "-- In practice, you'd check both encounter diagnoses and problem list\n-- This example shows the encounter diagnosis approach\nSELECT DISTINCT\n    p.PAT_ID,\n    d.DX_NAME,\n    MAX(p.CONTACT_DATE) as most_recent_visit\nFROM PAT_ENC_DX e\nJOIN CLARITY_EDG d ON e.DX_ID = d.DX_ID\nJOIN PAT_ENC p ON e.PAT_ENC_CSN_ID = p.PAT_ENC_CSN_ID\nWHERE d.DX_NAME LIKE '%diabetes%'\nGROUP BY p.PAT_ID, d.DX_NAME;",
    "description": "Find diabetic patients (would check both sources)",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 12
  },
  {
    "id": "02-03-diagnoses-and-problems-13",
    "originalQuery": "-- Encounters with multiple primary diagnoses (should be none)\nWITH primary_count AS (\n    SELECT \n        PAT_ENC_CSN_ID,\n        SUM(CASE WHEN PRIMARY_DX_YN = 'Y' THEN 1 ELSE 0 END) as primary_dx_count\n    FROM PAT_ENC_DX\n    GROUP BY PAT_ENC_CSN_ID\n)\nSELECT \n    primary_dx_count,\n    COUNT(*) as encounters\nFROM primary_count\nGROUP BY primary_dx_count\nORDER BY primary_dx_count;",
    "description": "Check for data quality issues",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 13
  },
  {
    "id": "02-03-diagnoses-and-problems-14",
    "originalQuery": "-- Find potential hypertension cases by name\nSELECT DISTINCT\n    DX_ID,\n    DX_NAME\nFROM CLARITY_EDG\nWHERE UPPER(DX_NAME) LIKE '%HYPERTENSION%'\n   OR UPPER(DX_NAME) LIKE '%HIGH BLOOD PRESSURE%'\nORDER BY DX_NAME;",
    "description": "Use diagnosis names for approximate matching",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 14
  },
  {
    "id": "02-04-orders-and-results-0",
    "originalQuery": "SELECT \n    'Procedures (Labs, Imaging)' as order_type, \n    COUNT(*) as total_orders\nFROM ORDER_PROC\n\nUNION ALL\n\nSELECT \n    'Medications', \n    COUNT(*)\nFROM ORDER_MED\n\nORDER BY total_orders DESC;",
    "description": "Compare the two order types",
    "chapterId": "02-04-orders-and-results",
    "index": 0
  },
  {
    "id": "02-04-orders-and-results-1",
    "originalQuery": "SELECT \n    ORDER_PROC_ID,\n    PAT_ID,\n    PAT_ENC_CSN_ID,\n    ORDERING_DATE,\n    DESCRIPTION,\n    ORDER_STATUS_C_NAME,\n    ABNORMAL_YN\nFROM ORDER_PROC\nWHERE ORDER_STATUS_C_NAME = 'Completed'\nLIMIT 5;",
    "description": "Explore the procedural order structure",
    "chapterId": "02-04-orders-and-results",
    "index": 1
  },
  {
    "id": "02-04-orders-and-results-2",
    "originalQuery": "SELECT \n    ORDER_STATUS_C_NAME,\n    COUNT(*) as orders,\n    -- Check which have results\n    SUM(CASE WHEN ORDER_PROC_ID IN (SELECT DISTINCT ORDER_PROC_ID FROM ORDER_RESULTS) \n             THEN 1 ELSE 0 END) as has_results\nFROM ORDER_PROC\nGROUP BY ORDER_STATUS_C_NAME\nORDER BY orders DESC;",
    "description": "Analyze order status distribution",
    "chapterId": "02-04-orders-and-results",
    "index": 2
  },
  {
    "id": "02-04-orders-and-results-3",
    "originalQuery": "SELECT \n    o.DESCRIPTION as panel_name,\n    r.LINE,\n    r.COMPONENT_ID_NAME,\n    r.ORD_VALUE,\n    r.REFERENCE_LOW || '-' || r.REFERENCE_HIGH as reference_range,\n    r.REFERENCE_UNIT,\n    r.RESULT_FLAG_C_NAME\nFROM ORDER_PROC o\nJOIN ORDER_RESULTS r ON o.ORDER_PROC_ID = r.ORDER_PROC_ID\nWHERE o.ORDER_PROC_ID = 772179262\nORDER BY r.LINE;",
    "description": "Examine a complete metabolic panel with results",
    "chapterId": "02-04-orders-and-results",
    "index": 3
  },
  {
    "id": "02-04-orders-and-results-4",
    "originalQuery": "SELECT \n    COMPONENT_ID_NAME,\n    ORD_VALUE as text_value,\n    ORD_NUM_VALUE as numeric_value,\n    -- Check for non-numeric results\n    CASE \n        WHEN ORD_NUM_VALUE = 9999999 THEN 'Non-numeric result'\n        WHEN ORD_NUM_VALUE IS NULL THEN 'No numeric value'\n        ELSE 'Numeric result'\n    END as value_type\nFROM ORDER_RESULTS\nWHERE ORDER_PROC_ID IN (\n    SELECT ORDER_PROC_ID \n    FROM ORDER_RESULTS \n    WHERE ORD_VALUE NOT LIKE '%.%' \n      AND ORD_VALUE NOT GLOB '[0-9]*'\n    LIMIT 5\n);",
    "description": "Compare text vs numeric result storage",
    "chapterId": "02-04-orders-and-results",
    "index": 4
  },
  {
    "id": "02-04-orders-and-results-5",
    "originalQuery": "-- First, check order-level summary\nSELECT \n    o.ORDER_PROC_ID,\n    o.DESCRIPTION,\n    o.ABNORMAL_YN as order_abnormal,\n    COUNT(r.LINE) as total_components,\n    SUM(CASE WHEN r.RESULT_FLAG_C_NAME != '(NONE)' AND r.RESULT_FLAG_C_NAME IS NOT NULL \n             THEN 1 ELSE 0 END) as abnormal_components\nFROM ORDER_PROC o\nJOIN ORDER_RESULTS r ON o.ORDER_PROC_ID = r.ORDER_PROC_ID\nWHERE o.ABNORMAL_YN = 'Y'\nGROUP BY o.ORDER_PROC_ID\nLIMIT 5;",
    "description": "Understand abnormal result hierarchy",
    "chapterId": "02-04-orders-and-results",
    "index": 5
  },
  {
    "id": "02-04-orders-and-results-6",
    "originalQuery": "SELECT \n    om.ORDER_MED_ID,\n    om.PAT_ENC_CSN_ID,\n    om.MEDICATION_ID,\n    cm.GENERIC_NAME,\n    om.ORDER_STATUS_C_NAME,\n    om.ORDERING_MODE_C_NAME\nFROM ORDER_MED om\nJOIN CLARITY_MEDICATION cm ON om.MEDICATION_ID = cm.MEDICATION_ID\nORDER BY om.ORDERING_DATE DESC;",
    "description": "Explore medication order structure",
    "chapterId": "02-04-orders-and-results",
    "index": 6
  },
  {
    "id": "02-04-orders-and-results-7",
    "originalQuery": "SELECT \n    MEDICATION_ID,\n    GENERIC_NAME,\n    -- Count how many times each medication was ordered\n    (SELECT COUNT(*) FROM ORDER_MED om WHERE om.MEDICATION_ID = cm.MEDICATION_ID) as times_ordered\nFROM CLARITY_MEDICATION cm\nWHERE MEDICATION_ID IN (SELECT DISTINCT MEDICATION_ID FROM ORDER_MED)\nORDER BY times_ordered DESC;",
    "description": "Explore the medication formulary",
    "chapterId": "02-04-orders-and-results",
    "index": 7
  },
  {
    "id": "02-04-orders-and-results-8",
    "originalQuery": "SELECT \n    o.ORDER_PROC_ID,\n    o.DESCRIPTION as test_ordered,\n    p.CONTACT_DATE,\n    p.DEPARTMENT_ID,\n    p.VISIT_PROV_ID,\n    -- Get primary diagnosis for context\n    d.DX_NAME as primary_diagnosis\nFROM ORDER_PROC o\nJOIN PAT_ENC p ON o.PAT_ENC_CSN_ID = p.PAT_ENC_CSN_ID\nLEFT JOIN PAT_ENC_DX dx ON p.PAT_ENC_CSN_ID = dx.PAT_ENC_CSN_ID AND dx.PRIMARY_DX_YN = 'Y'\nLEFT JOIN CLARITY_EDG d ON dx.DX_ID = d.DX_ID\nWHERE o.ORDER_STATUS_C_NAME = 'Completed'\nLIMIT 5;",
    "description": "Connect orders to their clinical context",
    "chapterId": "02-04-orders-and-results",
    "index": 8
  },
  {
    "id": "02-04-orders-and-results-9",
    "originalQuery": "-- Check ORDER_PROC provider fields\nSELECT \n    COUNT(*) as total_orders,\n    COUNT(AUTHRZING_PROV_ID) as has_authorizing,\n    COUNT(REFERRING_PROV_ID) as has_referring,\n    COUNT(BILLING_PROV_ID) as has_billing\nFROM ORDER_PROC;",
    "description": "Analyze provider patterns in orders",
    "chapterId": "02-04-orders-and-results",
    "index": 9
  },
  {
    "id": "02-04-orders-and-results-10",
    "originalQuery": "WITH turnaround AS (\n    SELECT \n        o.ORDER_PROC_ID,\n        o.DESCRIPTION,\n        o.ORDERING_DATE,\n        MIN(r.RESULT_DATE) as first_result,\n        -- Calculate days between order and result\n        ROUND(julianday(MIN(r.RESULT_DATE)) - julianday(o.ORDERING_DATE), 1) as days_to_result\n    FROM ORDER_PROC o\n    JOIN ORDER_RESULTS r ON o.ORDER_PROC_ID = r.ORDER_PROC_ID\n    WHERE o.ORDERING_DATE IS NOT NULL \n      AND r.RESULT_DATE IS NOT NULL\n    GROUP BY o.ORDER_PROC_ID\n)\nSELECT \n    CASE \n        WHEN days_to_result < 1 THEN 'Same day'\n        WHEN days_to_result < 2 THEN '1 day'\n        WHEN days_to_result < 7 THEN '2-6 days'\n        ELSE '7+ days'\n    END as turnaround_category,\n    COUNT(*) as orders\nFROM turnaround\nGROUP BY turnaround_category\nORDER BY MIN(days_to_result);",
    "description": "Analyze order to result turnaround times",
    "chapterId": "02-04-orders-and-results",
    "index": 10
  },
  {
    "id": "02-04-orders-and-results-11",
    "originalQuery": "SELECT name \nFROM sqlite_master \nWHERE type = 'table' \n  AND name LIKE '%MAR%';",
    "description": "Search for MAR tables",
    "chapterId": "02-04-orders-and-results",
    "index": 11
  },
  {
    "id": "02-04-orders-and-results-12",
    "originalQuery": "WITH order_summary AS (\n    SELECT \n        o.ORDER_PROC_ID,\n        o.DESCRIPTION,\n        o.ORDERING_DATE,\n        o.ORDER_STATUS_C_NAME,\n        o.ABNORMAL_YN,\n        COUNT(r.LINE) as result_count,\n        -- Aggregate result summaries\n        GROUP_CONCAT(\n            r.COMPONENT_ID_NAME || ': ' || r.ORD_VALUE || ' ' || \n            COALESCE(r.REFERENCE_UNIT, '') ||\n            CASE WHEN r.RESULT_FLAG_C_NAME != '(NONE)' \n                 THEN ' [' || r.RESULT_FLAG_C_NAME || ']' \n                 ELSE '' \n            END, \n            '; '\n        ) as results_summary\n    FROM ORDER_PROC o\n    LEFT JOIN ORDER_RESULTS r ON o.ORDER_PROC_ID = r.ORDER_PROC_ID\n    WHERE o.ORDER_STATUS_C_NAME = 'Completed'\n    GROUP BY o.ORDER_PROC_ID\n)\nSELECT * FROM order_summary\nWHERE result_count > 0\nLIMIT 3;",
    "description": "Create a complete order-to-result summary",
    "chapterId": "02-04-orders-and-results",
    "index": 12
  },
  {
    "id": "02-04-orders-and-results-13",
    "originalQuery": "-- Completed orders that lack results\nSELECT \n    o.ORDER_PROC_ID,\n    o.DESCRIPTION,\n    o.ORDERING_DATE,\n    o.ORDER_STATUS_C_NAME\nFROM ORDER_PROC o\nLEFT JOIN ORDER_RESULTS r ON o.ORDER_PROC_ID = r.ORDER_PROC_ID\nWHERE o.ORDER_STATUS_C_NAME = 'Completed'\n  AND r.ORDER_PROC_ID IS NULL;",
    "description": "Check for orders without results",
    "chapterId": "02-04-orders-and-results",
    "index": 13
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-0",
    "originalQuery": "SELECT \n    'Medication Orders' as data_type, COUNT(*) as records FROM ORDER_MED\nUNION ALL\nSELECT 'Allergies', COUNT(*) FROM PAT_ALLERGIES\nUNION ALL\nSELECT 'Immunizations', COUNT(*) FROM PAT_IMMUNIZATIONS\nORDER BY records DESC;",
    "description": "Overview of safety-critical data volumes",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 0
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-1",
    "originalQuery": "SELECT \n    om.ORDER_MED_ID,\n    cm.GENERIC_NAME,\n    om.ORDERING_DATE,\n    om.ORDER_END_TIME,\n    om.DISCON_TIME,\n    -- Calculate if discontinued early\n    CASE \n        WHEN om.DISCON_TIME IS NOT NULL \n         AND om.DISCON_TIME < om.ORDER_END_TIME\n        THEN 'Discontinued Early'\n        WHEN om.DISCON_TIME IS NOT NULL\n        THEN 'Completed as Ordered'\n        ELSE 'Active/Unknown'\n    END as medication_status\nFROM ORDER_MED om\nJOIN CLARITY_MEDICATION cm ON om.MEDICATION_ID = cm.MEDICATION_ID\nORDER BY om.ORDERING_DATE;",
    "description": "Analyze medication lifecycle with discontinuation",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 1
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-2",
    "originalQuery": "-- Check for any MAR-related tables\nSELECT name \nFROM sqlite_master \nWHERE type = 'table' \n  AND (name LIKE '%MAR%' OR name LIKE '%ADMIN%')\n  AND name LIKE '%MED%';",
    "description": "Search for administration data",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 2
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-3",
    "originalQuery": "-- Patient-to-allergy linking\nSELECT \n    pa.PAT_ID,\n    pa.LINE,\n    pa.ALLERGY_RECORD_ID,\n    a.ALLERGEN_ID_ALLERGEN_NAME,\n    a.SEVERITY_C_NAME,\n    a.ALRGY_STATUS_C_NAME\nFROM PAT_ALLERGIES pa\nJOIN ALLERGY a ON a.ALLERGY_ID = pa.ALLERGY_RECORD_ID\nWHERE pa.PAT_ID = 'Z7004242'\nORDER BY pa.LINE;",
    "description": "Explore the allergy data model",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 3
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-4",
    "originalQuery": "SELECT \n    a.ALLERGEN_ID_ALLERGEN_NAME as allergen,\n    a.SEVERITY_C_NAME as severity,\n    ar.LINE,\n    ar.REACTION_C_NAME\nFROM ALLERGY a\nJOIN ALLERGY_REACTIONS ar ON a.ALLERGY_ID = ar.ALLERGY_ID\nWHERE a.ALLERGY_ID IN (\n    SELECT ALLERGY_RECORD_ID \n    FROM PAT_ALLERGIES \n    WHERE PAT_ID = 'Z7004242'\n)\nORDER BY a.ALLERGY_ID, ar.LINE;",
    "description": "View allergy reactions detail",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 4
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-5",
    "originalQuery": "SELECT \n    ALRGY_STATUS_C_NAME,\n    COUNT(*) as count,\n    GROUP_CONCAT(ALLERGEN_ID_ALLERGEN_NAME, ', ') as examples\nFROM ALLERGY\nGROUP BY ALRGY_STATUS_C_NAME;",
    "description": "Analyze allergy statuses",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 5
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-6",
    "originalQuery": "-- Look for No Known Allergies entries and show actual allergens\nSELECT \n    ALLERGEN_ID_ALLERGEN_NAME,\n    ALRGY_STATUS_C_NAME,\n    COUNT(*) as patient_count,\n    CASE \n        WHEN UPPER(ALLERGEN_ID_ALLERGEN_NAME) LIKE '%NO%KNOWN%' \n          OR UPPER(ALLERGEN_ID_ALLERGEN_NAME) LIKE '%NKA%' \n        THEN 'NKA Entry'\n        ELSE 'Specific Allergen'\n    END as entry_type\nFROM ALLERGY\nGROUP BY ALLERGEN_ID_ALLERGEN_NAME, ALRGY_STATUS_C_NAME\nORDER BY patient_count DESC;",
    "description": "Search for NKA documentation",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 6
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-7",
    "originalQuery": "SELECT \n    pi.PAT_ID,\n    pi.LINE,\n    i.IMMUNZATN_ID_NAME,\n    i.IMMUNE_DATE,\n    i.DOSE,\n    i.ROUTE_C_NAME,\n    i.IMMNZTN_STATUS_C_NAME\nFROM PAT_IMMUNIZATIONS pi\nJOIN IMMUNE i ON pi.IMMUNE_ID = i.IMMUNE_ID\nWHERE pi.PAT_ID = 'Z7004242'\nORDER BY i.IMMUNE_DATE DESC;",
    "description": "Explore immunization records",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 7
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-8",
    "originalQuery": "SELECT \n    i.IMMNZTN_STATUS_C_NAME,\n    COUNT(*) as count,\n    GROUP_CONCAT(DISTINCT i.IMMUNZATN_ID_NAME) as vaccines\nFROM IMMUNE i\nGROUP BY i.IMMNZTN_STATUS_C_NAME;",
    "description": "Analyze immunization sources",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 8
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-9",
    "originalQuery": "SELECT \n    IMMUNZATN_ID_NAME as vaccine,\n    IMMUNE_DATE,\n    MFG_C_NAME as manufacturer,\n    LOT as lot_number,\n    EXP_DATE as expiration,\n    DOSE,\n    ROUTE_C_NAME as route,\n    SITE_C_NAME as site\nFROM IMMUNE\nWHERE LOT IS NOT NULL\nORDER BY IMMUNE_DATE DESC\nLIMIT 5;",
    "description": "View complete vaccine administration details",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 9
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-10",
    "originalQuery": "-- Find patients with medication orders who have allergies\n-- (In production, you'd check for specific drug-allergy interactions)\nWITH patient_allergies AS (\n    SELECT DISTINCT \n        pa.PAT_ID,\n        COUNT(DISTINCT a.ALLERGEN_ID) as allergy_count\n    FROM PAT_ALLERGIES pa\n    JOIN ALLERGY a ON pa.ALLERGY_RECORD_ID = a.ALLERGY_ID\n    WHERE a.ALRGY_STATUS_C_NAME = 'Active'\n    GROUP BY pa.PAT_ID\n),\npatient_meds AS (\n    SELECT DISTINCT\n        om.PAT_ID,\n        COUNT(DISTINCT om.MEDICATION_ID) as med_count\n    FROM ORDER_MED om\n    WHERE om.ORDER_STATUS_C_NAME = 'Sent'\n    GROUP BY om.PAT_ID\n)\nSELECT \n    pm.PAT_ID,\n    pm.med_count as active_medications,\n    COALESCE(pa.allergy_count, 0) as active_allergies\nFROM patient_meds pm\nLEFT JOIN patient_allergies pa ON pm.PAT_ID = pa.PAT_ID;",
    "description": "Check for potential medication-allergy conflicts",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 10
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-11",
    "originalQuery": "WITH vaccine_doses AS (\n    SELECT \n        IMMUNZATN_ID_NAME,\n        MAX(CAST(DOSE AS INTEGER)) as max_dose,\n        COUNT(*) as total_records\n    FROM IMMUNE\n    WHERE CAST(DOSE AS TEXT) GLOB '[0-9]*'  -- Only numeric doses\n    GROUP BY IMMUNZATN_ID_NAME\n)\nSELECT \n    IMMUNZATN_ID_NAME as vaccine,\n    max_dose as highest_dose_given,\n    total_records,\n    CASE \n        WHEN max_dose >= 2 THEN 'Multi-dose series'\n        ELSE 'Single dose'\n    END as series_type\nFROM vaccine_doses\nORDER BY max_dose DESC;",
    "description": "Analyze vaccine series completion",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 11
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-12",
    "originalQuery": "-- Combine medications and allergy updates in chronological order\nSELECT \n    'Medication Started' as event_type,\n    ORDERING_DATE as event_date,\n    GENERIC_NAME as description\nFROM ORDER_MED om\nJOIN CLARITY_MEDICATION cm ON om.MEDICATION_ID = cm.MEDICATION_ID\nWHERE om.PAT_ID = 'Z7004242'\n\nUNION ALL\n\nSELECT \n    'Allergy Noted' as event_type,\n    a.DATE_NOTED as event_date,\n    a.ALLERGEN_ID_ALLERGEN_NAME as description\nFROM ALLERGY a\nJOIN PAT_ALLERGIES pa ON a.ALLERGY_ID = pa.ALLERGY_RECORD_ID\nWHERE pa.PAT_ID = 'Z7004242'\n\nORDER BY event_date DESC;",
    "description": "Create a patient safety timeline",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 12
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-13",
    "originalQuery": "WITH safety_summary AS (\n    SELECT \n        p.PAT_ID,\n        p.PAT_NAME,\n        -- Count active medications\n        (SELECT COUNT(*) FROM ORDER_MED om \n         WHERE om.PAT_ID = p.PAT_ID \n           AND om.ORDER_STATUS_C_NAME = 'Sent'\n           AND om.DISCON_TIME IS NULL) as active_meds,\n        -- Count active allergies\n        (SELECT COUNT(DISTINCT pa.ALLERGY_RECORD_ID) \n         FROM PAT_ALLERGIES pa\n         JOIN ALLERGY a ON pa.ALLERGY_RECORD_ID = a.ALLERGY_ID\n         WHERE pa.PAT_ID = p.PAT_ID\n           AND a.ALRGY_STATUS_C_NAME = 'Active') as active_allergies,\n        -- Count immunizations\n        (SELECT COUNT(*) FROM PAT_IMMUNIZATIONS pi\n         WHERE pi.PAT_ID = p.PAT_ID) as total_immunizations\n    FROM PATIENT p\n)\nSELECT * FROM safety_summary;",
    "description": "Create a comprehensive patient safety summary",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 13
  },
  {
    "id": "10-01-tracking-patient-conditions-diagnoses-and-problems-0",
    "originalQuery": "SELECT \n    DX_ID,\n    DX_NAME,\n    PAT_FRIENDLY_TEXT\nFROM CLARITY_EDG\nWHERE DX_NAME LIKE '%concussion%' \n   OR DX_NAME LIKE '%reflux%'\n   OR DX_NAME LIKE '%hypertension%'\nORDER BY DX_NAME;",
    "description": "Explore the diagnosis master table to see available diagnoses",
    "chapterId": "10-01-tracking-patient-conditions-diagnoses-and-problems",
    "index": 0
  },
  {
    "id": "10-01-tracking-patient-conditions-diagnoses-and-problems-1",
    "originalQuery": "SELECT \n    pl.PROBLEM_LIST_ID,\n    edg.DX_NAME,\n    pl.PROBLEM_STATUS_C_NAME as status,\n    pl.CHRONIC_YN as is_chronic,\n    pl.NOTED_DATE,\n    pl.SHOW_IN_MYC_YN as visible_to_patient\nFROM PROBLEM_LIST pl\nJOIN CLARITY_EDG edg ON pl.DX_ID = edg.DX_ID\nWHERE pl.PROBLEM_STATUS_C_NAME = 'Active';",
    "description": "View active problems with their key attributes",
    "chapterId": "10-01-tracking-patient-conditions-diagnoses-and-problems",
    "index": 1
  },
  {
    "id": "10-01-tracking-patient-conditions-diagnoses-and-problems-2",
    "originalQuery": "SELECT \n    p.PAT_NAME,\n    ppl.LINE as problem_number,\n    edg.DX_NAME,\n    pl.NOTED_DATE,\n    JULIANDAY('now') - JULIANDAY(pl.NOTED_DATE) as days_on_list\nFROM PATIENT p\nJOIN PAT_PROBLEM_LIST ppl ON p.PAT_ID = ppl.PAT_ID\nJOIN PROBLEM_LIST pl ON ppl.PROBLEM_LIST_ID = pl.PROBLEM_LIST_ID\nJOIN CLARITY_EDG edg ON pl.DX_ID = edg.DX_ID\nWHERE p.PAT_ID = 'Z7004242'\nORDER BY ppl.LINE;",
    "description": "See how problems are linked to a specific patient",
    "chapterId": "10-01-tracking-patient-conditions-diagnoses-and-problems",
    "index": 2
  },
  {
    "id": "10-01-tracking-patient-conditions-diagnoses-and-problems-3",
    "originalQuery": "SELECT \n    plh.PROBLEM_LIST_ID,\n    plh.LINE as change_number,\n    plh.HX_STATUS_C_NAME as status_at_time,\n    plh.HX_ENTRY_INST as change_timestamp,\n    plh.HX_ENTRY_USER_ID_NAME as changed_by,\n    plh.HX_PROBLEM_EPT_CSN as encounter_id\nFROM PROBLEM_LIST_HX plh\nORDER BY plh.PROBLEM_LIST_ID, plh.LINE;",
    "description": "View the complete history of changes to problem lists",
    "chapterId": "10-01-tracking-patient-conditions-diagnoses-and-problems",
    "index": 3
  },
  {
    "id": "10-01-tracking-patient-conditions-diagnoses-and-problems-4",
    "originalQuery": "SELECT \n    ped.LINE as dx_priority,\n    ped.PRIMARY_DX_YN as is_primary,\n    edg.DX_NAME,\n    CASE \n        WHEN ped.DX_LINK_PROB_ID IS NOT NULL THEN 'Yes'\n        ELSE 'No'\n    END as linked_to_problem,\n    ped.DX_CHRONIC_YN as is_chronic\nFROM PAT_ENC_DX ped\nJOIN CLARITY_EDG edg ON ped.DX_ID = edg.DX_ID\nWHERE ped.PAT_ENC_CSN_ID = 948004323.0\nORDER BY ped.LINE;",
    "description": "Examine diagnoses from a specific encounter with problem linkage",
    "chapterId": "10-01-tracking-patient-conditions-diagnoses-and-problems",
    "index": 4
  },
  {
    "id": "10-01-tracking-patient-conditions-diagnoses-and-problems-5",
    "originalQuery": "SELECT \n    pe.CONTACT_DATE,\n    edg_enc.DX_NAME as encounter_diagnosis,\n    edg_prob.DX_NAME as linked_problem,\n    pl.NOTED_DATE as problem_start_date\nFROM PAT_ENC_DX ped\nJOIN PAT_ENC pe ON ped.PAT_ENC_CSN_ID = pe.PAT_ENC_CSN_ID\nJOIN CLARITY_EDG edg_enc ON ped.DX_ID = edg_enc.DX_ID\nJOIN PROBLEM_LIST pl ON ped.DX_LINK_PROB_ID = pl.PROBLEM_LIST_ID\nJOIN CLARITY_EDG edg_prob ON pl.DX_ID = edg_prob.DX_ID\nWHERE ped.DX_LINK_PROB_ID IS NOT NULL\n  AND pe.PAT_ID = 'Z7004242'\nORDER BY pe.CONTACT_DATE DESC\nLIMIT 5;",
    "description": "Find encounters where existing problems were addressed",
    "chapterId": "10-01-tracking-patient-conditions-diagnoses-and-problems",
    "index": 5
  },
  {
    "id": "10-01-tracking-patient-conditions-diagnoses-and-problems-6",
    "originalQuery": "SELECT \n    td.TX_ID,\n    td.LINE as billing_priority,\n    edg.DX_NAME,\n    td.DX_QUALIFIER_C_NAME as status,\n    td.POST_DATE\nFROM TX_DIAG td\nJOIN CLARITY_EDG edg ON td.DX_ID = edg.DX_ID\nWHERE td.LINE = 1  -- Primary diagnoses for billing\nORDER BY td.POST_DATE DESC\nLIMIT 5;",
    "description": "See how diagnoses flow to billing transactions",
    "chapterId": "10-01-tracking-patient-conditions-diagnoses-and-problems",
    "index": 6
  },
  {
    "id": "10-01-tracking-patient-conditions-diagnoses-and-problems-7",
    "originalQuery": "SELECT \n    had.PAT_ENC_CSN_ID,\n    had.LINE,\n    edg.DX_NAME as admission_diagnosis,\n    pe.HOSP_ADMSN_TIME\nFROM HSP_ADMIT_DIAG had\nJOIN CLARITY_EDG edg ON had.DX_ID = edg.DX_ID\nJOIN PAT_ENC pe ON had.PAT_ENC_CSN_ID = pe.PAT_ENC_CSN_ID;",
    "description": "View hospital admission diagnoses",
    "chapterId": "10-01-tracking-patient-conditions-diagnoses-and-problems",
    "index": 7
  },
  {
    "id": "10-01-tracking-patient-conditions-diagnoses-and-problems-8",
    "originalQuery": "SELECT \n    odp.ORDER_PROC_ID,\n    edg.DX_NAME as supporting_diagnosis,\n    odp.DX_QUALIFIER_C_NAME,\n    op.DESCRIPTION as procedure_ordered\nFROM ORDER_DX_PROC odp\nJOIN CLARITY_EDG edg ON odp.DX_ID = edg.DX_ID\nJOIN ORDER_PROC op ON odp.ORDER_PROC_ID = op.ORDER_PROC_ID\nWHERE edg.DX_NAME LIKE '%screening%'\nLIMIT 5;",
    "description": "See diagnoses supporting procedure orders",
    "chapterId": "10-01-tracking-patient-conditions-diagnoses-and-problems",
    "index": 8
  },
  {
    "id": "10-01-tracking-patient-conditions-diagnoses-and-problems-9",
    "originalQuery": "WITH primary_diagnoses AS (\n    SELECT \n        ped.DX_ID,\n        COUNT(*) as encounter_count\n    FROM PAT_ENC_DX ped\n    WHERE ped.PRIMARY_DX_YN = 'Y'\n    GROUP BY ped.DX_ID\n)\nSELECT \n    edg.DX_NAME,\n    pd.encounter_count,\n    ROUND(pd.encounter_count * 100.0 / \n        (SELECT COUNT(DISTINCT PAT_ENC_CSN_ID) \n         FROM PAT_ENC_DX WHERE PRIMARY_DX_YN = 'Y'), 1) as pct_of_encounters\nFROM primary_diagnoses pd\nJOIN CLARITY_EDG edg ON pd.DX_ID = edg.DX_ID\nORDER BY pd.encounter_count DESC\nLIMIT 5;",
    "description": "Analyze primary diagnosis patterns across encounters",
    "chapterId": "10-01-tracking-patient-conditions-diagnoses-and-problems",
    "index": 9
  },
  {
    "id": "10-01-tracking-patient-conditions-diagnoses-and-problems-10",
    "originalQuery": "SELECT \n    p.PAT_NAME,\n    edg.DX_NAME as problem,\n    pl.PROBLEM_STATUS_C_NAME as status,\n    SUBSTR(pl.NOTED_DATE, 1, 10) as problem_start,\n    SUBSTR(MAX(pe.CONTACT_DATE), 1, 10) as last_encounter,\n    CASE \n        WHEN julianday(MAX(pe.CONTACT_DATE)) > julianday('now', '-30 days') THEN 'Recently seen'\n        WHEN julianday(MAX(pe.CONTACT_DATE)) > julianday('now', '-90 days') THEN 'Needs follow-up'\n        ELSE 'Overdue for care'\n    END as care_status\nFROM PATIENT p\nJOIN PAT_PROBLEM_LIST ppl ON p.PAT_ID = ppl.PAT_ID\nJOIN PROBLEM_LIST pl ON ppl.PROBLEM_LIST_ID = pl.PROBLEM_LIST_ID\nJOIN CLARITY_EDG edg ON pl.DX_ID = edg.DX_ID\nLEFT JOIN PAT_ENC pe ON p.PAT_ID = pe.PAT_ID\nWHERE pl.PROBLEM_STATUS_C_NAME = 'Active'\nGROUP BY p.PAT_NAME, edg.DX_NAME, pl.PROBLEM_STATUS_C_NAME, pl.NOTED_DATE\nORDER BY MAX(pe.CONTACT_DATE) ASC;",
    "description": "Analyze active problems and their last encounter dates",
    "chapterId": "10-01-tracking-patient-conditions-diagnoses-and-problems",
    "index": 10
  },
  {
    "id": "10-01-tracking-patient-safety-allergies-immunizations-0",
    "originalQuery": "SELECT \n    CASE \n        WHEN name LIKE '%ALLERG%' OR name LIKE '%ALG%' THEN 'Allergy Tables'\n        WHEN name LIKE '%IMMUN%' OR name LIKE '%IMMUNE%' THEN 'Immunization Tables'\n    END as domain,\n    COUNT(*) as table_count,\n    GROUP_CONCAT(name, ', ') as table_names\nFROM sqlite_master \nWHERE type = 'table' \n  AND (name LIKE '%ALLERG%' OR name LIKE '%ALG%' \n       OR name LIKE '%IMMUN%' OR name LIKE '%IMMUNE%')\nGROUP BY domain\nORDER BY domain;",
    "description": "Discover the scope of allergy and immunization tracking",
    "chapterId": "10-01-tracking-patient-safety-allergies-immunizations",
    "index": 0
  },
  {
    "id": "10-01-tracking-patient-safety-allergies-immunizations-1",
    "originalQuery": "SELECT \n    a.ALLERGEN_ID_ALLERGEN_NAME as Allergen,\n    a.ALLERGY_SEVERITY_C_NAME as Severity,\n    a.SEVERITY_C_NAME as Type,\n    a.DATE_NOTED,\n    ar.REACTION_C_NAME as Reaction\nFROM PAT_ALLERGIES pa\nJOIN ALLERGY a ON pa.ALLERGY_RECORD_ID = a.ALLERGY_ID\nLEFT JOIN ALLERGY_REACTIONS ar ON a.ALLERGY_ID = ar.ALLERGY_ID\nWHERE pa.PAT_ID = 'Z7004242'\n  AND a.ALRGY_STATUS_C_NAME = 'Active'\nORDER BY a.ALLERGY_SEVERITY_C_NAME DESC, a.ALLERGEN_ID_ALLERGEN_NAME;",
    "description": "View a patient's active allergies with severity",
    "chapterId": "10-01-tracking-patient-safety-allergies-immunizations",
    "index": 1
  },
  {
    "id": "10-01-tracking-patient-safety-allergies-immunizations-2",
    "originalQuery": "SELECT \n    ALRG_UPDT_DATE as Review_Date,\n    ALRG_UPDT_USER_ID_NAME as Reviewed_By,\n    ALRG_HX_REV_STAT_C_NAME as Review_Status,\n    ALRG_HX_REV_REAS_C_NAME as Review_Reason,\n    ALRG_HX_REV_EPT_CSN as Encounter_ID\nFROM PATIENT_ALG_UPD_HX\nWHERE PAT_ID = 'Z7004242'\nORDER BY LINE DESC\nLIMIT 5;",
    "description": "Track allergy review compliance",
    "chapterId": "10-01-tracking-patient-safety-allergies-immunizations",
    "index": 2
  },
  {
    "id": "10-01-tracking-patient-safety-allergies-immunizations-3",
    "originalQuery": "SELECT \n    a.ALLERGEN_ID_ALLERGEN_NAME as Allergen,\n    COUNT(ar.LINE) as Reaction_Count,\n    GROUP_CONCAT(ar.REACTION_C_NAME, ' + ') as All_Reactions,\n    a.ALLERGY_SEVERITY_C_NAME as Severity\nFROM ALLERGY a\nJOIN ALLERGY_REACTIONS ar ON a.ALLERGY_ID = ar.ALLERGY_ID\nWHERE a.ALRGY_STATUS_C_NAME = 'Active'\n  AND a.ALLERGY_ID IN (SELECT ALLERGY_RECORD_ID FROM PAT_ALLERGIES WHERE PAT_ID = 'Z7004242')\nGROUP BY a.ALLERGY_ID, a.ALLERGEN_ID_ALLERGEN_NAME, a.ALLERGY_SEVERITY_C_NAME\nORDER BY Reaction_Count DESC;",
    "description": "Find allergens causing multiple reaction types",
    "chapterId": "10-01-tracking-patient-safety-allergies-immunizations",
    "index": 3
  },
  {
    "id": "10-01-tracking-patient-safety-allergies-immunizations-4",
    "originalQuery": "SELECT \n    i.IMMUNZATN_ID_NAME as Vaccine,\n    i.IMMUNE_DATE as Date_Given,\n    CASE \n        WHEN i.IMM_HISTORIC_ADM_YN = 'Y' THEN 'Historical'\n        ELSE 'Given Here'\n    END as Record_Type,\n    i.DOSE as Dose_Number,\n    i.ROUTE_C_NAME as Route,\n    i.SITE_C_NAME as Site,\n    i.LOT as Lot_Number,\n    i.GIVEN_BY_USER_ID_NAME as Administered_By\nFROM IMMUNE i\nJOIN PAT_IMMUNIZATIONS pi ON i.IMMUNE_ID = pi.IMMUNE_ID\nWHERE pi.PAT_ID = 'Z7004242'\nORDER BY i.IMMUNE_DATE DESC\nLIMIT 10;",
    "description": "View comprehensive immunization history",
    "chapterId": "10-01-tracking-patient-safety-allergies-immunizations",
    "index": 4
  },
  {
    "id": "10-01-tracking-patient-safety-allergies-immunizations-5",
    "originalQuery": "SELECT DISTINCT\n    i.IMMUNZATN_ID_NAME as Vaccine,\n    ih.IMMNZTN_HX_STATUS_C_NAME as Historical_Status,\n    ih.IMMNZTN_HX_ENT_DATE as Entry_Date,\n    ih.IMMNZTN_HX_ENTRY_ID_NAME as Entered_By,\n    'Shows audit trail of immunization documentation' as Purpose\nFROM IMMUNE i\nJOIN IMMUNE_HISTORY ih ON i.IMMUNE_ID = ih.IMMUNE_ID\nJOIN PAT_IMMUNIZATIONS pi ON i.IMMUNE_ID = pi.IMMUNE_ID\nWHERE pi.PAT_ID = 'Z7004242'\n  AND ih.IMMNZTN_HX_STATUS_C_NAME IS NOT NULL\nORDER BY ih.IMMNZTN_HX_ENT_DATE DESC\nLIMIT 5;",
    "description": "Examine immunization record changes",
    "chapterId": "10-01-tracking-patient-safety-allergies-immunizations",
    "index": 5
  },
  {
    "id": "10-01-tracking-patient-safety-allergies-immunizations-6",
    "originalQuery": "SELECT \n    a.ALLERGEN_ID_ALLERGEN_NAME as Allergen,\n    COUNT(DISTINCT pa.PAT_ID) as Patient_Count,\n    a.ALLERGY_SEVERITY_C_NAME as Common_Severity,\n    GROUP_CONCAT(DISTINCT ar.REACTION_C_NAME) as Typical_Reactions\nFROM PAT_ALLERGIES pa\nJOIN ALLERGY a ON pa.ALLERGY_RECORD_ID = a.ALLERGY_ID\nLEFT JOIN ALLERGY_REACTIONS ar ON a.ALLERGY_ID = ar.ALLERGY_ID\nWHERE a.ALRGY_STATUS_C_NAME = 'Active'\nGROUP BY a.ALLERGEN_ID_ALLERGEN_NAME, a.ALLERGY_SEVERITY_C_NAME\nHAVING Patient_Count >= 1\nORDER BY Patient_Count DESC\nLIMIT 10;",
    "description": "Analyze allergy patterns across patients",
    "chapterId": "10-01-tracking-patient-safety-allergies-immunizations",
    "index": 6
  },
  {
    "id": "10-01-tracking-patient-safety-allergies-immunizations-7",
    "originalQuery": "WITH covid_doses AS (\n    SELECT \n        pi.PAT_ID,\n        i.IMMUNZATN_ID_NAME,\n        i.IMMUNE_DATE,\n        ROW_NUMBER() OVER (\n            PARTITION BY pi.PAT_ID \n            ORDER BY i.IMMUNE_DATE\n        ) as Dose_Number\n    FROM PAT_IMMUNIZATIONS pi\n    JOIN IMMUNE i ON pi.IMMUNE_ID = i.IMMUNE_ID\n    WHERE i.IMMUNZATN_ID_NAME LIKE '%COVID%'\n      AND pi.PAT_ID = 'Z7004242'\n)\nSELECT \n    Dose_Number,\n    IMMUNZATN_ID_NAME as Vaccine_Type,\n    IMMUNE_DATE,\n    JULIANDAY(IMMUNE_DATE) - JULIANDAY(LAG(IMMUNE_DATE) OVER (ORDER BY IMMUNE_DATE)) as Days_Between_Doses\nFROM covid_doses\nORDER BY Dose_Number;",
    "description": "Track COVID vaccine series",
    "chapterId": "10-01-tracking-patient-safety-allergies-immunizations",
    "index": 7
  },
  {
    "id": "10-01-tracking-patient-safety-allergies-immunizations-8",
    "originalQuery": "SELECT \n    af.PAT_ID,\n    af.ALRGY_FLAG_YN as Has_Allergies_Flag,\n    COUNT(DISTINCT a.ALLERGY_ID) as Active_Allergy_Count,\n    af.ALRGY_FLAG_UPD_DTTM as Flag_Last_Updated,\n    af.ALRGY_FLG_UPD_BY_ID_NAME as Updated_By\nFROM ALLERGY_FLAG af\nLEFT JOIN PAT_ALLERGIES pa ON af.PAT_ID = pa.PAT_ID\nLEFT JOIN ALLERGY a ON pa.ALLERGY_RECORD_ID = a.ALLERGY_ID \n    AND a.ALRGY_STATUS_C_NAME = 'Active'\nWHERE af.PAT_ID = 'Z7004242'\nGROUP BY af.PAT_ID, af.ALRGY_FLAG_YN, af.ALRGY_FLAG_UPD_DTTM, af.ALRGY_FLG_UPD_BY_ID_NAME;",
    "description": "Show allergy flag status",
    "chapterId": "10-01-tracking-patient-safety-allergies-immunizations",
    "index": 8
  },
  {
    "id": "10-01-tracking-patient-safety-allergies-immunizations-9",
    "originalQuery": "-- Find patients overdue for allergy review\nWITH last_review AS (\n    SELECT \n        PAT_ID,\n        MAX(ALRG_UPDT_DATE) as Last_Review_Date\n    FROM PATIENT_ALG_UPD_HX\n    GROUP BY PAT_ID\n)\nSELECT \n    p.PAT_ID,\n    p.PAT_NAME,\n    lr.Last_Review_Date,\n    CAST(JULIANDAY('now') - JULIANDAY(lr.Last_Review_Date) AS INTEGER) as Days_Since_Review,\n    CASE \n        WHEN JULIANDAY('now') - JULIANDAY(lr.Last_Review_Date) > 365 THEN 'Overdue'\n        WHEN JULIANDAY('now') - JULIANDAY(lr.Last_Review_Date) > 300 THEN 'Due Soon'\n        ELSE 'Current'\n    END as Review_Status\nFROM PATIENT p\nLEFT JOIN last_review lr ON p.PAT_ID = lr.PAT_ID\nWHERE p.PAT_ID = 'Z7004242';",
    "description": "Identify compliance gaps",
    "chapterId": "10-01-tracking-patient-safety-allergies-immunizations",
    "index": 9
  },
  {
    "id": "10-02-understanding-patient-identity-demographics-0",
    "originalQuery": "SELECT \n    CASE \n        WHEN name LIKE 'PATIENT%' AND name NOT LIKE 'PATIENT_%' THEN 'Core Patient Tables'\n        WHEN name LIKE 'PAT_%' THEN 'Patient Attribute Tables'\n        WHEN name LIKE '%IDENTITY%' THEN 'Identity Tables'\n        WHEN name LIKE '%RELATIONSHIP%' THEN 'Relationship Tables'\n        ELSE 'Other Patient Tables'\n    END as table_category,\n    COUNT(*) as table_count\nFROM sqlite_master \nWHERE type = 'table' \n  AND (name LIKE '%PATIENT%' OR name LIKE '%PAT_%' OR name LIKE '%IDENTITY%')\nGROUP BY table_category\nORDER BY table_count DESC;",
    "description": "Discover the scope of patient data management",
    "chapterId": "10-02-understanding-patient-identity-demographics",
    "index": 0
  },
  {
    "id": "10-02-understanding-patient-identity-demographics-1",
    "originalQuery": "SELECT\n    i.LINE,\n    t.ID_TYPE_NAME as Identifier_Type,\n    i.IDENTITY_ID as Identifier_Value,\n    CASE t.ID_TYPE\n        WHEN 0 THEN 'Epic system-wide ID'\n        WHEN 14 THEN 'Government program ID'\n        WHEN 955 THEN 'Facility-specific MRN'\n    END as Purpose\nFROM IDENTITY_ID i\nJOIN IDENTITY_ID_TYPE t ON i.IDENTITY_TYPE_ID = t.ID_TYPE\nWHERE i.PAT_ID = 'Z7004242'\nORDER BY i.LINE;",
    "description": "View how one patient has multiple identifiers",
    "chapterId": "10-02-understanding-patient-identity-demographics",
    "index": 1
  },
  {
    "id": "10-02-understanding-patient-identity-demographics-2",
    "originalQuery": "SELECT \n    name as table_name,\n    (SELECT COUNT(*) FROM pragma_table_info(sm.name)) as column_count,\n    CASE \n        WHEN name = 'PATIENT' THEN 'Core demographics'\n        WHEN name = 'PATIENT_2' THEN 'Extended demographics'\n        WHEN name = 'PATIENT_3' THEN 'Clinical demographics'\n        WHEN name = 'PATIENT_4' THEN 'Identity & preferences'\n        WHEN name = 'PATIENT_5' THEN 'Additional clinical'\n        WHEN name = 'PATIENT_6' THEN 'Specialized fields'\n    END as primary_purpose\nFROM sqlite_master sm\nWHERE type = 'table' \n  AND name LIKE 'PATIENT%'\n  AND name NOT LIKE 'PATIENT_%'\nORDER BY name;",
    "description": "Explore Epic's overflow table pattern",
    "chapterId": "10-02-understanding-patient-identity-demographics",
    "index": 2
  },
  {
    "id": "10-02-understanding-patient-identity-demographics-3",
    "originalQuery": "SELECT \n    p.PAT_ID,\n    p.PAT_NAME,\n    p.SEX_C_NAME as Legal_Sex,\n    p4.GENDER_IDENTITY_C_NAME as Gender_Identity,\n    p4.SEX_ASGN_AT_BIRTH_C_NAME as Sex_Assigned_at_Birth,\n    CASE \n        WHEN p.SEX_C_NAME = p4.GENDER_IDENTITY_C_NAME THEN 'Cisgender'\n        WHEN p4.GENDER_IDENTITY_C_NAME IS NULL THEN 'Not specified'\n        ELSE 'Gender diverse'\n    END as Identity_Status\nFROM PATIENT p\nLEFT JOIN PATIENT_4 p4 ON p.PAT_ID = p4.PAT_ID\nWHERE p.PAT_ID = 'Z7004242';",
    "description": "See how Epic tracks sex and gender separately",
    "chapterId": "10-02-understanding-patient-identity-demographics",
    "index": 3
  },
  {
    "id": "10-02-understanding-patient-identity-demographics-4",
    "originalQuery": "SELECT \n    LINE as Version,\n    DATE(EFF_START_DATE) as Moved_In,\n    CASE \n        WHEN EFF_END_DATE IS NULL OR EFF_END_DATE = '' THEN 'Current Address'\n        ELSE DATE(EFF_END_DATE)\n    END as Moved_Out,\n    CITY_HX || ', ' || ZIP_HX as Location,\n    ADDR_CHNG_SOURCE_C_NAME as Updated_Via,\n    CASE SIGNIFICANT_CHANGE_YN \n        WHEN 'Y' THEN 'Major Move'\n        ELSE 'Minor Update'\n    END as Change_Type\nFROM PAT_ADDR_CHNG_HX\nWHERE PAT_ID = 'Z7004242'\nORDER BY EFF_START_DATE;",
    "description": "Follow a patient's address history",
    "chapterId": "10-02-understanding-patient-identity-demographics",
    "index": 4
  },
  {
    "id": "10-02-understanding-patient-identity-demographics-5",
    "originalQuery": "SELECT \n    'Primary Email' as Channel,\n    p.EMAIL_ADDRESS as Contact_Info\nFROM PATIENT p\nWHERE p.PAT_ID = 'Z7004242' AND p.EMAIL_ADDRESS IS NOT NULL\nUNION ALL\nSELECT \n    'Email ' || LINE as Channel,\n    EMAIL_ADDRESS as Contact_Info\nFROM PAT_EMAILADDRESS\nWHERE PAT_ID = 'Z7004242'\nUNION ALL\nSELECT \n    'Home Phone' as Channel,\n    p.HOME_PHONE as Contact_Info\nFROM PATIENT p\nWHERE p.PAT_ID = 'Z7004242' AND p.HOME_PHONE IS NOT NULL\nUNION ALL\nSELECT \n    'Work Phone' as Channel,\n    p.WORK_PHONE as Contact_Info\nFROM PATIENT p\nWHERE p.PAT_ID = 'Z7004242' AND p.WORK_PHONE IS NOT NULL\nORDER BY Channel;",
    "description": "View patient's communication preferences",
    "chapterId": "10-02-understanding-patient-identity-demographics",
    "index": 5
  },
  {
    "id": "10-02-understanding-patient-identity-demographics-6",
    "originalQuery": "SELECT \n    prl.NAME as Contact_Name,\n    pr.PAT_REL_RELATION_C_NAME as Relationship,\n    COUNT(DISTINCT prp.LINE) as Phone_Numbers,\n    CASE \n        WHEN prl.PAT_ID IS NOT NULL THEN 'Has Patient Record'\n        ELSE 'External Contact'\n    END as Contact_Type\nFROM PAT_RELATIONSHIPS pr\nJOIN PAT_RELATIONSHIP_LIST prl ON pr.PAT_REL_RLA_ID = prl.PAT_RELATIONSHIP_ID\nLEFT JOIN PAT_REL_PHONE_NUM prp ON prl.PAT_RELATIONSHIP_ID = prp.PAT_RELATIONSHIP_ID\nWHERE pr.PAT_ID = 'Z7004242'\nGROUP BY prl.PAT_RELATIONSHIP_ID, prl.NAME, pr.PAT_REL_RELATION_C_NAME, prl.PAT_ID;",
    "description": "Explore patient relationships and contacts",
    "chapterId": "10-02-understanding-patient-identity-demographics",
    "index": 6
  },
  {
    "id": "10-02-understanding-patient-identity-demographics-7",
    "originalQuery": "SELECT \n    p.ETHNIC_GROUP_C_NAME as Ethnicity,\n    pr.PATIENT_RACE_C_NAME as Race,\n    p.LANGUAGE_C_NAME as Preferred_Language,\n    p.RELIGION_C_NAME as Religion,\n    'Supports multiple race selections via LINE pattern' as Note\nFROM PATIENT p\nLEFT JOIN PATIENT_RACE pr ON p.PAT_ID = pr.PAT_ID\nWHERE p.PAT_ID = 'Z7004242';",
    "description": "Understand race and ethnicity data structure",
    "chapterId": "10-02-understanding-patient-identity-demographics",
    "index": 7
  },
  {
    "id": "10-02-understanding-patient-identity-demographics-8",
    "originalQuery": "SELECT \n    p.PAT_ID,\n    p.PAT_NAME,\n    CASE \n        WHEN mp.MYPT_ID IS NOT NULL THEN 'Enrolled'\n        ELSE 'Not Enrolled'\n    END as Portal_Status,\n    mp.MYPT_ID as Portal_Account_ID,\n    COUNT(DISTINCT pe.EMAIL_ADDRESS) as Email_Addresses_Available\nFROM PATIENT p\nLEFT JOIN MYC_PATIENT mp ON p.PAT_ID = mp.PAT_ID\nLEFT JOIN PAT_EMAILADDRESS pe ON p.PAT_ID = pe.PAT_ID\nWHERE p.PAT_ID = 'Z7004242'\nGROUP BY p.PAT_ID, p.PAT_NAME, mp.MYPT_ID;",
    "description": "Check patient portal enrollment",
    "chapterId": "10-02-understanding-patient-identity-demographics",
    "index": 8
  },
  {
    "id": "10-02-understanding-patient-identity-demographics-9",
    "originalQuery": "SELECT \n    'Legal Name' as Name_Type,\n    p.PAT_NAME as Name_Value,\n    'PATIENT table' as Source\nFROM PATIENT p\nWHERE p.PAT_ID = 'Z7004242'\nUNION ALL\nSELECT \n    'Alias ' || LINE as Name_Type,\n    ALIAS as Name_Value,\n    'PATIENT_ALIAS table' as Source\nFROM PATIENT_ALIAS\nWHERE PAT_ID = 'Z7004242'\nORDER BY Name_Type;",
    "description": "Track patient name variations",
    "chapterId": "10-02-understanding-patient-identity-demographics",
    "index": 9
  },
  {
    "id": "10-02-understanding-patient-identity-demographics-10",
    "originalQuery": "SELECT \n    'Demographics' as Category,\n    COUNT(*) as Data_Points\nFROM (\n    SELECT PAT_ID FROM PATIENT WHERE PAT_ID = 'Z7004242'\n    UNION ALL\n    SELECT PAT_ID FROM PATIENT_2 WHERE PAT_ID = 'Z7004242'\n    UNION ALL\n    SELECT PAT_ID FROM PATIENT_3 WHERE PAT_ID = 'Z7004242'\n    UNION ALL\n    SELECT PAT_ID FROM PATIENT_4 WHERE PAT_ID = 'Z7004242'\n) demographics\nUNION ALL\nSELECT \n    'Identifiers' as Category,\n    COUNT(*) as Data_Points\nFROM IDENTITY_ID WHERE PAT_ID = 'Z7004242'\nUNION ALL\nSELECT \n    'Email Addresses' as Category,\n    COUNT(*) as Data_Points\nFROM PAT_EMAILADDRESS WHERE PAT_ID = 'Z7004242'\nUNION ALL\nSELECT \n    'Relationships' as Category,\n    COUNT(*) as Data_Points\nFROM PAT_RELATIONSHIPS WHERE PAT_ID = 'Z7004242'\nUNION ALL\nSELECT \n    'Address History' as Category,\n    COUNT(*) as Data_Points\nFROM PAT_ADDR_CHNG_HX WHERE PAT_ID = 'Z7004242'\nORDER BY Data_Points DESC;",
    "description": "Build a comprehensive patient profile",
    "chapterId": "10-02-understanding-patient-identity-demographics",
    "index": 10
  },
  {
    "id": "10-03-exploring-medication-orders-0",
    "originalQuery": "SELECT \n    ORDER_MED_ID,\n    DESCRIPTION,\n    ORDER_STATUS_C_NAME,\n    ORDERING_DATE\nFROM ORDER_MED\nWHERE PAT_ID = 'Z7004242'\nORDER BY ORDERING_DATE DESC;",
    "description": "View all medication orders for a patient",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 0
  },
  {
    "id": "10-03-exploring-medication-orders-1",
    "originalQuery": "SELECT \n    ORDER_MED_ID,\n    DESCRIPTION,\n    MEDICATION_ID,\n    DOSAGE,\n    QUANTITY,\n    REFILLS,\n    START_DATE,\n    MED_PRESC_PROV_ID,\n    PHARMACY_ID,\n    ORDER_STATUS_C_NAME\nFROM ORDER_MED\nWHERE ORDER_MED_ID = 772179261.0;",
    "description": "Explore key ORDER_MED fields for a single prescription",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 1
  },
  {
    "id": "10-03-exploring-medication-orders-2",
    "originalQuery": "SELECT \n    om.DESCRIPTION,\n    oms.SIG_TEXT\nFROM ORDER_MED om\nJOIN ORDER_MED_SIG oms ON om.ORDER_MED_ID = oms.ORDER_ID\nWHERE om.PAT_ID = 'Z7004242'\nORDER BY om.ORDERING_DATE DESC;",
    "description": "Get prescription instructions (sig) for medications",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 2
  },
  {
    "id": "10-03-exploring-medication-orders-3",
    "originalQuery": "SELECT \n    om.ORDER_MED_ID,\n    om.DESCRIPTION as ORDER_DESCRIPTION,\n    cm.GENERIC_NAME,\n    om.DOSAGE,\n    om.QUANTITY\nFROM ORDER_MED om\nLEFT JOIN CLARITY_MEDICATION cm ON om.MEDICATION_ID = cm.MEDICATION_ID\nWHERE om.PAT_ID = 'Z7004242';",
    "description": "Join orders with the medication master to see generic names",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 3
  },
  {
    "id": "10-03-exploring-medication-orders-4",
    "originalQuery": "SELECT \n    om.DESCRIPTION,\n    om.PHARMACY_ID_PHARMACY_NAME,\n    rxp.PHARMACY_NAME as VERIFIED_PHARMACY_NAME\nFROM ORDER_MED om\nLEFT JOIN RX_PHR rxp ON om.PHARMACY_ID = rxp.PHARMACY_ID\nWHERE om.PAT_ID = 'Z7004242'\nORDER BY om.ORDERING_DATE;",
    "description": "See which pharmacies received each prescription",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 4
  },
  {
    "id": "10-03-exploring-medication-orders-5",
    "originalQuery": "SELECT \n    pp.LINE,\n    pp.PREF_PHARMACY_ID_PHARMACY_NAME,\n    rxp.PHARMACY_NAME\nFROM PAT_PREF_PHARMACY pp\nLEFT JOIN RX_PHR rxp ON pp.PREF_PHARMACY_ID = rxp.PHARMACY_ID\nWHERE pp.PAT_ID = 'Z7004242';",
    "description": "Check patient's preferred pharmacy settings",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 5
  },
  {
    "id": "10-03-exploring-medication-orders-6",
    "originalQuery": "SELECT \n    pmh.LINE as HISTORY_ORDER,\n    om.DESCRIPTION,\n    om.ORDERING_DATE,\n    om.ORDER_STATUS_C_NAME,\n    CASE \n        WHEN om.DISCON_TIME IS NOT NULL THEN 'Discontinued'\n        WHEN om.ORDER_STATUS_C_NAME = 'Sent' THEN 'Active'\n        ELSE om.ORDER_STATUS_C_NAME\n    END as CURRENT_STATUS\nFROM PAT_MEDS_HX pmh\nJOIN ORDER_MED om ON pmh.MEDS_HX_ID = om.ORDER_MED_ID\nWHERE pmh.PAT_ID = 'Z7004242'\nORDER BY pmh.LINE;",
    "description": "View complete medication history with timeline",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 6
  },
  {
    "id": "10-03-exploring-medication-orders-7",
    "originalQuery": "SELECT \n    om.DESCRIPTION,\n    om2.RX_NUM_FORMATTED,\n    om2.RX_WRITTEN_DATE,\n    om2.TXT_AUTHPROV_NAME,\n    om2.TXT_AUTHPROV_DEA\nFROM ORDER_MED om\nLEFT JOIN ORDER_MED_2 om2 ON om.ORDER_MED_ID = om2.ORDER_ID\nWHERE om.PAT_ID = 'Z7004242'\n  AND om2.TXT_AUTHPROV_NAME IS NOT NULL;",
    "description": "Access extended prescription information from ORDER_MED_2",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 7
  },
  {
    "id": "10-03-exploring-medication-orders-8",
    "originalQuery": "SELECT \n    om.DESCRIPTION,\n    omai.LINE,\n    omai.MED_ADMIN_INSTR\nFROM ORDER_MED om\nJOIN ORD_MED_ADMININSTR omai ON om.ORDER_MED_ID = omai.ORDER_MED_ID\nWHERE om.PAT_ID = 'Z7004242'\n  AND omai.MED_ADMIN_INSTR IS NOT NULL\nORDER BY om.ORDER_MED_ID, omai.LINE;",
    "description": "Find detailed administration instructions",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 8
  },
  {
    "id": "10-03-exploring-medication-orders-9",
    "originalQuery": "SELECT \n    om.DESCRIPTION,\n    mci.CNCT_TYPE_C_NAME as Connection_Type,\n    mci.EPRESCRIBING_NET_ID_EXTERNAL_NAME as Network,\n    mci.CVG_PAYER_IDNT as Payer_ID\nFROM ORDER_MED om\nJOIN MED_CVG_INFO mci ON om.PAT_ID = mci.PAT_ID\nWHERE mci.PAT_ID = 'Z7004242'\nLIMIT 10;",
    "description": "Check medication coverage details",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 9
  },
  {
    "id": "10-03-exploring-medication-orders-10",
    "originalQuery": "SELECT \n    om.ORDER_MED_ID,\n    om.DESCRIPTION as MEDICATION,\n    cm.GENERIC_NAME,\n    om.ORDER_STATUS_C_NAME as STATUS,\n    om.ORDERING_DATE,\n    oms.SIG_TEXT as INSTRUCTIONS,\n    om.QUANTITY || ' ' || om.REFILLS as QTY_REFILLS,\n    om.PHARMACY_ID_PHARMACY_NAME as PHARMACY,\n    CASE \n        WHEN mci.ORDER_ID IS NOT NULL THEN 'Coverage Checked'\n        ELSE 'No Coverage Info'\n    END as COVERAGE_STATUS\nFROM ORDER_MED om\nLEFT JOIN CLARITY_MEDICATION cm ON om.MEDICATION_ID = cm.MEDICATION_ID\nLEFT JOIN ORDER_MED_SIG oms ON om.ORDER_MED_ID = oms.ORDER_ID\nLEFT JOIN MED_CVG_INFO mci ON om.PAT_ID = mci.PAT_ID AND om.ORDER_MED_ID = mci.ORDER_ID\nWHERE om.PAT_ID = 'Z7004242'\nORDER BY om.ORDERING_DATE DESC;",
    "description": "Build a complete medication profile",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 10
  },
  {
    "id": "10-03-exploring-medication-orders-11",
    "originalQuery": "SELECT \n    om.ORDER_MED_ID,\n    om.DESCRIPTION,\n    COALESCE(oms.SIG_TEXT, 'No sig recorded') as INSTRUCTIONS,\n    COALESCE(rxp.PHARMACY_NAME, om.PHARMACY_ID_PHARMACY_NAME, 'No pharmacy') as PHARMACY\nFROM ORDER_MED om\nLEFT JOIN ORDER_MED_SIG oms ON om.ORDER_MED_ID = oms.ORDER_ID\nLEFT JOIN RX_PHR rxp ON om.PHARMACY_ID = rxp.PHARMACY_ID\nWHERE om.PAT_ID = 'Z7004242';",
    "description": "Safely join multiple medication tables",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 11
  },
  {
    "id": "10-03-exploring-medication-orders-12",
    "originalQuery": "SELECT \n    ORDER_MED_ID,\n    DESCRIPTION,\n    PHARMACY_ID_PHARMACY_NAME,\n    ORD_CREATR_USER_ID_NAME\nFROM ORDER_MED\nWHERE PAT_ID = 'Z7004242'\n  AND ORDER_STATUS_C_NAME = 'Sent';",
    "description": "Use denormalized fields for simple queries",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 12
  },
  {
    "id": "10-03-exploring-medication-orders-13",
    "originalQuery": "SELECT \n    ORDER_STATUS_C_NAME,\n    COUNT(*) as COUNT\nFROM ORDER_MED\nWHERE PAT_ID = 'Z7004242'\nGROUP BY ORDER_STATUS_C_NAME;",
    "description": "Analyze medication status distribution",
    "chapterId": "10-03-exploring-medication-orders",
    "index": 13
  },
  {
    "id": "10-04-connecting-patients-through-portals-and-messaging-0",
    "originalQuery": "SELECT \n    p.PAT_ID,\n    p.PAT_NAME,\n    pm.MYCHART_STATUS_C_NAME as Portal_Status,\n    pm.PAT_ACCESS_STAT_C_NAME as Access_Code_Status,\n    pm.DEM_VERIF_DT as Demographics_Verified,\n    mp.MYPT_ID as MyChart_Account_ID\nFROM PATIENT p\nLEFT JOIN PATIENT_MYC pm ON p.PAT_ID = pm.PAT_ID\nLEFT JOIN MYC_PATIENT mp ON p.PAT_ID = mp.PAT_ID\nWHERE p.PAT_ID = 'Z7004242';",
    "description": "Check a patient's portal account status and activation details",
    "chapterId": "10-04-connecting-patients-through-portals-and-messaging",
    "index": 0
  },
  {
    "id": "10-04-connecting-patients-through-portals-and-messaging-1",
    "originalQuery": "SELECT \n    m.MESSAGE_ID,\n    m.CREATED_TIME,\n    m.SUBJECT,\n    m.TOFROM_PAT_C_NAME as Direction,\n    CASE \n        WHEN m.FROM_USER_ID_NAME IS NOT NULL THEN m.FROM_USER_ID_NAME\n        WHEN m.TO_USER_ID_NAME IS NOT NULL THEN m.TO_USER_ID_NAME\n        ELSE 'System'\n    END as Other_Party,\n    CASE \n        WHEN m.PARENT_MESSAGE_ID IS NOT NULL THEN 'Reply'\n        ELSE 'New Thread'\n    END as Message_Type\nFROM MYC_MESG m\nWHERE m.PAT_ID = 'Z7004242'\nORDER BY m.CREATED_TIME DESC\nLIMIT 10;",
    "description": "View recent messages for a patient showing direction and threading",
    "chapterId": "10-04-connecting-patients-through-portals-and-messaging",
    "index": 1
  },
  {
    "id": "10-04-connecting-patients-through-portals-and-messaging-2",
    "originalQuery": "SELECT \n    m.SUBJECT,\n    m.TOFROM_PAT_C_NAME as Direction,\n    GROUP_CONCAT(mt.MSG_TXT, CHAR(10)) as Full_Message\nFROM MYC_MESG m\nJOIN MSG_TXT mt ON m.MESSAGE_ID = mt.MESSAGE_ID\nWHERE m.MESSAGE_ID = '27921908'\nGROUP BY m.MESSAGE_ID, m.SUBJECT, m.TOFROM_PAT_C_NAME;",
    "description": "Read the complete text of a patient's message about wrist pain",
    "chapterId": "10-04-connecting-patients-through-portals-and-messaging",
    "index": 2
  },
  {
    "id": "10-04-connecting-patients-through-portals-and-messaging-3",
    "originalQuery": "SELECT \n    c.MYC_MSG_TYP_C_NAME as Conversation_Type,\n    COUNT(DISTINCT c.THREAD_ID) as Thread_Count,\n    COUNT(DISTINCT cm.MESSAGE_ID) as Total_Messages\nFROM MYC_CONVO c\nLEFT JOIN MYC_CONVO_MSGS cm ON c.THREAD_ID = cm.THREAD_ID\nWHERE c.PAT_ID = 'Z7004242'\nGROUP BY c.MYC_MSG_TYP_C_NAME\nORDER BY Thread_Count DESC;",
    "description": "Analyze the types of conversations a patient has initiated",
    "chapterId": "10-04-connecting-patients-through-portals-and-messaging",
    "index": 3
  },
  {
    "id": "10-04-connecting-patients-through-portals-and-messaging-4",
    "originalQuery": "WITH MessageStats AS (\n    SELECT \n        m.PAT_ID,\n        COUNT(*) as Total_Messages,\n        SUM(CASE WHEN m.TOFROM_PAT_C_NAME = 'To Patient' THEN 1 ELSE 0 END) as To_Patient,\n        SUM(CASE WHEN m.TOFROM_PAT_C_NAME = 'From Patient' THEN 1 ELSE 0 END) as From_Patient,\n        MIN(m.CREATED_TIME) as First_Message,\n        MAX(m.CREATED_TIME) as Last_Message\n    FROM MYC_MESG m\n    WHERE m.PAT_ID = 'Z7004242'\n    GROUP BY m.PAT_ID\n)\nSELECT \n    *,\n    ROUND(CAST(From_Patient AS FLOAT) / Total_Messages * 100, 1) as Patient_Initiated_Pct\nFROM MessageStats;",
    "description": "Analyze bidirectional message flow for a patient",
    "chapterId": "10-04-connecting-patients-through-portals-and-messaging",
    "index": 4
  },
  {
    "id": "10-04-connecting-patients-through-portals-and-messaging-5",
    "originalQuery": "SELECT DISTINCT\n    COMMUNICATION_CONCEPT_ID_SETTING_NAME as Preference_Type,\n    COMMUNICATION_CONCEPT_ID as Concept_ID\nFROM COMMUNICATION_PREFERENCES\nWHERE COMMUNICATION_CONCEPT_ID_SETTING_NAME LIKE '%Reminder%'\n   OR COMMUNICATION_CONCEPT_ID_SETTING_NAME LIKE '%Message%'\nORDER BY Preference_Type\nLIMIT 10;",
    "description": "Explore available communication preference types",
    "chapterId": "10-04-connecting-patients-through-portals-and-messaging",
    "index": 5
  },
  {
    "id": "10-04-connecting-patients-through-portals-and-messaging-6",
    "originalQuery": "WITH PortalMetrics AS (\n    SELECT \n        p.PAT_ID,\n        p.PAT_NAME,\n        pm.MYCHART_STATUS_C_NAME as Portal_Status,\n        \n        -- Messaging metrics\n        (SELECT COUNT(*) FROM MYC_MESG m WHERE m.PAT_ID = p.PAT_ID) as Total_Messages,\n        (SELECT COUNT(DISTINCT THREAD_ID) FROM MYC_CONVO c WHERE c.PAT_ID = p.PAT_ID) as Total_Conversations,\n        \n        -- Recent activity\n        (SELECT MAX(CREATED_TIME) FROM MYC_MESG m WHERE m.PAT_ID = p.PAT_ID) as Last_Message_Date\n        \n    FROM PATIENT p\n    LEFT JOIN PATIENT_MYC pm ON p.PAT_ID = pm.PAT_ID\n    WHERE p.PAT_ID = 'Z7004242'\n)\nSELECT \n    PAT_NAME,\n    Portal_Status,\n    Total_Messages || ' messages in ' || Total_Conversations || ' conversations' as Messaging_Activity,\n    Last_Message_Date as Last_Portal_Activity\nFROM PortalMetrics;",
    "description": "Create a complete patient portal engagement summary",
    "chapterId": "10-04-connecting-patients-through-portals-and-messaging",
    "index": 6
  },
  {
    "id": "10-04-understanding-lab-results-0",
    "originalQuery": "SELECT \n    ORDER_TYPE_C_NAME,\n    COUNT(*) as ORDER_COUNT\nFROM ORDER_PROC\nWHERE PAT_ID = 'Z7004242'\nGROUP BY ORDER_TYPE_C_NAME\nORDER BY ORDER_COUNT DESC;",
    "description": "Count and categorize all diagnostic orders",
    "chapterId": "10-04-understanding-lab-results",
    "index": 0
  },
  {
    "id": "10-04-understanding-lab-results-1",
    "originalQuery": "SELECT \n    ORDER_PROC_ID,\n    DESCRIPTION,\n    ORDERING_DATE,\n    RESULT_TIME,\n    JULIANDAY(RESULT_TIME) - JULIANDAY(ORDERING_DATE) as TURNAROUND_DAYS\nFROM ORDER_PROC\nWHERE PAT_ID = 'Z7004242'\n  AND ORDER_TYPE_C_NAME = 'Lab'\n  AND ORDER_STATUS_C_NAME = 'Completed'\nORDER BY ORDERING_DATE DESC\nLIMIT 5;",
    "description": "View recent completed lab orders",
    "chapterId": "10-04-understanding-lab-results",
    "index": 1
  },
  {
    "id": "10-04-understanding-lab-results-2",
    "originalQuery": "SELECT \n    cc.NAME as COMPONENT,\n    ore.ORD_VALUE as RESULT,\n    ore.REFERENCE_LOW || '-' || ore.REFERENCE_HIGH || ' ' || ore.REFERENCE_UNIT as NORMAL_RANGE\nFROM ORDER_RESULTS ore\nJOIN CLARITY_COMPONENT cc ON ore.COMPONENT_ID = cc.COMPONENT_ID\nWHERE ore.ORDER_PROC_ID = 772179262.0\nORDER BY ore.LINE;",
    "description": "Examine components of a basic metabolic panel",
    "chapterId": "10-04-understanding-lab-results",
    "index": 2
  },
  {
    "id": "10-04-understanding-lab-results-3",
    "originalQuery": "SELECT \n    cc.NAME as TEST,\n    ore.ORD_VALUE || ' ' || ore.REFERENCE_UNIT as RESULT,\n    ore.REFERENCE_LOW || '-' || ore.REFERENCE_HIGH as NORMAL_RANGE,\n    ore.RESULT_FLAG_C_NAME as FLAG\nFROM ORDER_RESULTS ore\nJOIN CLARITY_COMPONENT cc ON ore.COMPONENT_ID = cc.COMPONENT_ID\nWHERE ore.ORDER_PROC_ID = 772179262.0\n  AND ore.RESULT_FLAG_C_NAME IS NOT NULL\nORDER BY ore.LINE;",
    "description": "Find abnormal results with clinical context",
    "chapterId": "10-04-understanding-lab-results",
    "index": 3
  },
  {
    "id": "10-04-understanding-lab-results-4",
    "originalQuery": "SELECT \n    cc.NAME as COMPONENT,\n    ore.ORD_VALUE || ' ' || ore.REFERENCE_UNIT as RESULT,\n    lnc.LNC_CODE,\n    lnc.LNC_LONG_NAME\nFROM ORDER_RESULTS ore\nJOIN CLARITY_COMPONENT cc ON ore.COMPONENT_ID = cc.COMPONENT_ID\nLEFT JOIN LNC_DB_MAIN lnc ON ore.COMPON_LNC_ID = lnc.RECORD_ID\nWHERE ore.ORDER_PROC_ID = 945468371.0\n  AND ore.COMPON_LNC_ID IS NOT NULL\nORDER BY ore.LINE;",
    "description": "View LOINC codes for lipid panel components",
    "chapterId": "10-04-understanding-lab-results",
    "index": 4
  },
  {
    "id": "10-04-understanding-lab-results-5",
    "originalQuery": "SELECT \n    op.ORDERING_DATE,\n    ore.ORD_VALUE as A1C_PERCENT,\n    ore.REFERENCE_HIGH as GOAL,\n    CASE \n        WHEN ore.ORD_NUM_VALUE < 5.7 THEN 'Normal'\n        WHEN ore.ORD_NUM_VALUE < 6.5 THEN 'Prediabetes'\n        ELSE 'Diabetes'\n    END as INTERPRETATION\nFROM ORDER_PROC op\nJOIN ORDER_RESULTS ore ON op.ORDER_PROC_ID = ore.ORDER_PROC_ID\nJOIN CLARITY_COMPONENT cc ON ore.COMPONENT_ID = cc.COMPONENT_ID\nWHERE op.PAT_ID = 'Z7004242'\n  AND cc.NAME = 'HEMOGLOBIN A1C'\n  AND op.ORDER_STATUS_C_NAME = 'Completed'\nORDER BY op.ORDERING_DATE;",
    "description": "Track Hemoglobin A1C values over time",
    "chapterId": "10-04-understanding-lab-results",
    "index": 5
  },
  {
    "id": "10-04-understanding-lab-results-6",
    "originalQuery": "SELECT \n    cc.NAME as LIPID_COMPONENT,\n    ore.ORD_VALUE as VALUE,\n    ore.REFERENCE_UNIT as UNIT,\n    CASE \n        WHEN cc.NAME = 'CHOLESTEROL' AND ore.ORD_NUM_VALUE > 200 THEN 'Elevated - Consider treatment'\n        WHEN cc.NAME = 'LDL, CALCULATED' AND ore.ORD_NUM_VALUE > 130 THEN 'Above optimal'\n        WHEN cc.NAME = 'HDL' AND ore.ORD_NUM_VALUE < 40 THEN 'Low - Cardiovascular risk'\n        WHEN cc.NAME = 'TRIGLYCERIDES' AND ore.ORD_NUM_VALUE > 150 THEN 'Elevated'\n        ELSE 'Within normal limits'\n    END as CLINICAL_SIGNIFICANCE\nFROM ORDER_RESULTS ore\nJOIN CLARITY_COMPONENT cc ON ore.COMPONENT_ID = cc.COMPONENT_ID\nWHERE ore.ORDER_PROC_ID = 945468371.0\nORDER BY \n    CASE cc.NAME\n        WHEN 'CHOLESTEROL' THEN 1\n        WHEN 'TRIGLYCERIDES' THEN 2\n        WHEN 'HDL' THEN 3\n        WHEN 'LDL, CALCULATED' THEN 4\n        ELSE 5\n    END;",
    "description": "Analyze complete lipid profile with risk calculations",
    "chapterId": "10-04-understanding-lab-results",
    "index": 6
  },
  {
    "id": "10-04-understanding-lab-results-7",
    "originalQuery": "SELECT \n    NAME,\n    COUNT(*) as TIMES_ORDERED\nFROM CLARITY_COMPONENT cc\nWHERE EXISTS (\n    SELECT 1 FROM ORDER_RESULTS ore \n    WHERE ore.COMPONENT_ID = cc.COMPONENT_ID\n)\nGROUP BY NAME\nORDER BY TIMES_ORDERED DESC\nLIMIT 15;",
    "description": "Find common test components in the system",
    "chapterId": "10-04-understanding-lab-results",
    "index": 7
  },
  {
    "id": "10-04-understanding-lab-results-8",
    "originalQuery": "SELECT \n    SUBSTR(op.ORDERING_DATE, 1, 10) as ORDER_DATE,\n    op.DESCRIPTION as TEST,\n    cc.NAME as COMPONENT,\n    ore.ORD_VALUE || ' ' || ore.REFERENCE_UNIT as RESULT,\n    ore.RESULT_FLAG_C_NAME as FLAG,\n    CASE ore.RESULT_FLAG_C_NAME\n        WHEN 'High' THEN 'Above normal range'\n        WHEN 'Low' THEN 'Below normal range'\n        WHEN 'Abnormal' THEN 'Outside reference range'\n        ELSE 'Clinical review needed'\n    END as INTERPRETATION\nFROM ORDER_PROC op\nJOIN ORDER_RESULTS ore ON op.ORDER_PROC_ID = ore.ORDER_PROC_ID\nJOIN CLARITY_COMPONENT cc ON ore.COMPONENT_ID = cc.COMPONENT_ID\nWHERE op.PAT_ID = 'Z7004242'\n  AND ore.RESULT_FLAG_C_NAME IS NOT NULL\n  AND ore.RESULT_FLAG_C_NAME NOT IN ('Normal', 'No Range')\nORDER BY op.ORDERING_DATE DESC\nLIMIT 10;",
    "description": "Identify abnormal lab results requiring attention",
    "chapterId": "10-04-understanding-lab-results",
    "index": 8
  },
  {
    "id": "10-04-understanding-lab-results-9",
    "originalQuery": "SELECT \n    op.ORDER_PROC_ID,\n    op.DESCRIPTION,\n    ore.RESULT_STATUS_C_NAME,\n    COUNT(DISTINCT ore.COMPONENT_ID) as COMPONENT_COUNT,\n    COUNT(DISTINCT fp.FINALIZE_PROV_ID) as FINALIZING_PROVIDERS\nFROM ORDER_PROC op\nJOIN ORDER_RESULTS ore ON op.ORDER_PROC_ID = ore.ORDER_PROC_ID\nLEFT JOIN FINALIZE_PHYSICIAN fp ON op.ORDER_PROC_ID = fp.ORDER_ID\nWHERE op.PAT_ID = 'Z7004242'\n  AND op.ORDER_TYPE_C_NAME = 'Lab'\nGROUP BY op.ORDER_PROC_ID, op.DESCRIPTION, ore.RESULT_STATUS_C_NAME\nORDER BY op.ORDERING_DATE DESC\nLIMIT 5;",
    "description": "Check result finalization status",
    "chapterId": "10-04-understanding-lab-results",
    "index": 9
  },
  {
    "id": "10-04-understanding-lab-results-10",
    "originalQuery": "WITH recent_labs AS (\n    SELECT \n        op.ORDER_PROC_ID,\n        op.DESCRIPTION as TEST_NAME,\n        op.ORDERING_DATE,\n        cc.NAME as COMPONENT,\n        ore.ORD_VALUE || ' ' || ore.REFERENCE_UNIT as RESULT,\n        CASE \n            WHEN ore.RESULT_FLAG_C_NAME IS NULL THEN 'Normal'\n            ELSE ore.RESULT_FLAG_C_NAME\n        END as FLAG,\n        lnc.LNC_CODE\n    FROM ORDER_PROC op\n    JOIN ORDER_RESULTS ore ON op.ORDER_PROC_ID = ore.ORDER_PROC_ID\n    JOIN CLARITY_COMPONENT cc ON ore.COMPONENT_ID = cc.COMPONENT_ID\n    LEFT JOIN LNC_DB_MAIN lnc ON ore.COMPON_LNC_ID = lnc.RECORD_ID\n    WHERE op.PAT_ID = 'Z7004242'\n      AND op.ORDER_TYPE_C_NAME = 'Lab'\n      AND op.ORDER_STATUS_C_NAME = 'Completed'\n      AND op.ORDERING_DATE >= date('now', '-1 year')\n)\nSELECT \n    TEST_NAME,\n    ORDERING_DATE,\n    COUNT(DISTINCT COMPONENT) as COMPONENTS,\n    SUM(CASE WHEN FLAG != 'Normal' THEN 1 ELSE 0 END) as ABNORMAL_COUNT\nFROM recent_labs\nGROUP BY TEST_NAME, ORDERING_DATE\nORDER BY ORDERING_DATE DESC;",
    "description": "Create a complete lab summary for clinical review",
    "chapterId": "10-04-understanding-lab-results",
    "index": 10
  },
  {
    "id": "10-04-understanding-lab-results-11",
    "originalQuery": "SELECT \n    op.ORDERING_DATE,\n    pe.FIN_CLASS_C_NAME as ENCOUNTER_TYPE,\n    op.DESCRIPTION,\n    COUNT(ore.COMPONENT_ID) as RESULT_COUNT\nFROM ORDER_PROC op\nJOIN PAT_ENC pe ON op.PAT_ENC_CSN_ID = pe.PAT_ENC_CSN_ID\nJOIN ORDER_RESULTS ore ON op.ORDER_PROC_ID = ore.ORDER_PROC_ID\nWHERE op.PAT_ID = 'Z7004242'\n  AND op.ORDER_TYPE_C_NAME = 'Lab'\nGROUP BY op.ORDER_PROC_ID, op.ORDERING_DATE, pe.FIN_CLASS_C_NAME, op.DESCRIPTION\nORDER BY op.ORDERING_DATE DESC\nLIMIT 10;",
    "description": "Get lab results with encounter context",
    "chapterId": "10-04-understanding-lab-results",
    "index": 11
  },
  {
    "id": "10-04-understanding-lab-results-12",
    "originalQuery": "SELECT DISTINCT\n    lnc.LNC_CODE,\n    lnc.LNC_LONG_NAME,\n    cc.NAME as COMPONENT_NAME\nFROM LNC_DB_MAIN lnc\nJOIN ORDER_RESULTS ore ON lnc.RECORD_ID = ore.COMPON_LNC_ID\nJOIN CLARITY_COMPONENT cc ON ore.COMPONENT_ID = cc.COMPONENT_ID\nWHERE lnc.LNC_LONG_NAME LIKE '%Glucose%'\nLIMIT 10;",
    "description": "Find all glucose-related tests using LOINC",
    "chapterId": "10-04-understanding-lab-results",
    "index": 12
  },
  {
    "id": "10-04-understanding-lab-results-13",
    "originalQuery": "SELECT \n    SUBSTR(op.DESCRIPTION, 1, 20) as TEST_TYPE,\n    COUNT(DISTINCT op.ORDER_PROC_ID) as ORDER_COUNT,\n    AVG(component_count) as AVG_COMPONENTS_PER_ORDER,\n    AVG(JULIANDAY(op.RESULT_TIME) - JULIANDAY(op.ORDERING_DATE)) as AVG_TAT_DAYS\nFROM ORDER_PROC op\nJOIN (\n    SELECT ORDER_PROC_ID, COUNT(*) as component_count\n    FROM ORDER_RESULTS\n    GROUP BY ORDER_PROC_ID\n) ore_counts ON op.ORDER_PROC_ID = ore_counts.ORDER_PROC_ID\nWHERE op.ORDER_TYPE_C_NAME = 'Lab'\n  AND op.ORDER_STATUS_C_NAME = 'Completed'\nGROUP BY SUBSTR(op.DESCRIPTION, 1, 20)\nORDER BY ORDER_COUNT DESC\nLIMIT 10;",
    "description": "Analyze result patterns by test type",
    "chapterId": "10-04-understanding-lab-results",
    "index": 13
  },
  {
    "id": "10-05-navigating-patient-encounters-across-care-settings-0",
    "originalQuery": "SELECT \n    PAT_ENC_CSN_ID,\n    CONTACT_DATE,\n    APPT_STATUS_C_NAME as Status,\n    DEPARTMENT_ID,\n    VISIT_PROV_ID as Provider_ID,\n    ENC_CLOSED_YN as Closed\nFROM PAT_ENC\nWHERE PAT_ID = 'Z7004242'\nORDER BY CONTACT_DATE DESC\nLIMIT 10;",
    "description": "View recent encounters showing the universal CSN_ID",
    "chapterId": "10-05-navigating-patient-encounters-across-care-settings",
    "index": 0
  },
  {
    "id": "10-05-navigating-patient-encounters-across-care-settings-1",
    "originalQuery": "SELECT \n    pe.PAT_ENC_CSN_ID,\n    pe.CONTACT_DATE,\n    d.DEPARTMENT_NAME,\n    CASE \n        WHEN hsp.PAT_ENC_CSN_ID IS NOT NULL THEN 'Hospital'\n        WHEN eds.PAT_ENC_CSN_ID IS NOT NULL THEN 'Emergency'\n        WHEN pe.APPT_STATUS_C_NAME IS NOT NULL THEN 'Ambulatory'\n        ELSE 'Other'\n    END as Encounter_Type,\n    pe.APPT_STATUS_C_NAME\nFROM PAT_ENC pe\nLEFT JOIN CLARITY_DEP d ON pe.DEPARTMENT_ID = d.DEPARTMENT_ID\nLEFT JOIN PAT_ENC_HSP hsp ON pe.PAT_ENC_CSN_ID = hsp.PAT_ENC_CSN_ID\nLEFT JOIN (SELECT DISTINCT PAT_ENC_CSN_ID FROM ED_PAT_STATUS) eds \n    ON pe.PAT_ENC_CSN_ID = eds.PAT_ENC_CSN_ID\nWHERE pe.PAT_ID = 'Z7004242'\n  AND pe.CONTACT_DATE >= '2023-01-01'\nORDER BY pe.CONTACT_DATE DESC;",
    "description": "Analyze encounter types by looking for key indicators",
    "chapterId": "10-05-navigating-patient-encounters-across-care-settings",
    "index": 1
  },
  {
    "id": "10-05-navigating-patient-encounters-across-care-settings-2",
    "originalQuery": "SELECT \n    LINE as Step,\n    ED_PAT_STATUS_C_NAME as Status,\n    PAT_STATUS_TIME as Time,\n    PAT_STATUS_USER_ID_NAME as Staff_Member,\n    ROUND((JULIANDAY(PAT_STATUS_TIME) - \n           JULIANDAY(LAG(PAT_STATUS_TIME) OVER (ORDER BY LINE))) * 24 * 60, 1) \n        as Minutes_Since_Last_Status\nFROM ED_PAT_STATUS\nWHERE PAT_ENC_CSN_ID = 799951565.0\nORDER BY LINE;",
    "description": "Track the progression of an ED visit through status changes",
    "chapterId": "10-05-navigating-patient-encounters-across-care-settings",
    "index": 2
  },
  {
    "id": "10-05-navigating-patient-encounters-across-care-settings-3",
    "originalQuery": "SELECT \n    pe.PAT_ENC_CSN_ID,\n    pe.CONTACT_DATE,\n    hsp.ADT_PAT_CLASS_C_NAME as Patient_Class,\n    hsp.HOSP_ADMSN_TIME as Admission,\n    hsp.HOSP_DISCH_TIME as Discharge,\n    ROUND((JULIANDAY(hsp.HOSP_DISCH_TIME) - \n           JULIANDAY(hsp.HOSP_ADMSN_TIME)) * 24, 1) as Length_of_Stay_Hours,\n    hsp.ADMIT_SOURCE_C_NAME as Admitted_From,\n    hsp.DISCH_DISP_C_NAME as Discharged_To\nFROM PAT_ENC pe\nJOIN PAT_ENC_HSP hsp ON pe.PAT_ENC_CSN_ID = hsp.PAT_ENC_CSN_ID\nWHERE pe.PAT_ID = 'Z7004242'\nORDER BY pe.CONTACT_DATE DESC;",
    "description": "Examine hospital admission details including therapy sessions",
    "chapterId": "10-05-navigating-patient-encounters-across-care-settings",
    "index": 3
  },
  {
    "id": "10-05-navigating-patient-encounters-across-care-settings-4",
    "originalQuery": "SELECT \n    EVENT_ID,\n    EVENT_TYPE_C_NAME as Event_Type,\n    EFFECTIVE_TIME,\n    d.DEPARTMENT_NAME,\n    PAT_CLASS_C_NAME as Patient_Class,\n    FROM_BASE_CLASS_C_NAME as From_Status,\n    TO_BASE_CLASS_C_NAME as To_Status\nFROM CLARITY_ADT adt\nLEFT JOIN CLARITY_DEP d ON adt.DEPARTMENT_ID = d.DEPARTMENT_ID\nWHERE adt.PAT_ID = 'Z7004242'\nORDER BY EFFECTIVE_TIME DESC\nLIMIT 10;",
    "description": "View ADT events showing patient movement through the hospital",
    "chapterId": "10-05-navigating-patient-encounters-across-care-settings",
    "index": 4
  },
  {
    "id": "10-05-navigating-patient-encounters-across-care-settings-5",
    "originalQuery": "SELECT \n    pe.PAT_ENC_CSN_ID,\n    pe.CONTACT_DATE,\n    d.DEPARTMENT_NAME,\n    dx.DX_ID,\n    dx.PRIMARY_DX_YN as Is_Primary,\n    dx.DX_CHRONIC_YN as Is_Chronic,\n    dx.DX_ED_YN as Is_ED_Diagnosis\nFROM PAT_ENC pe\nJOIN PAT_ENC_DX dx ON pe.PAT_ENC_CSN_ID = dx.PAT_ENC_CSN_ID\nLEFT JOIN CLARITY_DEP d ON pe.DEPARTMENT_ID = d.DEPARTMENT_ID\nWHERE pe.PAT_ID = 'Z7004242'\n  AND dx.PRIMARY_DX_YN = 'Y'\nORDER BY pe.CONTACT_DATE DESC\nLIMIT 10;",
    "description": "Show how diagnoses link to encounters",
    "chapterId": "10-05-navigating-patient-encounters-across-care-settings",
    "index": 5
  },
  {
    "id": "10-05-navigating-patient-encounters-across-care-settings-6",
    "originalQuery": "SELECT \n    'PAT_ENC' as Table_Name,\n    COUNT(*) as Column_Count\nFROM pragma_table_info('PAT_ENC')\nUNION ALL\nSELECT \n    'PAT_ENC_2',\n    COUNT(*)\nFROM pragma_table_info('PAT_ENC_2')\nUNION ALL\nSELECT \n    'PAT_ENC_3',\n    COUNT(*)\nFROM pragma_table_info('PAT_ENC_3')\nORDER BY Table_Name;",
    "description": "Demonstrate how encounter data spans multiple overflow tables",
    "chapterId": "10-05-navigating-patient-encounters-across-care-settings",
    "index": 6
  },
  {
    "id": "10-05-navigating-patient-encounters-across-care-settings-7",
    "originalQuery": "SELECT \n    pe.PAT_ENC_CSN_ID,\n    pe.CONTACT_DATE,\n    pe.APPT_STATUS_C_NAME,\n    pe2.SUP_PROV_ID as Supervising_Provider_ID, -- From PAT_ENC_2\n    pe3.ENC_BILL_AREA_ID_BILL_AREA_NAME as Billing_Area, -- From PAT_ENC_3\n    pe4.VISIT_NUMBER as Visit_Number   -- From PAT_ENC_4\nFROM PAT_ENC pe\nLEFT JOIN PAT_ENC_2 pe2 ON pe.PAT_ENC_CSN_ID = pe2.PAT_ENC_CSN_ID\nLEFT JOIN PAT_ENC_3 pe3 ON pe.PAT_ENC_CSN_ID = pe3.PAT_ENC_CSN\nLEFT JOIN PAT_ENC_4 pe4 ON pe.PAT_ENC_CSN_ID = pe4.PAT_ENC_CSN_ID\nWHERE pe.PAT_ID = 'Z7004242'\n  AND pe.CONTACT_DATE >= '2020-01-01'\nLIMIT 5;",
    "description": "Query across overflow tables to get complete encounter data",
    "chapterId": "10-05-navigating-patient-encounters-across-care-settings",
    "index": 7
  },
  {
    "id": "10-05-navigating-patient-encounters-across-care-settings-8",
    "originalQuery": "WITH EncounterStats AS (\n    SELECT \n        pe.PAT_ID,\n        COUNT(DISTINCT pe.PAT_ENC_CSN_ID) as Total_Encounters,\n        COUNT(DISTINCT CASE WHEN pe.APPT_STATUS_C_NAME = 'Completed' \n                           THEN pe.PAT_ENC_CSN_ID END) as Completed_Visits,\n        COUNT(DISTINCT CASE WHEN hsp.PAT_ENC_CSN_ID IS NOT NULL \n                           THEN pe.PAT_ENC_CSN_ID END) as Hospital_Encounters,\n        COUNT(DISTINCT CASE WHEN eds.PAT_ENC_CSN_ID IS NOT NULL \n                           THEN pe.PAT_ENC_CSN_ID END) as ED_Visits,\n        COUNT(DISTINCT pe.DEPARTMENT_ID) as Departments_Visited,\n        COUNT(DISTINCT DATE(pe.CONTACT_DATE)) as Days_With_Encounters\n    FROM PAT_ENC pe\n    LEFT JOIN PAT_ENC_HSP hsp ON pe.PAT_ENC_CSN_ID = hsp.PAT_ENC_CSN_ID\n    LEFT JOIN (SELECT DISTINCT PAT_ENC_CSN_ID FROM ED_PAT_STATUS) eds \n        ON pe.PAT_ENC_CSN_ID = eds.PAT_ENC_CSN_ID\n    WHERE pe.PAT_ID = 'Z7004242'\n    GROUP BY pe.PAT_ID\n)\nSELECT \n    Total_Encounters,\n    Completed_Visits,\n    Hospital_Encounters,\n    ED_Visits,\n    ROUND(CAST(ED_Visits AS FLOAT) / Total_Encounters * 100, 1) as ED_Visit_Percentage,\n    Departments_Visited,\n    Days_With_Encounters\nFROM EncounterStats;",
    "description": "Analyze patient's encounter patterns over time",
    "chapterId": "10-05-navigating-patient-encounters-across-care-settings",
    "index": 8
  },
  {
    "id": "10-06-decoding-insurance-coverage-and-benefits-0",
    "originalQuery": "SELECT \n    pac.PAT_ID,\n    pac.ACCOUNT_ID,\n    pac.ACCOUNT_TYPE_C_NAME as Account_Type,\n    pac.FIN_CLASS_NAME as Financial_Class,\n    ac.COVERAGE_ID,\n    c.PAYOR_ID_PAYOR_NAME as Insurance_Company,\n    c.PLAN_ID_BENEFIT_PLAN_NAME as Plan_Name,\n    c.GROUP_NAME as Employer\nFROM PAT_ACCT_CVG pac\nJOIN ACCT_COVERAGE ac ON pac.ACCOUNT_ID = ac.ACCOUNT_ID\nJOIN COVERAGE c ON ac.COVERAGE_ID = c.COVERAGE_ID\nWHERE pac.PAT_ID = 'Z7004242'\nORDER BY pac.LINE;",
    "description": "Show how patients link to insurance coverage through accounts",
    "chapterId": "10-06-decoding-insurance-coverage-and-benefits",
    "index": 0
  },
  {
    "id": "10-06-decoding-insurance-coverage-and-benefits-1",
    "originalQuery": "SELECT \n    c.COVERAGE_ID,\n    c.PAYOR_ID_PAYOR_NAME as Payer,\n    c.PLAN_ID_BENEFIT_PLAN_NAME as Plan,\n    c.GROUP_NUM as Group_Number,\n    c.GROUP_NAME as Employer,\n    c.CVG_EFF_DT as Effective_Date,\n    c.CVG_TERM_DT as Termination_Date,\n    cm.MEM_NUMBER as Member_ID,\n    cm.MEM_REL_TO_SUB_C_NAME as Member_Relationship,\n    cm.MEM_COVERED_YN as Is_Covered,\n    cm.MEM_EFF_FROM_DATE as Member_Start_Date\nFROM COVERAGE c\nJOIN COVERAGE_MEMBER_LIST cm ON c.COVERAGE_ID = cm.COVERAGE_ID\nWHERE cm.PAT_ID = 'Z7004242';",
    "description": "Examine comprehensive coverage information including member details",
    "chapterId": "10-06-decoding-insurance-coverage-and-benefits",
    "index": 1
  },
  {
    "id": "10-06-decoding-insurance-coverage-and-benefits-2",
    "originalQuery": "WITH BenefitDetails AS (\n    SELECT \n        'Overall Coverage' as Benefit_Level,\n        cb.DEDUCTIBLE_AMOUNT,\n        cb.DEDUCTIBLE_MET_AMT as Deductible_Met,\n        cb.DEDUCT_REMAIN_AMT as Deductible_Remaining,\n        cb.OUT_OF_POCKET_MAX as OOP_Maximum,\n        cb.OUT_OF_PCKT_REMAIN as OOP_Remaining,\n        NULL as Service_Type,\n        cb.COINS_PERCENT as Coinsurance_Percent\n    FROM COVERAGE_BENEFITS cb\n    WHERE cb.CVG_ID = 5934765.0\n      AND cb.DEDUCTIBLE_AMOUNT IS NOT NULL\n    \n    UNION ALL\n    \n    SELECT \n        'Service-Specific' as Benefit_Level,\n        sb.DEDUCTIBLE_AMOUNT,\n        sb.DEDUCTIBLE_MET_AMT,\n        sb.DEDUCT_REMAIN_AMT,\n        sb.OUT_OF_POCKET_MAX,\n        sb.OUT_OF_PCKT_REMAIN,\n        sb.CVG_SVC_TYPE_ID_SERVICE_TYPE_NAME as Service_Type,\n        sb.COINS_PERCENT\n    FROM SERVICE_BENEFITS sb\n    JOIN COVERAGE_BENEFITS cb ON sb.RECORD_ID = cb.RECORD_ID\n    WHERE cb.CVG_ID = 5934765.0\n      AND sb.CVG_SVC_TYPE_ID_SERVICE_TYPE_NAME IS NOT NULL\n)\nSELECT * FROM BenefitDetails\nWHERE Service_Type IS NULL OR Service_Type IN ('PRIMARY', 'SPEC', 'ED', 'HOSP IP')\nORDER BY Benefit_Level, Service_Type;",
    "description": "View the multi-tier benefit structure with deductibles and coinsurance",
    "chapterId": "10-06-decoding-insurance-coverage-and-benefits",
    "index": 2
  },
  {
    "id": "10-06-decoding-insurance-coverage-and-benefits-3",
    "originalQuery": "SELECT \n    ROW_NUMBER() OVER (ORDER BY cb.DEDUCTIBLE_MET_AMT DESC) as Record_Num,\n    cb.DEDUCTIBLE_AMOUNT as Annual_Deductible,\n    cb.DEDUCTIBLE_MET_AMT as Amount_Applied,\n    cb.DEDUCT_REMAIN_AMT as Amount_Remaining,\n    ROUND((cb.DEDUCTIBLE_MET_AMT / cb.DEDUCTIBLE_AMOUNT) * 100, 1) as Percent_Met,\n    '$' || CAST(cb.DEDUCTIBLE_MET_AMT AS TEXT) || ' of $' || \n        CAST(cb.DEDUCTIBLE_AMOUNT AS TEXT) as Progress\nFROM COVERAGE_BENEFITS cb\nWHERE cb.CVG_ID = 5934765.0\n  AND cb.DEDUCTIBLE_AMOUNT IS NOT NULL\n  AND cb.DEDUCTIBLE_AMOUNT > 0\nORDER BY cb.DEDUCTIBLE_MET_AMT DESC;",
    "description": "Analyze deductible accumulation across multiple benefit records",
    "chapterId": "10-06-decoding-insurance-coverage-and-benefits",
    "index": 3
  },
  {
    "id": "10-06-decoding-insurance-coverage-and-benefits-4",
    "originalQuery": "SELECT \n    sb.CVG_SVC_TYPE_ID_SERVICE_TYPE_NAME as Service_Type,\n    sb.COPAY_AMOUNT as Copay,\n    sb.COINS_PERCENT as Coinsurance_Pct,\n    sb.IN_NETWORK_YN as Network_Status,\n    sb.MAX_VISITS as Visit_Limit,\n    sb.REMAINING_VISITS as Visits_Remaining,\n    CASE \n        WHEN sb.COPAY_AMOUNT > 0 THEN '$' || CAST(sb.COPAY_AMOUNT AS TEXT) || ' copay'\n        WHEN sb.COINS_PERCENT > 0 THEN CAST(sb.COINS_PERCENT AS TEXT) || '% after deductible'\n        ELSE 'Covered'\n    END as Patient_Responsibility\nFROM SERVICE_BENEFITS sb\nJOIN COVERAGE_BENEFITS cb ON sb.RECORD_ID = cb.RECORD_ID\nWHERE cb.CVG_ID = 5934765.0\n  AND sb.CVG_SVC_TYPE_ID_SERVICE_TYPE_NAME IS NOT NULL\nORDER BY \n    CASE sb.CVG_SVC_TYPE_ID_SERVICE_TYPE_NAME\n        WHEN 'PRIMARY' THEN 1\n        WHEN 'SPEC' THEN 2\n        WHEN 'ED' THEN 3\n        WHEN 'HOSP IP' THEN 4\n        WHEN 'HOSP OP' THEN 5\n        ELSE 6\n    END,\n    sb.COINS_PERCENT;",
    "description": "Display comprehensive service benefits showing network variations",
    "chapterId": "10-06-decoding-insurance-coverage-and-benefits",
    "index": 4
  },
  {
    "id": "10-06-decoding-insurance-coverage-and-benefits-5",
    "originalQuery": "WITH DeductibleStatus AS (\n    SELECT \n        MAX(DEDUCTIBLE_AMOUNT) as Annual_Deductible,\n        MAX(DEDUCTIBLE_MET_AMT) as Deductible_Met,\n        MAX(DEDUCT_REMAIN_AMT) as Deductible_Remaining\n    FROM COVERAGE_BENEFITS\n    WHERE CVG_ID = 5934765.0\n      AND DEDUCTIBLE_AMOUNT IS NOT NULL\n),\nServiceScenarios AS (\n    SELECT \n        'Office Visit - Primary Care' as Service,\n        500 as Billed_Amount,\n        'PRIMARY' as Service_Type\n    UNION ALL\n    SELECT 'MRI Scan', 2000, 'HOSP OP'\n    UNION ALL\n    SELECT 'Emergency Room Visit', 1500, 'ED'\n    UNION ALL\n    SELECT 'Specialist Consultation', 350, 'SPEC'\n)\nSELECT \n    ss.Service,\n    '$' || ss.Billed_Amount as Billed_Amount,\n    sb.COINS_PERCENT || '%' as Coinsurance_Rate,\n    '$' || ds.Deductible_Met || ' of $' || ds.Annual_Deductible as Deductible_Status,\n    CASE \n        WHEN ds.Deductible_Remaining > 0 AND ss.Billed_Amount <= ds.Deductible_Remaining \n            THEN '$' || ss.Billed_Amount || ' (applies to deductible)'\n        WHEN ds.Deductible_Remaining > 0 \n            THEN '$' || ds.Deductible_Remaining || ' (deductible) + $' || \n                 ROUND((ss.Billed_Amount - ds.Deductible_Remaining) * sb.COINS_PERCENT / 100.0, 2) || ' (coinsurance)'\n        WHEN sb.COPAY_AMOUNT > 0 \n            THEN '$' || sb.COPAY_AMOUNT || ' (copay)'\n        ELSE '$' || ROUND(ss.Billed_Amount * sb.COINS_PERCENT / 100.0, 2) || ' (coinsurance)'\n    END as Patient_Owes\nFROM ServiceScenarios ss\nCROSS JOIN DeductibleStatus ds\nLEFT JOIN SERVICE_BENEFITS sb ON sb.CVG_SVC_TYPE_ID_SERVICE_TYPE_NAME = ss.Service_Type\nLEFT JOIN COVERAGE_BENEFITS cb ON sb.RECORD_ID = cb.RECORD_ID\nWHERE cb.CVG_ID = 5934765.0\n  AND sb.COINS_PERCENT = 10\nLIMIT 4;",
    "description": "Model patient responsibility calculation for different scenarios",
    "chapterId": "10-06-decoding-insurance-coverage-and-benefits",
    "index": 5
  },
  {
    "id": "10-06-decoding-insurance-coverage-and-benefits-6",
    "originalQuery": "SELECT \n    c.COVERAGE_ID,\n    c.VERIFY_USER_ID_NAME as Last_Verified_By,\n    cm.MEM_VERIF_STAT_C_NAME as Member_Verification_Status,\n    cm.LAST_VERIF_DATE as Last_Verification_Date,\n    cm.MEM_COVERED_YN as Currently_Covered,\n    cm.MEM_EFF_FROM_DATE as Coverage_Start,\n    cm.MEM_EFF_TO_DATE as Coverage_End,\n    CASE \n        WHEN cm.MEM_EFF_TO_DATE IS NULL THEN 'Active - No End Date'\n        WHEN DATE(cm.MEM_EFF_TO_DATE) >= DATE('now') THEN 'Active until ' || cm.MEM_EFF_TO_DATE\n        ELSE 'Terminated on ' || cm.MEM_EFF_TO_DATE\n    END as Coverage_Status\nFROM COVERAGE c\nJOIN COVERAGE_MEMBER_LIST cm ON c.COVERAGE_ID = cm.COVERAGE_ID\nWHERE cm.PAT_ID = 'Z7004242';",
    "description": "Check coverage verification and eligibility status",
    "chapterId": "10-06-decoding-insurance-coverage-and-benefits",
    "index": 6
  },
  {
    "id": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient-0",
    "originalQuery": "SELECT \n    COUNT(*) as total_encounters,\n    SUM(CASE WHEN INPATIENT_DATA_ID IS NOT NULL \n             AND LENGTH(INPATIENT_DATA_ID) > 0 \n        THEN 1 ELSE 0 END) as has_inpatient_id,\n    ROUND(SUM(CASE WHEN INPATIENT_DATA_ID IS NOT NULL \n                   AND LENGTH(INPATIENT_DATA_ID) > 0 \n              THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as percentage\nFROM PAT_ENC\nWHERE PAT_ID = 'Z7004242';",
    "description": "Check what fraction of encounters have INPATIENT_DATA_ID",
    "chapterId": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient",
    "index": 0
  },
  {
    "id": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient-1",
    "originalQuery": "SELECT \n    CASE \n        WHEN pe.INPATIENT_DATA_ID IS NOT NULL THEN 'Has INPATIENT_DATA_ID'\n        ELSE 'No INPATIENT_DATA_ID'\n    END as Category,\n    COUNT(*) as Encounter_Count,\n    SUM(CASE WHEN hsp.PAT_ENC_CSN_ID IS NOT NULL THEN 1 ELSE 0 END) as Has_Hospital_Record,\n    ROUND(SUM(CASE WHEN hsp.PAT_ENC_CSN_ID IS NOT NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as Hospital_Percentage\nFROM PAT_ENC pe\nLEFT JOIN PAT_ENC_HSP hsp ON pe.PAT_ENC_CSN_ID = hsp.PAT_ENC_CSN_ID\nWHERE pe.PAT_ID = 'Z7004242'\nGROUP BY CASE WHEN pe.INPATIENT_DATA_ID IS NOT NULL THEN 'Has INPATIENT_DATA_ID' ELSE 'No INPATIENT_DATA_ID' END;",
    "description": "Compare INPATIENT_DATA_ID presence with actual hospital records",
    "chapterId": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient",
    "index": 1
  },
  {
    "id": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient-2",
    "originalQuery": "SELECT \n    COALESCE(d.DEPARTMENT_NAME, '[No Department]') as Department,\n    COUNT(*) as Encounters_with_Inpatient_ID,\n    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 1) as Percentage\nFROM PAT_ENC pe\nLEFT JOIN CLARITY_DEP d ON pe.DEPARTMENT_ID = d.DEPARTMENT_ID\nWHERE pe.INPATIENT_DATA_ID IS NOT NULL \n  AND LENGTH(pe.INPATIENT_DATA_ID) > 0\n  AND pe.PAT_ID = 'Z7004242'\nGROUP BY d.DEPARTMENT_NAME\nORDER BY COUNT(*) DESC;",
    "description": "List departments using INPATIENT_DATA_ID",
    "chapterId": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient",
    "index": 2
  },
  {
    "id": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient-3",
    "originalQuery": "SELECT \n    d.DEPARTMENT_NAME,\n    eds.ED_PAT_STATUS_C_NAME as Workflow_Status,\n    eds.PAT_STATUS_TIME,\n    pe.APPT_STATUS_C_NAME as Appointment_Status\nFROM ED_PAT_STATUS eds\nJOIN PAT_ENC pe ON eds.PAT_ENC_CSN_ID = pe.PAT_ENC_CSN_ID\nLEFT JOIN CLARITY_DEP d ON pe.DEPARTMENT_ID = d.DEPARTMENT_ID\nWHERE pe.PAT_ID = 'Z7004242'\n  AND d.DEPARTMENT_NAME LIKE '%INTERNAL MEDICINE%'\nORDER BY eds.PAT_STATUS_TIME DESC\nLIMIT 10;",
    "description": "Show ED workflow tracking in non-ED departments",
    "chapterId": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient",
    "index": 3
  },
  {
    "id": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient-4",
    "originalQuery": "WITH id_usage AS (\n    SELECT DISTINCT INPATIENT_DATA_ID \n    FROM PAT_ENC \n    WHERE INPATIENT_DATA_ID IS NOT NULL\n      AND PAT_ID = 'Z7004242'\n)\nSELECT \n    'IP_DATA_STORE' as Table_Name,\n    COUNT(DISTINCT ids.INPATIENT_DATA_ID) as IDs_Found,\n    'Master inpatient data store' as Purpose\nFROM IP_DATA_STORE ids\nWHERE ids.INPATIENT_DATA_ID IN (SELECT INPATIENT_DATA_ID FROM id_usage)\nUNION ALL\nSELECT \n    'ED_PAT_STATUS',\n    COUNT(DISTINCT eds.INPATIENT_DATA_ID),\n    'Workflow status tracking'\nFROM ED_PAT_STATUS eds\nWHERE eds.INPATIENT_DATA_ID IN (SELECT INPATIENT_DATA_ID FROM id_usage)\nUNION ALL\nSELECT \n    'IP_FLOWSHEET_ROWS',\n    COUNT(DISTINCT ifr.INPATIENT_DATA_ID),\n    'Clinical documentation'\nFROM IP_FLOWSHEET_ROWS ifr\nWHERE ifr.INPATIENT_DATA_ID IN (SELECT INPATIENT_DATA_ID FROM id_usage)\nUNION ALL\nSELECT \n    'PAT_ENC_HSP',\n    COUNT(DISTINCT hsp.INPATIENT_DATA_ID),\n    'True hospital admissions'\nFROM PAT_ENC_HSP hsp\nWHERE hsp.INPATIENT_DATA_ID IN (SELECT INPATIENT_DATA_ID FROM id_usage)\nORDER BY IDs_Found DESC;",
    "description": "Show which tables use INPATIENT_DATA_ID for tracking",
    "chapterId": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient",
    "index": 4
  },
  {
    "id": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient-5",
    "originalQuery": "SELECT \n    pe.PAT_ENC_CSN_ID,\n    pe.CONTACT_DATE,\n    d.DEPARTMENT_NAME,\n    ids.INPATIENT_DATA_ID,\n    ids.EPT_CSN as Linked_CSN,\n    ids.RECORD_STATUS_C_NAME\nFROM PAT_ENC pe\nJOIN IP_DATA_STORE ids ON pe.INPATIENT_DATA_ID = ids.INPATIENT_DATA_ID\nLEFT JOIN CLARITY_DEP d ON pe.DEPARTMENT_ID = d.DEPARTMENT_ID\nWHERE pe.PAT_ID = 'Z7004242'\n  AND d.DEPARTMENT_NAME LIKE '%LABORATORY%'\nLIMIT 5;",
    "description": "Examine IP_DATA_STORE connections",
    "chapterId": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient",
    "index": 5
  },
  {
    "id": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient-6",
    "originalQuery": "SELECT \n    pe.PAT_ENC_CSN_ID,\n    pe.CONTACT_DATE,\n    d.DEPARTMENT_NAME,\n    hsp.ADT_PAT_CLASS_C_NAME as Patient_Class,\n    hsp.HOSP_ADMSN_TIME as Admission_Time,\n    hsp.HOSP_DISCH_TIME as Discharge_Time,\n    CASE \n        WHEN pe.INPATIENT_DATA_ID IS NOT NULL THEN 'Yes'\n        ELSE 'No'\n    END as Has_Inpatient_Data_ID\nFROM PAT_ENC pe\nJOIN PAT_ENC_HSP hsp ON pe.PAT_ENC_CSN_ID = hsp.PAT_ENC_CSN_ID\nLEFT JOIN CLARITY_DEP d ON pe.DEPARTMENT_ID = d.DEPARTMENT_ID\nWHERE pe.PAT_ID = 'Z7004242'\nORDER BY pe.CONTACT_DATE DESC;",
    "description": "Correctly identify true hospital admissions",
    "chapterId": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient",
    "index": 6
  },
  {
    "id": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient-7",
    "originalQuery": "SELECT \n    'Features enabled by INPATIENT_DATA_ID:' as Description\nUNION ALL\nSELECT '• Workflow tracking: ' || COUNT(DISTINCT PAT_ENC_CSN_ID) || ' encounters'\nFROM ED_PAT_STATUS \nWHERE INPATIENT_DATA_ID IN (\n    SELECT INPATIENT_DATA_ID FROM PAT_ENC \n    WHERE PAT_ID = 'Z7004242' AND INPATIENT_DATA_ID IS NOT NULL\n)\nUNION ALL\nSELECT '• Flowsheet documentation: ' || COUNT(DISTINCT INPATIENT_DATA_ID) || ' encounters'\nFROM IP_FLOWSHEET_ROWS\nWHERE INPATIENT_DATA_ID IN (\n    SELECT INPATIENT_DATA_ID FROM PAT_ENC \n    WHERE PAT_ID = 'Z7004242' AND INPATIENT_DATA_ID IS NOT NULL\n)\nUNION ALL\nSELECT '• Date range tracking: ' || COUNT(DISTINCT INPATIENT_DATA_ID) || ' encounters'\nFROM IP_FLOW_DATERNG\nWHERE INPATIENT_DATA_ID IN (\n    SELECT INPATIENT_DATA_ID FROM PAT_ENC \n    WHERE PAT_ID = 'Z7004242' AND INPATIENT_DATA_ID IS NOT NULL\n);",
    "description": "Analyze what features INPATIENT_DATA_ID enables",
    "chapterId": "10-06-demystifying-inpatient-data-id-when-outpatients-go-inpatient",
    "index": 7
  },
  {
    "id": "10-07-capturing-clinical-measurements-through-flowsheets-0",
    "originalQuery": "SELECT \n    flt.TEMPLATE_ID,\n    flt.DISPLAY_NAME as Template_Name,\n    COUNT(DISTINCT fm.FSD_ID) as Times_Used,\n    COUNT(fm.LINE) as Total_Measurements\nFROM IP_FLT_DATA flt\nLEFT JOIN IP_FLWSHT_MEAS fm ON flt.TEMPLATE_ID = fm.FLT_ID\nGROUP BY flt.TEMPLATE_ID, flt.DISPLAY_NAME\nORDER BY Total_Measurements DESC;",
    "description": "View available flowsheet templates and their usage",
    "chapterId": "10-07-capturing-clinical-measurements-through-flowsheets",
    "index": 0
  },
  {
    "id": "10-07-capturing-clinical-measurements-through-flowsheets-1",
    "originalQuery": "SELECT \n    fm.RECORDED_TIME,\n    fm.LINE,\n    fr.FLO_MEAS_ID_DISP_NAME as Question,\n    fm.MEAS_COMMENT as Response,\n    fm.TAKEN_USER_ID_NAME as Administered_By\nFROM IP_FLWSHT_REC fsr\nJOIN IP_FLWSHT_MEAS fm ON fsr.FSD_ID = fm.FSD_ID\nLEFT JOIN IP_FLOWSHEET_ROWS fr ON fsr.INPATIENT_DATA_ID = fr.INPATIENT_DATA_ID \n    AND fm.LINE = fr.LINE\nWHERE fsr.PAT_ID = 'Z7004242'\n  AND fm.FLT_ID = '281'  -- Adult Wellness Screenings\n  AND fr.FLO_MEAS_ID_DISP_NAME LIKE '%PHQ-2%'\nORDER BY fm.RECORDED_TIME DESC, fm.LINE;",
    "description": "Follow PHQ-2 screening questions and responses",
    "chapterId": "10-07-capturing-clinical-measurements-through-flowsheets",
    "index": 1
  },
  {
    "id": "10-07-capturing-clinical-measurements-through-flowsheets-2",
    "originalQuery": "SELECT \n    flt.DISPLAY_NAME as Template,\n    COUNT(*) as Measurements,\n    AVG(CASE \n        WHEN fm.ENTRY_TIME IS NOT NULL AND fm.RECORDED_TIME IS NOT NULL\n        THEN ROUND((JULIANDAY(fm.ENTRY_TIME) - JULIANDAY(fm.RECORDED_TIME)) * 24 * 60, 1)\n        ELSE NULL \n    END) as Avg_Documentation_Delay_Minutes,\n    COUNT(CASE WHEN fm.ENTRY_TIME = fm.RECORDED_TIME THEN 1 END) as Real_Time_Entries\nFROM IP_FLWSHT_MEAS fm\nJOIN IP_FLT_DATA flt ON fm.FLT_ID = flt.TEMPLATE_ID\nJOIN IP_FLWSHT_REC fr ON fm.FSD_ID = fr.FSD_ID\nWHERE fr.PAT_ID = 'Z7004242'\n  AND fm.ENTRY_TIME IS NOT NULL\nGROUP BY flt.DISPLAY_NAME\nORDER BY Measurements DESC;",
    "description": "Analyze documentation timeliness across templates",
    "chapterId": "10-07-capturing-clinical-measurements-through-flowsheets",
    "index": 2
  },
  {
    "id": "10-07-capturing-clinical-measurements-through-flowsheets-3",
    "originalQuery": "WITH TemplateUsage AS (\n    SELECT \n        DATE(fm.RECORDED_TIME) as Measurement_Date,\n        flt.DISPLAY_NAME as Template,\n        COUNT(*) as Daily_Measurements,\n        COUNT(DISTINCT fm.TAKEN_USER_ID) as Staff_Count\n    FROM IP_FLWSHT_MEAS fm\n    JOIN IP_FLT_DATA flt ON fm.FLT_ID = flt.TEMPLATE_ID\n    JOIN IP_FLWSHT_REC fr ON fm.FSD_ID = fr.FSD_ID\n    WHERE fr.PAT_ID = 'Z7004242'\n      AND fm.RECORDED_TIME IS NOT NULL\n    GROUP BY DATE(fm.RECORDED_TIME), flt.DISPLAY_NAME\n)\nSELECT \n    Measurement_Date,\n    GROUP_CONCAT(Template || ' (' || Daily_Measurements || ')', ', ') as Templates_Used,\n    SUM(Daily_Measurements) as Total_Daily_Measurements\nFROM TemplateUsage\nGROUP BY Measurement_Date\nORDER BY Measurement_Date DESC\nLIMIT 10;",
    "description": "Track flowsheet template usage patterns over time",
    "chapterId": "10-07-capturing-clinical-measurements-through-flowsheets",
    "index": 3
  },
  {
    "id": "10-07-capturing-clinical-measurements-through-flowsheets-4",
    "originalQuery": "SELECT \n    fr.FLO_MEAS_ID_DISP_NAME as Measurement_Type,\n    COUNT(DISTINCT fr.INPATIENT_DATA_ID) as Flowsheets_Using_This,\n    COUNT(DISTINCT fsr.FSD_ID) as Records_With_This_Type\nFROM IP_FLOWSHEET_ROWS fr\nJOIN IP_FLWSHT_REC fsr ON fr.INPATIENT_DATA_ID = fsr.INPATIENT_DATA_ID\nWHERE fsr.PAT_ID = 'Z7004242'\nGROUP BY fr.FLO_MEAS_ID_DISP_NAME\nHAVING COUNT(DISTINCT fsr.FSD_ID) > 0\nORDER BY Records_With_This_Type DESC\nLIMIT 20;\n</example_query>\n\nCommon measurement types include:\n- **Vital Signs**: BP, pulse, temperature, respirations\n- **Screening Questions**: Depression, substance use, safety\n- **Calculated Values**: BMI, scores, risk assessments\n- **Patient-Reported**: Symptoms, travel, exposures\n\n### Tracking Clinical Decision Support\n\nSome measurements trigger automated calculations:\n\n<example-query description=\"Find calculated values and formulas in flowsheets\">\nSELECT \n    fm.RECORDED_TIME,\n    fm.FLT_ID_DISPLAY_NAME as Template,\n    fr.FLO_MEAS_ID_DISP_NAME as Calculated_Field,\n    fm.MEAS_COMMENT as Value\nFROM IP_FLWSHT_MEAS fm\nJOIN IP_FLWSHT_REC fsr ON fm.FSD_ID = fsr.FSD_ID\nLEFT JOIN IP_FLOWSHEET_ROWS fr ON fsr.INPATIENT_DATA_ID = fr.INPATIENT_DATA_ID \n    AND fm.OCCURANCE = fr.LINE\nWHERE fsr.PAT_ID = 'Z7004242'\n  AND fm.FLT_ID = '43'  -- Custom Formula Data\n  AND fr.FLO_MEAS_ID_DISP_NAME IS NOT NULL\nORDER BY fm.RECORDED_TIME DESC\nLIMIT 10;",
    "description": "Explore the variety of clinical measurements captured",
    "chapterId": "10-07-capturing-clinical-measurements-through-flowsheets",
    "index": 4
  },
  {
    "id": "10-07-capturing-clinical-measurements-through-flowsheets-5",
    "originalQuery": "SELECT \n    fm.FSD_ID,\n    fm.RECORDED_TIME,\n    fm.FLT_ID_DISPLAY_NAME as Template,\n    CASE \n        WHEN fm.EDITED_LINE IS NOT NULL THEN 'Edited'\n        ELSE 'Original'\n    END as Entry_Status,\n    fm.ENTRY_USER_ID_NAME as Documented_By,\n    fm.ISACCEPTED_YN as Accepted\nFROM IP_FLWSHT_MEAS fm\nJOIN IP_FLWSHT_REC fr ON fm.FSD_ID = fr.FSD_ID\nWHERE fr.PAT_ID = 'Z7004242'\n  AND (fm.EDITED_LINE IS NOT NULL OR fm.ISACCEPTED_YN = 'N')\nORDER BY fm.RECORDED_TIME DESC\nLIMIT 10;",
    "description": "Check for edited measurements showing audit trail",
    "chapterId": "10-07-capturing-clinical-measurements-through-flowsheets",
    "index": 5
  },
  {
    "id": "10-07-capturing-clinical-measurements-through-flowsheets-6",
    "originalQuery": "WITH FlowsheetTimeline AS (\n    SELECT \n        DATE(fm.RECORDED_TIME) as Activity_Date,\n        flt.DISPLAY_NAME as Template_Used,\n        COUNT(DISTINCT fm.FSD_ID) as Unique_Records,\n        COUNT(*) as Total_Entries,\n        GROUP_CONCAT(DISTINCT fm.TAKEN_USER_ID_NAME) as Staff_Involved\n    FROM IP_FLWSHT_MEAS fm\n    JOIN IP_FLT_DATA flt ON fm.FLT_ID = flt.TEMPLATE_ID\n    JOIN IP_FLWSHT_REC fr ON fm.FSD_ID = fr.FSD_ID\n    WHERE fr.PAT_ID = 'Z7004242'\n      AND fm.RECORDED_TIME IS NOT NULL\n    GROUP BY DATE(fm.RECORDED_TIME), flt.DISPLAY_NAME\n)\nSELECT \n    Activity_Date,\n    COUNT(DISTINCT Template_Used) as Different_Templates,\n    SUM(Total_Entries) as Total_Measurements,\n    GROUP_CONCAT(Template_Used || ' (' || Total_Entries || ' entries)', '; ') as Details\nFROM FlowsheetTimeline\nGROUP BY Activity_Date\nORDER BY Activity_Date DESC\nLIMIT 15;",
    "description": "Create a timeline of all flowsheet documentation",
    "chapterId": "10-07-capturing-clinical-measurements-through-flowsheets",
    "index": 6
  },
  {
    "id": "10-08-orchestrating-clinical-care-through-orders-0",
    "originalQuery": "SELECT \n    'Medications' as Order_Category,\n    COUNT(*) as Total_Orders,\n    COUNT(DISTINCT ORDERING_DATE) as Order_Days,\n    MIN(SUBSTR(ORDERING_DATE, 1, 10)) as First_Order,\n    MAX(SUBSTR(ORDERING_DATE, 1, 10)) as Last_Order\nFROM ORDER_MED\nWHERE PAT_ID = 'Z7004242'\n\nUNION ALL\n\nSELECT \n    'Procedures' as Order_Category,\n    COUNT(*) as Total_Orders,\n    COUNT(DISTINCT ORDERING_DATE) as Order_Days,\n    MIN(SUBSTR(ORDERING_DATE, 1, 10)) as First_Order,\n    MAX(SUBSTR(ORDERING_DATE, 1, 10)) as Last_Order\nFROM ORDER_PROC\nWHERE PAT_ID = 'Z7004242'\nORDER BY Total_Orders DESC;",
    "description": "Compare medication and procedure order volumes for our patient",
    "chapterId": "10-08-orchestrating-clinical-care-through-orders",
    "index": 0
  },
  {
    "id": "10-08-orchestrating-clinical-care-through-orders-1",
    "originalQuery": "SELECT \n    ORDER_MED_ID,\n    SUBSTR(START_DATE, 1, 10) as Start_Date,\n    SUBSTR(END_DATE, 1, 10) as End_Date,\n    QUANTITY,\n    REFILLS,\n    ORDER_STATUS_C_NAME as Status,\n    RSN_FOR_DISCON_C_NAME as Discontinuation_Reason,\n    CASE \n        WHEN CHNG_ORDER_MED_ID IS NOT NULL THEN 'Reorder of ' || CHNG_ORDER_MED_ID\n        ELSE 'Original Order'\n    END as Order_Type\nFROM ORDER_MED\nWHERE PAT_ID = 'Z7004242' \n  AND DESCRIPTION LIKE '%NORTRIPTYLINE%'\nORDER BY START_DATE;",
    "description": "Track the complete history of nortriptyline orders showing refills and changes",
    "chapterId": "10-08-orchestrating-clinical-care-through-orders",
    "index": 1
  },
  {
    "id": "10-08-orchestrating-clinical-care-through-orders-2",
    "originalQuery": "WITH LabOrders AS (\n    SELECT \n        op.ORDER_PROC_ID,\n        op.ORDERING_DATE,\n        op.DESCRIPTION as Test_Name,\n        op.ORDER_STATUS_C_NAME as Order_Status,\n        op.LAB_STATUS_C_NAME as Lab_Status,\n        COUNT(orr.LINE) as Result_Components\n    FROM ORDER_PROC op\n    LEFT JOIN ORDER_RESULTS orr ON op.ORDER_PROC_ID = orr.ORDER_PROC_ID\n    WHERE op.PAT_ID = 'Z7004242'\n      AND op.ORDER_TYPE_C_NAME = 'Lab'\n    GROUP BY op.ORDER_PROC_ID, op.ORDERING_DATE, op.DESCRIPTION, \n             op.ORDER_STATUS_C_NAME, op.LAB_STATUS_C_NAME\n)\nSELECT \n    SUBSTR(ORDERING_DATE, 1, 10) as Order_Date,\n    Test_Name,\n    Order_Status,\n    Lab_Status,\n    Result_Components,\n    CASE \n        WHEN Lab_Status = 'Final result' THEN 'Complete with ' || Result_Components || ' results'\n        WHEN Order_Status = 'Completed' AND Result_Components = 0 THEN 'Completed, no discrete results'\n        ELSE 'Pending or canceled'\n    END as Interpretation\nFROM LabOrders\nORDER BY ORDERING_DATE DESC\nLIMIT 10;",
    "description": "Trace lab orders from placement through final results",
    "chapterId": "10-08-orchestrating-clinical-care-through-orders",
    "index": 2
  },
  {
    "id": "10-08-orchestrating-clinical-care-through-orders-3",
    "originalQuery": "SELECT \n    op.DESCRIPTION as Test,\n    orr.COMPONENT_ID_NAME as Component,\n    orr.ORD_VALUE as Value,\n    orr.REFERENCE_UNIT as Unit,\n    orr.REFERENCE_LOW || '-' || orr.REFERENCE_HIGH as Normal_Range,\n    CASE \n        WHEN orr.RESULT_FLAG_C_NAME = 'High' THEN '⬆️ HIGH'\n        WHEN orr.RESULT_FLAG_C_NAME = 'Low' THEN '⬇️ LOW'\n        ELSE '✓ Normal'\n    END as Status\nFROM ORDER_PROC op\nJOIN ORDER_RESULTS orr ON op.ORDER_PROC_ID = orr.ORDER_PROC_ID\nWHERE op.PAT_ID = 'Z7004242'\n  AND op.ORDER_TYPE_C_NAME = 'Lab'\n  AND op.ORDERING_DATE LIKE '9/28/2023%'\nORDER BY op.ORDERING_DATE DESC, op.ORDER_PROC_ID, orr.LINE\nLIMIT 15;",
    "description": "Show detailed lab results with reference ranges and abnormal flags",
    "chapterId": "10-08-orchestrating-clinical-care-through-orders",
    "index": 3
  },
  {
    "id": "10-08-orchestrating-clinical-care-through-orders-4",
    "originalQuery": "WITH MedHistory AS (\n    SELECT \n        SUBSTR(DESCRIPTION, 1, 30) as Medication,\n        SUBSTR(START_DATE, 1, 10) as Start_Date,\n        SUBSTR(END_DATE, 1, 10) as End_Date,\n        CAST(REPLACE(QUANTITY, ' capsule', '') AS INTEGER) as Quantity,\n        CASE \n            WHEN END_DATE IS NOT NULL \n            THEN 90  -- Assuming 90 day supply for simplicity\n            ELSE 90\n        END as Days_Supply,\n        RSN_FOR_DISCON_C_NAME as Discontinuation_Reason\n    FROM ORDER_MED\n    WHERE PAT_ID = 'Z7004242'\n      AND QUANTITY LIKE '%capsule%'\n)\nSELECT \n    Medication,\n    Start_Date,\n    End_Date,\n    Quantity || ' units' as Quantity,\n    Days_Supply || ' days' as Duration,\n    ROUND(Quantity / Days_Supply * 30, 1) || ' units/month' as Monthly_Usage,\n    COALESCE(Discontinuation_Reason, 'Active') as Status\nFROM MedHistory\nORDER BY Start_Date DESC;",
    "description": "Analyze medication refill patterns to assess adherence",
    "chapterId": "10-08-orchestrating-clinical-care-through-orders",
    "index": 4
  },
  {
    "id": "10-08-orchestrating-clinical-care-through-orders-5",
    "originalQuery": "SELECT \n    SUBSTR(ORDERING_DATE, 1, 10) as Referral_Date,\n    DESCRIPTION as Specialty,\n    ORDER_STATUS_C_NAME as Status,\n    CASE \n        WHEN REFERRING_PROV_ID IS NOT NULL AND REFERRING_PROV_ID != '' THEN 'Provider: ' || REFERRING_PROV_ID\n        ELSE 'No referring provider listed'\n    END as Referred_By,\n    CASE \n        WHEN REFD_TO_LOC_ID IS NOT NULL THEN 'Location specified'\n        ELSE 'No specific location'\n    END as Destination\nFROM ORDER_PROC\nWHERE PAT_ID = 'Z7004242'\n  AND ORDER_TYPE_C_NAME = 'Outpatient Referral'\nORDER BY ORDERING_DATE DESC;",
    "description": "Map referral patterns showing specialty consultations",
    "chapterId": "10-08-orchestrating-clinical-care-through-orders",
    "index": 5
  },
  {
    "id": "10-08-orchestrating-clinical-care-through-orders-6",
    "originalQuery": "WITH OrderGroups AS (\n    SELECT \n        PAT_ENC_CSN_ID,\n        SUBSTR(ORDERING_DATE, 1, 10) as Order_Date,\n        'Medication' as Order_Type,\n        DESCRIPTION,\n        ORDER_MED_ID as Order_ID\n    FROM ORDER_MED\n    WHERE PAT_ID = 'Z7004242'\n    \n    UNION ALL\n    \n    SELECT \n        PAT_ENC_CSN_ID,\n        SUBSTR(ORDERING_DATE, 1, 10) as Order_Date,\n        'Procedure: ' || ORDER_TYPE_C_NAME as Order_Type,\n        DESCRIPTION,\n        ORDER_PROC_ID as Order_ID\n    FROM ORDER_PROC\n    WHERE PAT_ID = 'Z7004242'\n)\nSELECT \n    Order_Date,\n    COUNT(*) as Orders_Placed,\n    GROUP_CONCAT(Order_Type || ': ' || SUBSTR(DESCRIPTION, 1, 30), '; ') as Order_Summary\nFROM OrderGroups\nWHERE PAT_ENC_CSN_ID IS NOT NULL\nGROUP BY PAT_ENC_CSN_ID, Order_Date\nHAVING COUNT(*) > 1\nORDER BY Order_Date DESC;",
    "description": "Find orders placed together on the same encounter",
    "chapterId": "10-08-orchestrating-clinical-care-through-orders",
    "index": 6
  },
  {
    "id": "10-08-orchestrating-clinical-care-through-orders-7",
    "originalQuery": "SELECT \n    os.ORDER_ID,\n    SUBSTR(op.DESCRIPTION, 1, 30) as Test,\n    os.CONTACT_TYPE_C_NAME as Status_Update,\n    SUBSTR(os.INSTANT_OF_ENTRY, 1, 10) as Update_Date,\n    os.ORDER_CREATOR_ID_NAME as Updated_By\nFROM ORDER_STATUS os\nJOIN ORDER_PROC op ON os.ORDER_ID = op.ORDER_PROC_ID\nWHERE op.PAT_ID = 'Z7004242'\n  AND op.ORDER_TYPE_C_NAME = 'Lab'\n  AND op.ORDER_STATUS_C_NAME = 'Completed'\nORDER BY os.ORDER_ID, os.INSTANT_OF_ENTRY\nLIMIT 10;",
    "description": "Examine order status progression for completed labs",
    "chapterId": "10-08-orchestrating-clinical-care-through-orders",
    "index": 7
  },
  {
    "id": "10-08-orchestrating-clinical-care-through-orders-8",
    "originalQuery": "WITH OrderPatterns AS (\n    SELECT \n        CASE \n            WHEN DESCRIPTION LIKE '%A1C%' THEN 'Diabetes Monitoring'\n            WHEN DESCRIPTION LIKE '%LIPID%' THEN 'Cardiovascular Monitoring'\n            WHEN DESCRIPTION LIKE '%HEPATITIS%' THEN 'Infection Screening'\n            WHEN DESCRIPTION LIKE '%DEPRESSION%' OR DESCRIPTION LIKE '%NORTRIPTYLINE%' THEN 'Mental Health'\n            WHEN DESCRIPTION LIKE '%LISINOPRIL%' THEN 'Hypertension Management'\n            ELSE 'Other'\n        END as Care_Category,\n        COUNT(*) as Order_Count,\n        MIN(SUBSTR(ORDERING_DATE, 1, 10)) as First_Order,\n        MAX(SUBSTR(ORDERING_DATE, 1, 10)) as Last_Order\n    FROM (\n        SELECT ORDERING_DATE, DESCRIPTION FROM ORDER_MED WHERE PAT_ID = 'Z7004242'\n        UNION ALL\n        SELECT ORDERING_DATE, DESCRIPTION FROM ORDER_PROC WHERE PAT_ID = 'Z7004242'\n    )\n    GROUP BY Care_Category\n)\nSELECT \n    Care_Category,\n    Order_Count,\n    First_Order,\n    Last_Order,\n    CASE \n        WHEN First_Order IS NOT NULL AND Last_Order IS NOT NULL \n        THEN 'Ongoing care'\n        ELSE 'Single episode'\n    END as Care_Duration\nFROM OrderPatterns\nWHERE Care_Category != 'Other'\nORDER BY Order_Count DESC;",
    "description": "Identify chronic condition management through recurring orders",
    "chapterId": "10-08-orchestrating-clinical-care-through-orders",
    "index": 8
  },
  {
    "id": "10-09-capturing-the-clinical-narrative-through-documentation-0",
    "originalQuery": "SELECT \n    CASE \n        WHEN DELETE_INSTANT_DTTM IS NOT NULL THEN 'Deleted'\n        ELSE 'Active'\n    END as Note_Status,\n    COUNT(*) as Count,\n    COUNT(DISTINCT NOTE_TYPE_NOADD_C_NAME) as Note_Types,\n    COUNT(DISTINCT PAT_ENC_CSN_ID) as Unique_Encounters\nFROM HNO_INFO\nGROUP BY Note_Status;",
    "description": "Examine the deletion status of all clinical notes in our dataset",
    "chapterId": "10-09-capturing-the-clinical-narrative-through-documentation",
    "index": 0
  },
  {
    "id": "10-09-capturing-the-clinical-narrative-through-documentation-1",
    "originalQuery": "SELECT \n    COALESCE(NOTE_TYPE_NOADD_C_NAME, 'Unspecified') as Note_Type,\n    COUNT(*) as Count,\n    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM HNO_INFO), 2) as Percentage,\n    MIN(SUBSTR(CREATE_INSTANT_DTTM, 1, 10)) as Earliest,\n    MAX(SUBSTR(CREATE_INSTANT_DTTM, 1, 10)) as Latest\nFROM HNO_INFO\nGROUP BY Note_Type\nORDER BY Count DESC;",
    "description": "Analyze the types of clinical documentation in the system",
    "chapterId": "10-09-capturing-the-clinical-narrative-through-documentation",
    "index": 1
  },
  {
    "id": "10-09-capturing-the-clinical-narrative-through-documentation-2",
    "originalQuery": "WITH PatientDocs AS (\n    SELECT \n        'Clinical Note' as Doc_Type,\n        h.NOTE_ID as Doc_ID,\n        h.NOTE_TYPE_NOADD_C_NAME as Subtype,\n        h.CREATE_INSTANT_DTTM as Created,\n        h.ENTRY_USER_ID_NAME as Author,\n        'Deleted' as Status\n    FROM HNO_INFO h\n    JOIN PAT_ENC pe ON h.PAT_ENC_CSN_ID = pe.PAT_ENC_CSN_ID\n    WHERE pe.PAT_ID = 'Z7004242'\n    \n    UNION ALL\n    \n    SELECT \n        'External Document' as Doc_Type,\n        d.DOC_INFO_ID as Doc_ID,\n        d.DOC_INFO_TYPE_C_NAME as Subtype,\n        d.DOC_RECV_TIME as Created,\n        d.RECV_BY_USER_ID_NAME as Author,\n        d.DOC_STAT_C_NAME as Status\n    FROM DOC_INFORMATION d\n    JOIN PATIENT_DOCS pd ON d.DOC_INFO_ID = pd.DOC_INFO_ID\n    WHERE pd.PAT_ID = 'Z7004242'\n)\nSELECT \n    Doc_Type,\n    COALESCE(Subtype, 'Unspecified') as Document_Subtype,\n    SUBSTR(Created, 1, 10) as Date,\n    Author,\n    Status\nFROM PatientDocs\nWHERE Created IS NOT NULL\nORDER BY Created DESC\nLIMIT 15;",
    "description": "Track all documentation types for a specific patient chronologically",
    "chapterId": "10-09-capturing-the-clinical-narrative-through-documentation",
    "index": 2
  },
  {
    "id": "10-09-capturing-the-clinical-narrative-through-documentation-3",
    "originalQuery": "SELECT \n    h.NOTE_ID,\n    h.NOTE_TYPE_NOADD_C_NAME as Type,\n    COUNT(hp.LINE) as Total_Lines,\n    GROUP_CONCAT(\n        CASE \n            WHEN hp.LINE <= 2 THEN SUBSTR(hp.NOTE_TEXT, 1, 100) || '...'\n            ELSE NULL\n        END, \n        ' | '\n    ) as Text_Preview\nFROM HNO_INFO h\nJOIN HNO_PLAIN_TEXT hp ON h.NOTE_ID = hp.NOTE_ID\nWHERE h.NOTE_ID = '1473625808'\nGROUP BY h.NOTE_ID, h.NOTE_TYPE_NOADD_C_NAME;",
    "description": "Retrieve and reconstruct multi-line note text",
    "chapterId": "10-09-capturing-the-clinical-narrative-through-documentation",
    "index": 3
  },
  {
    "id": "10-09-capturing-the-clinical-narrative-through-documentation-4",
    "originalQuery": "SELECT \n    DOC_INFO_TYPE_C_NAME as Document_Type,\n    COUNT(*) as Count,\n    SUM(CASE WHEN IS_SCANNED_YN = 'Y' THEN 1 ELSE 0 END) as Scanned,\n    COUNT(DISTINCT SUBSTR(DOC_RECV_TIME, 1, 10)) as Unique_Days\nFROM DOC_INFORMATION\nWHERE DOC_INFO_TYPE_C_NAME IS NOT NULL\nGROUP BY DOC_INFO_TYPE_C_NAME\nORDER BY Count DESC;",
    "description": "Analyze external document types and sources",
    "chapterId": "10-09-capturing-the-clinical-narrative-through-documentation",
    "index": 4
  },
  {
    "id": "10-09-capturing-the-clinical-narrative-through-documentation-5",
    "originalQuery": "WITH DocFlow AS (\n    SELECT \n        d.DOC_INFO_ID,\n        d.DOC_DESCR as Description,\n        d.DOC_RECV_TIME as Received,\n        CASE \n            WHEN pd.PAT_ID IS NOT NULL THEN 'Linked to Patient'\n            ELSE 'Unlinked'\n        END as Patient_Status,\n        CASE \n            WHEN ped.PAT_ENC_CSN_ID IS NOT NULL THEN 'Linked to Encounter'\n            ELSE 'No Encounter Link'\n        END as Encounter_Status\n    FROM DOC_INFORMATION d\n    LEFT JOIN PATIENT_DOCS pd ON d.DOC_INFO_ID = pd.DOC_INFO_ID\n    LEFT JOIN PAT_ENC_DOCS ped ON d.DOC_INFO_ID = ped.DOC_INFO_ID\n)\nSELECT \n    Patient_Status,\n    Encounter_Status,\n    COUNT(*) as Document_Count\nFROM DocFlow\nGROUP BY Patient_Status, Encounter_Status\nORDER BY Document_Count DESC;",
    "description": "Trace document lifecycle from receipt to patient association",
    "chapterId": "10-09-capturing-the-clinical-narrative-through-documentation",
    "index": 5
  },
  {
    "id": "10-09-capturing-the-clinical-narrative-through-documentation-6",
    "originalQuery": "SELECT \n    h.UNSIGNED_YN as Unsigned_Flag,\n    COUNT(DISTINCT h.NOTE_ID) as Note_Count,\n    COUNT(DISTINCT ne.COSIGNUSER_ID) as Notes_With_Cosigner,\n    COUNT(DISTINCT h.ENTRY_USER_ID) as Unique_Authors\nFROM HNO_INFO h\nLEFT JOIN NOTE_ENC_INFO ne ON h.NOTE_ID = ne.NOTE_ID\nGROUP BY h.UNSIGNED_YN;",
    "description": "Analyze note signature and co-signature patterns",
    "chapterId": "10-09-capturing-the-clinical-narrative-through-documentation",
    "index": 6
  },
  {
    "id": "10-09-capturing-the-clinical-narrative-through-documentation-7",
    "originalQuery": "WITH CrossDomainLinks AS (\n    SELECT \n        'Orders' as Link_Type,\n        COUNT(DISTINCT NOTE_ID) as Linked_Notes,\n        COUNT(*) as Total_Links\n    FROM HNO_ORDERS\n    \n    UNION ALL\n    \n    SELECT \n        'Accounts' as Link_Type,\n        COUNT(DISTINCT NOTE_ID) as Linked_Notes,\n        COUNT(*) as Total_Links\n    FROM NOTES_ACCT\n)\nSELECT \n    Link_Type,\n    Linked_Notes,\n    Total_Links,\n    ROUND(Total_Links * 1.0 / Linked_Notes, 1) as Avg_Links_Per_Note\nFROM CrossDomainLinks\nWHERE Linked_Notes > 0;",
    "description": "Explore how notes link to other clinical domains",
    "chapterId": "10-09-capturing-the-clinical-narrative-through-documentation",
    "index": 7
  },
  {
    "id": "10-09-capturing-the-clinical-narrative-through-documentation-8",
    "originalQuery": "SELECT \n    SUBSTR(DOC_RECV_TIME, 1, 7) as Month,\n    COUNT(*) as ROI_Authorizations,\n    COUNT(DISTINCT pd.PAT_ID) as Unique_Patients,\n    GROUP_CONCAT(COALESCE(DOC_DESCR, 'No description'), '; ') as Descriptions\nFROM DOC_INFORMATION d\nJOIN PATIENT_DOCS pd ON d.DOC_INFO_ID = pd.DOC_INFO_ID\nWHERE DOC_INFO_TYPE_C_NAME = 'HIM ROI Authorization'\nGROUP BY Month\nORDER BY Month DESC;\n</example_query>\n\nROI documents show:\n- MyChart-initiated requests\n- Formal release authorizations\n- Audit trail of information sharing\n\n### Understanding Addendum Patterns\n\nMedical documentation requires immutability with corrections via addenda:\n\n<example-query description=\"Check for addendum relationships in notes\">\nSELECT \n    CASE \n        WHEN ADDENDUM_PARENT_CSN IS NOT NULL THEN 'Addendum'\n        ELSE 'Original Note'\n    END as Note_Category,\n    COUNT(*) as Count,\n    COUNT(DISTINCT NOTE_TYPE_NOADD_C_NAME) as Note_Types\nFROM HNO_INFO\nGROUP BY Note_Category;\n</example_query>\n\nWhile our sample doesn't show active addenda, the ADDENDUM_PARENT_CSN field enables linking amendments to original documentation.\n\n### Document Security and Sensitivity\n\nHealthcare documentation requires careful access control:\n\n<example-query description=\"Analyze security and sensitivity flags in documentation\">\nSELECT \n    ne.IS_SENSITIVE_YN as Sensitive_Flag,\n    COUNT(DISTINCT ne.NOTE_ID) as Note_Count,\n    COUNT(DISTINCT h.NOTE_TYPE_NOADD_C_NAME) as Note_Types,\n    GROUP_CONCAT(DISTINCT h.NOTE_TYPE_NOADD_C_NAME, ', ') as Types\nFROM NOTE_ENC_INFO ne\nJOIN HNO_INFO h ON ne.NOTE_ID = h.NOTE_ID\nGROUP BY ne.IS_SENSITIVE_YN;",
    "description": "Track Release of Information authorization patterns",
    "chapterId": "10-09-capturing-the-clinical-narrative-through-documentation",
    "index": 8
  },
  {
    "id": "10-10-closing-care-gaps-through-preventive-health-tracking-0",
    "originalQuery": "SELECT \n    HM_PLAN_ID,\n    HM_PLAN_NAME as Topic,\n    CASE \n        WHEN HM_PLAN_NAME LIKE '%Vaccine%' THEN 'Immunization'\n        WHEN HM_PLAN_NAME LIKE '%Screening%' THEN 'Screening'\n        WHEN HM_PLAN_NAME LIKE '%Visit%' THEN 'Wellness Visit'\n        ELSE 'Other Prevention'\n    END as Category\nFROM HM_PLAN_INFO\nORDER BY Category, Topic;",
    "description": "Explore all available health maintenance topics and categorize them",
    "chapterId": "10-10-closing-care-gaps-through-preventive-health-tracking",
    "index": 0
  },
  {
    "id": "10-10-closing-care-gaps-through-preventive-health-tracking-1",
    "originalQuery": "SELECT \n    HM_STATUS_C_NAME as Status,\n    COUNT(*) as Occurrences,\n    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM HM_HISTORICAL_STATUS WHERE HM_STATUS_C_NAME IS NOT NULL), 2) as Percentage,\n    CASE HM_STATUS_C_NAME\n        WHEN 'Overdue' THEN 'Action needed'\n        WHEN 'Due On' THEN 'Due now'\n        WHEN 'Due Soon' THEN 'Coming due'\n        WHEN 'Not Due' THEN 'Up to date'\n        WHEN 'Completed' THEN 'Done'\n        WHEN 'Hidden' THEN 'Clinical only'\n        WHEN 'Aged Out' THEN 'Too old'\n        ELSE 'Other'\n    END as Meaning\nFROM HM_HISTORICAL_STATUS\nWHERE HM_STATUS_C_NAME IS NOT NULL\nGROUP BY HM_STATUS_C_NAME\nORDER BY \n    CASE HM_STATUS_C_NAME\n        WHEN 'Overdue' THEN 1\n        WHEN 'Due On' THEN 2\n        WHEN 'Due Soon' THEN 3\n        WHEN 'Not Due' THEN 4\n        WHEN 'Completed' THEN 5\n        ELSE 6\n    END;",
    "description": "Analyze the distribution of health maintenance statuses across all patients",
    "chapterId": "10-10-closing-care-gaps-through-preventive-health-tracking",
    "index": 1
  },
  {
    "id": "10-10-closing-care-gaps-through-preventive-health-tracking-2",
    "originalQuery": "SELECT \n    ps.ACTIVE_HM_PLAN_ID_HM_PLAN_NAME as Topic,\n    hs.HM_STATUS_C_NAME as Status,\n    SUBSTR(hs.NEXT_DUE_DATE, 1, 10) as Due_Date\nFROM PATIENT_HMT_STATUS ps\nLEFT JOIN HM_HISTORICAL_STATUS hs \n    ON ps.PAT_ID = hs.PAT_ID \n    AND ps.ACTIVE_HM_PLAN_ID = hs.HM_TOPIC_ID\nWHERE ps.PAT_ID = 'Z7004242'\n  AND hs.LINE = (SELECT MAX(LINE) FROM HM_HISTORICAL_STATUS \n                 WHERE PAT_ID = ps.PAT_ID \n                 AND HM_TOPIC_ID = ps.ACTIVE_HM_PLAN_ID)\nORDER BY Topic;",
    "description": "View current health maintenance status for a specific patient",
    "chapterId": "10-10-closing-care-gaps-through-preventive-health-tracking",
    "index": 2
  },
  {
    "id": "10-10-closing-care-gaps-through-preventive-health-tracking-3",
    "originalQuery": "SELECT \n    HM_COMP_TYPE_C_NAME as Completion_Source,\n    COUNT(*) as Total_Completions,\n    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM HM_HISTORY), 2) as Percentage,\n    MIN(SUBSTR(HM_COMP_UTC_DTTM, 1, 10)) as Earliest,\n    MAX(SUBSTR(HM_COMP_UTC_DTTM, 1, 10)) as Latest\nFROM HM_HISTORY\nGROUP BY HM_COMP_TYPE_C_NAME\nORDER BY Total_Completions DESC;",
    "description": "Analyze how health maintenance items get completed across the system",
    "chapterId": "10-10-closing-care-gaps-through-preventive-health-tracking",
    "index": 3
  },
  {
    "id": "10-10-closing-care-gaps-through-preventive-health-tracking-4",
    "originalQuery": "SELECT \n    DATE(HM_COMP_UTC_DTTM) as Completion_Date,\n    COUNT(*) as Immunizations_Given,\n    TIME(MIN(HM_COMP_UTC_DTTM)) as First_Time,\n    TIME(MAX(HM_COMP_UTC_DTTM)) as Last_Time,\n    CASE \n        WHEN COUNT(*) > 5 THEN 'Multiple vaccines batch'\n        WHEN COUNT(*) > 1 THEN CAST(COUNT(*) AS TEXT) || ' vaccines given'\n        ELSE 'Single vaccine'\n    END as Pattern\nFROM HM_HISTORY\nWHERE PAT_ID = 'Z7004242'\n  AND HM_COMP_TYPE_C_NAME = 'Immunization'\n  AND HM_COMP_UTC_DTTM IS NOT NULL\nGROUP BY DATE(HM_COMP_UTC_DTTM)\nORDER BY Completion_Date DESC\nLIMIT 10;",
    "description": "View recent immunization completions with timing details",
    "chapterId": "10-10-closing-care-gaps-through-preventive-health-tracking",
    "index": 4
  },
  {
    "id": "10-10-closing-care-gaps-through-preventive-health-tracking-5",
    "originalQuery": "WITH OverdueStats AS (\n    SELECT \n        hs.HM_TOPIC_ID_NAME as Topic,\n        COUNT(DISTINCT hs.PAT_ID) as Overdue_Patients\n    FROM HM_HISTORICAL_STATUS hs\n    WHERE hs.HM_STATUS_C_NAME = 'Overdue'\n      AND hs.HM_TOPIC_ID_NAME IS NOT NULL\n    GROUP BY hs.HM_TOPIC_ID_NAME\n),\nTotalStats AS (\n    SELECT \n        HM_TOPIC_ID_NAME as Topic,\n        COUNT(DISTINCT PAT_ID) as Total_Patients\n    FROM HM_HISTORICAL_STATUS\n    WHERE HM_TOPIC_ID_NAME IS NOT NULL\n    GROUP BY HM_TOPIC_ID_NAME\n)\nSELECT \n    os.Topic,\n    os.Overdue_Patients,\n    ts.Total_Patients,\n    ROUND(os.Overdue_Patients * 100.0 / ts.Total_Patients, 1) as Overdue_Rate\nFROM OverdueStats os\nJOIN TotalStats ts ON os.Topic = ts.Topic\nWHERE ts.Total_Patients >= 1\nORDER BY os.Overdue_Patients DESC\nLIMIT 10;",
    "description": "Identify the most common overdue preventive care items",
    "chapterId": "10-10-closing-care-gaps-through-preventive-health-tracking",
    "index": 5
  },
  {
    "id": "10-10-closing-care-gaps-through-preventive-health-tracking-6",
    "originalQuery": "SELECT \n    fi.HM_FORECAST_TOPIC_ID_NAME as Topic,\n    fi.EARLIEST_VALID_DATE as Forecast_Date,\n    ps.HMT_LAST_UPDATE_DT as Last_Updated,\n    CASE \n        WHEN fi.EARLIEST_VALID_DATE IS NULL THEN 'No forecast'\n        WHEN DATE(fi.EARLIEST_VALID_DATE) <= DATE('now') THEN 'Due now'\n        WHEN DATE(fi.EARLIEST_VALID_DATE) <= DATE('now', '+30 days') THEN 'Due within 30 days'\n        WHEN DATE(fi.EARLIEST_VALID_DATE) <= DATE('now', '+90 days') THEN 'Due within 90 days'\n        ELSE 'Due later'\n    END as Urgency\nFROM HM_FORECAST_INFO fi\nJOIN PATIENT_HMT_STATUS ps ON fi.PAT_ID = ps.PAT_ID\nWHERE fi.PAT_ID = 'Z7004242'\n  AND fi.EARLIEST_VALID_DATE IS NOT NULL\nORDER BY fi.EARLIEST_VALID_DATE;",
    "description": "Examine forecast calculations for upcoming preventive care",
    "chapterId": "10-10-closing-care-gaps-through-preventive-health-tracking",
    "index": 6
  },
  {
    "id": "10-10-closing-care-gaps-through-preventive-health-tracking-7",
    "originalQuery": "SELECT \n    HM_STATUS_C_NAME as Status,\n    COUNT(DISTINCT CASE \n        WHEN HM_TOPIC_ID_NAME LIKE '%HPV%' THEN PAT_ID \n    END) as HPV_Patients,\n    COUNT(DISTINCT CASE \n        WHEN HM_TOPIC_ID_NAME LIKE '%Zoster%' THEN PAT_ID \n    END) as Shingles_Patients,\n    COUNT(DISTINCT CASE \n        WHEN HM_TOPIC_ID_NAME LIKE '%RSV%' THEN PAT_ID \n    END) as RSV_Patients\nFROM HM_HISTORICAL_STATUS\nWHERE HM_STATUS_C_NAME IN ('Aged Out', 'Not Due', 'Due On', 'Overdue')\nGROUP BY HM_STATUS_C_NAME\nORDER BY \n    CASE HM_STATUS_C_NAME\n        WHEN 'Overdue' THEN 1\n        WHEN 'Due On' THEN 2\n        WHEN 'Not Due' THEN 3\n        WHEN 'Aged Out' THEN 4\n    END;",
    "description": "Analyze age-related patterns in health maintenance",
    "chapterId": "10-10-closing-care-gaps-through-preventive-health-tracking",
    "index": 7
  },
  {
    "id": "10-10-closing-care-gaps-through-preventive-health-tracking-8",
    "originalQuery": "SELECT \n    DATE(HM_COMP_UTC_DTTM) as Completion_Date,\n    COUNT(*) as Lab_Completions,\n    COUNT(DISTINCT PAT_ID) as Unique_Patients\nFROM HM_HISTORY\nWHERE HM_COMP_TYPE_C_NAME = 'Result Component'\n  AND HM_COMP_UTC_DTTM IS NOT NULL\nGROUP BY DATE(HM_COMP_UTC_DTTM)\nORDER BY Completion_Date DESC\nLIMIT 10;",
    "description": "Track how lab results satisfy screening requirements",
    "chapterId": "10-10-closing-care-gaps-through-preventive-health-tracking",
    "index": 8
  },
  {
    "id": "10-10-closing-care-gaps-through-preventive-health-tracking-9",
    "originalQuery": "WITH PatientPriority AS (\n    SELECT \n        hs.PAT_ID,\n        COUNT(DISTINCT hs.HM_TOPIC_ID) as Overdue_Items,\n        GROUP_CONCAT(DISTINCT \n            CASE \n                WHEN hs.HM_TOPIC_ID_NAME LIKE '%COVID%' THEN 'COVID'\n                WHEN hs.HM_TOPIC_ID_NAME LIKE '%Influenza%' THEN 'Flu'\n                ELSE SUBSTR(hs.HM_TOPIC_ID_NAME, 1, 15)\n            END, ', '\n        ) as Overdue_Services\n    FROM HM_HISTORICAL_STATUS hs\n    WHERE hs.HM_STATUS_C_NAME = 'Overdue'\n    GROUP BY hs.PAT_ID\n)\nSELECT \n    PAT_ID,\n    Overdue_Items,\n    Overdue_Services,\n    CASE \n        WHEN Overdue_Items >= 5 THEN '🔴 High Priority'\n        WHEN Overdue_Items >= 3 THEN '🟠 Medium Priority'\n        ELSE '🟡 Low Priority'\n    END as Outreach_Priority\nFROM PatientPriority\nORDER BY Overdue_Items DESC\nLIMIT 20;",
    "description": "Create prioritized outreach list for overdue patients",
    "chapterId": "10-10-closing-care-gaps-through-preventive-health-tracking",
    "index": 9
  }
]