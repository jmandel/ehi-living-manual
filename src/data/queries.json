[
  {
    "id": "00-01-understanding-ehi-and-the-cures-act-0",
    "originalQuery": "SELECT \n    COUNT(DISTINCT table_name) as total_tables,\n    COUNT(*) as total_columns,\n    SUM(CASE WHEN documentation IS NOT NULL THEN 1 ELSE 0 END) as documented_columns,\n    ROUND(100.0 * SUM(CASE WHEN documentation IS NOT NULL THEN 1 ELSE 0 END) / COUNT(*), 1) as documentation_rate\nFROM _metadata\nWHERE column_name IS NOT NULL",
    "description": "View the scope of EHI data available in our export",
    "chapterId": "00-01-understanding-ehi-and-the-cures-act",
    "index": 0
  },
  {
    "id": "00-02-the-ehi-playground-0",
    "originalQuery": "SELECT \n    PAT_ENC_CSN_ID,\n    PAT_ID,\n    CONTACT_DATE,\n    ENC_CLOSED_YN\nFROM pat_enc\nWHERE CONTACT_DATE IS NOT NULL\nORDER BY CONTACT_DATE DESC\nLIMIT 5;",
    "description": "Your first EHI query - see real patient encounters",
    "chapterId": "00-02-the-ehi-playground",
    "index": 0
  },
  {
    "id": "00-02-the-ehi-playground-1",
    "originalQuery": "SELECT \n    CONTACT_DATE,\n    -- Extract just the date part\n    SUBSTR(CONTACT_DATE, 1, 10) as date_only,\n    -- Count encounters by date\n    COUNT(*) as encounters_on_date\nFROM pat_enc\nWHERE CONTACT_DATE IS NOT NULL\nGROUP BY date_only\nORDER BY encounters_on_date DESC\nLIMIT 5;",
    "description": "Understanding Epic's date formats",
    "chapterId": "00-02-the-ehi-playground",
    "index": 1
  },
  {
    "id": "00-02-the-ehi-playground-2",
    "originalQuery": "SELECT \n    p.PAT_NAME,\n    p.BIRTH_DATE,\n    COUNT(e.PAT_ENC_CSN_ID) as total_encounters\nFROM PATIENT p\nLEFT JOIN pat_enc e ON p.PAT_ID = e.PAT_ID\nGROUP BY p.PAT_ID, p.PAT_NAME, p.BIRTH_DATE;",
    "description": "Pattern 1: Join patient data with encounters",
    "chapterId": "00-02-the-ehi-playground",
    "index": 2
  },
  {
    "id": "00-02-the-ehi-playground-3",
    "originalQuery": "SELECT \n    table_name,\n    column_name,\n    documentation\nFROM _metadata\nWHERE table_name = 'PATIENT'\n  AND column_name IN ('PAT_ID', 'PAT_MRN_ID', 'BIRTH_DATE')",
    "description": "Pattern 2: Find tables by keyword using metadata",
    "chapterId": "00-02-the-ehi-playground",
    "index": 3
  },
  {
    "id": "00-03-understanding-the-metadata-table-0",
    "originalQuery": "SELECT \n    table_name,\n    column_name,\n    SUBSTR(documentation, 1, 100) || '...' as documentation_preview\nFROM _metadata\nWHERE table_name = 'PATIENT' \n  AND column_name = 'PAT_ID'\nLIMIT 1;",
    "description": "Your first look at the _metadata table structure",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 0
  },
  {
    "id": "00-03-understanding-the-metadata-table-1",
    "originalQuery": "SELECT \n    COUNT(DISTINCT table_name) as documented_tables,\n    COUNT(*) as total_documentation_entries,\n    COUNT(CASE WHEN column_name IS NULL THEN 1 END) as table_descriptions,\n    COUNT(CASE WHEN column_name IS NOT NULL THEN 1 END) as column_descriptions\nFROM _metadata;",
    "description": "Understanding the _metadata structure",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 1
  },
  {
    "id": "00-03-understanding-the-metadata-table-2",
    "originalQuery": "SELECT \n    table_name,\n    SUBSTR(documentation, 1, 150) as table_purpose\nFROM _metadata\nWHERE column_name IS NULL\n  AND table_name IN ('PATIENT', 'PAT_ENC', 'ORDER_MED', 'CLARITY_EDG')\nORDER BY table_name;",
    "description": "Discover what key tables do",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 2
  },
  {
    "id": "00-03-understanding-the-metadata-table-3",
    "originalQuery": "-- Replace 'PAT_ENC' with any table name\nWITH table_info AS (\n    SELECT name as column_name, cid as column_order\n    FROM pragma_table_info('PAT_ENC')\n)\nSELECT \n    ti.column_name,\n    COALESCE(m.documentation, '(No documentation available)') as description\nFROM table_info ti\nLEFT JOIN _metadata m \n    ON m.table_name = 'PAT_ENC' \n    AND m.column_name = ti.column_name\nORDER BY ti.column_order;",
    "description": "Get full documentation for any table",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 3
  },
  {
    "id": "00-03-understanding-the-metadata-table-4",
    "originalQuery": "SELECT DISTINCT\n    table_name,\n    COUNT(*) as relevant_columns\nFROM _metadata\nWHERE LOWER(documentation) LIKE '%diagnos%'\n  AND column_name IS NOT NULL\nGROUP BY table_name\nORDER BY relevant_columns DESC\nLIMIT 10;",
    "description": "Find all tables related to diagnoses",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 4
  },
  {
    "id": "00-03-understanding-the-metadata-table-5",
    "originalQuery": "SELECT \n    table_name,\n    column_name,\n    SUBSTR(documentation, 1, 100) as description\nFROM _metadata\nWHERE column_name LIKE '%ADMSN%' \n   OR (LOWER(documentation) LIKE '%admission%' AND column_name LIKE '%_DT%')\nORDER BY table_name, column_name\nLIMIT 10;",
    "description": "Find all date/time columns related to admission",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 5
  },
  {
    "id": "00-03-understanding-the-metadata-table-6",
    "originalQuery": "SELECT \n    table_name,\n    COUNT(*) as patient_linked_columns\nFROM _metadata\nWHERE column_name = 'PAT_ID'\n  AND table_name != 'PATIENT'\nGROUP BY table_name\nORDER BY table_name\nLIMIT 15;",
    "description": "Find foreign key relationships for patients",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 6
  },
  {
    "id": "00-03-understanding-the-metadata-table-7",
    "originalQuery": "WITH all_tables AS (\n    SELECT name as table_name\n    FROM sqlite_master\n    WHERE type = 'table' AND name != '_metadata'\n),\ndocumented_tables AS (\n    SELECT DISTINCT table_name\n    FROM _metadata\n)\nSELECT \n    (SELECT COUNT(*) FROM all_tables) as total_tables,\n    (SELECT COUNT(*) FROM documented_tables) as documented_tables,\n    ROUND(\n        100.0 * (SELECT COUNT(*) FROM documented_tables) / \n        (SELECT COUNT(*) FROM all_tables), \n        1\n    ) as documentation_percentage,\n    -- List any undocumented tables\n    GROUP_CONCAT(\n        CASE \n            WHEN at.table_name NOT IN (SELECT table_name FROM documented_tables)\n            THEN at.table_name\n        END\n    ) as undocumented_tables\nFROM all_tables at;",
    "description": "Analyze metadata completeness",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 7
  },
  {
    "id": "00-03-understanding-the-metadata-table-8",
    "originalQuery": "SELECT documentation \nFROM _metadata \nWHERE table_name = 'PAT_ENC' AND column_name = 'CONTACT_DATE';",
    "description": "First, get the documentation",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 8
  },
  {
    "id": "00-03-understanding-the-metadata-table-9",
    "originalQuery": "SELECT \n    CONTACT_DATE,\n    COUNT(*) as encounters_on_date\nFROM PAT_ENC\nWHERE CONTACT_DATE IS NOT NULL\nGROUP BY CONTACT_DATE\nORDER BY encounters_on_date DESC\nLIMIT 5;",
    "description": "Then see actual data patterns",
    "chapterId": "00-03-understanding-the-metadata-table",
    "index": 9
  },
  {
    "id": "00-04-epic-data-architecture-0",
    "originalQuery": "-- Count tables that use the LINE pattern\nSELECT COUNT(DISTINCT table_name) as tables_with_line_column\nFROM _metadata\nWHERE column_name = 'LINE';",
    "description": "See evidence of hierarchical data in relational form",
    "chapterId": "00-04-epic-data-architecture",
    "index": 0
  },
  {
    "id": "00-04-epic-data-architecture-1",
    "originalQuery": "SELECT \n    ACCOUNT_ID,\n    LINE,\n    LETTER_NAME as contact_name,\n    CONTACT_STATUS_C_NAME,\n    CONTACT_DATE\nFROM ACCOUNT_CONTACT\nWHERE ACCOUNT_ID IN (\n    SELECT ACCOUNT_ID \n    FROM ACCOUNT_CONTACT \n    GROUP BY ACCOUNT_ID \n    HAVING COUNT(*) > 1\n)\nORDER BY ACCOUNT_ID, LINE\nLIMIT 10;",
    "description": "Observe hierarchical patterns in account contacts",
    "chapterId": "00-04-epic-data-architecture",
    "index": 1
  },
  {
    "id": "00-04-epic-data-architecture-2",
    "originalQuery": "-- Epic must handle massive transaction volumes\nSELECT \n    'Orders' as data_type, COUNT(*) as record_count FROM ORDER_PROC\nUNION ALL\nSELECT 'Results', COUNT(*) FROM ORDER_RESULTS\nUNION ALL\nSELECT 'Medications', COUNT(*) FROM ORDER_MED\nUNION ALL\nSELECT 'Encounters', COUNT(*) FROM PAT_ENC\nORDER BY record_count DESC;",
    "description": "See the scale that demands this architecture",
    "chapterId": "00-04-epic-data-architecture",
    "index": 2
  },
  {
    "id": "00-04-epic-data-architecture-3",
    "originalQuery": "-- Epic stores dates as days since 12/31/1840\nSELECT \n    column_name,\n    COUNT(DISTINCT table_name) as table_count,\n    GROUP_CONCAT(DISTINCT table_name) as appears_in_tables\nFROM _metadata\nWHERE column_name LIKE '%_REAL'\nGROUP BY column_name\nORDER BY table_count DESC\nLIMIT 5;",
    "description": "Discover Epic's internal date system",
    "chapterId": "00-04-epic-data-architecture",
    "index": 3
  },
  {
    "id": "00-04-epic-data-architecture-4",
    "originalQuery": "-- Find tables that share the same base record structure\nWITH base_tables AS (\n    SELECT DISTINCT \n        SUBSTR(table_name, 1, LENGTH(table_name) - 2) as base_name,\n        table_name\n    FROM _metadata\n    WHERE table_name LIKE '%\\_2' ESCAPE '\\'\n       OR table_name LIKE '%\\_3' ESCAPE '\\'\n       OR table_name LIKE '%\\_4' ESCAPE '\\'\n)\nSELECT \n    base_name,\n    GROUP_CONCAT(table_name, ', ') as related_tables,\n    COUNT(*) as table_count\nFROM base_tables\nGROUP BY base_name\nHAVING table_count > 1\nORDER BY table_count DESC\nLIMIT 10;",
    "description": "Trace hierarchical relationships through shared IDs",
    "chapterId": "00-04-epic-data-architecture",
    "index": 4
  },
  {
    "id": "00-04-epic-data-architecture-5",
    "originalQuery": "SELECT \n    SUBSTR(table_name, 1, 3) as prefix,\n    COUNT(*) as table_count,\n    GROUP_CONCAT(DISTINCT table_name) as example_tables\nFROM (\n    SELECT table_name\n    FROM _metadata\n    WHERE column_name IS NULL\n      AND table_name NOT LIKE '\\_%' ESCAPE '\\'\n    ORDER BY table_name\n    LIMIT 200\n)\nGROUP BY SUBSTR(table_name, 1, 3)\nHAVING COUNT(*) >= 3\nORDER BY table_count DESC\nLIMIT 10;",
    "description": "Common Epic master file prefixes",
    "chapterId": "00-04-epic-data-architecture",
    "index": 5
  },
  {
    "id": "01-01-modeling-a-simple-list-id-line-pattern-0",
    "originalQuery": "SELECT COUNT(DISTINCT table_name) as tables_with_line_column\nFROM _metadata\nWHERE column_name = 'LINE';",
    "description": "Discover the prevalence of the LINE pattern",
    "chapterId": "01-01-modeling-a-simple-list-id-line-pattern",
    "index": 0
  },
  {
    "id": "01-01-modeling-a-simple-list-id-line-pattern-1",
    "originalQuery": "SELECT \n    PAT_ENC_CSN_ID,\n    LINE,\n    DX_ID,\n    PRIMARY_DX_YN,\n    ANNOTATION\nFROM PAT_ENC_DX\nWHERE PAT_ENC_CSN_ID = 991225117\nORDER BY LINE;",
    "description": "Examine the (ID, LINE) pattern in encounter diagnoses",
    "chapterId": "01-01-modeling-a-simple-list-id-line-pattern",
    "index": 1
  },
  {
    "id": "01-01-modeling-a-simple-list-id-line-pattern-2",
    "originalQuery": "SELECT \n    PAT_ENC_CSN_ID,\n    LINE,\n    DX_ID,\n    PRIMARY_DX_YN,\n    CASE \n        WHEN PRIMARY_DX_YN = 'Y' AND LINE > 1 \n        THEN '⚠️ Primary diagnosis not in LINE 1!'\n        ELSE 'Normal'\n    END as note\nFROM PAT_ENC_DX\nWHERE PRIMARY_DX_YN = 'Y' \n  AND LINE > 1\nLIMIT 5;",
    "description": "Proof that LINE does not indicate priority",
    "chapterId": "01-01-modeling-a-simple-list-id-line-pattern",
    "index": 2
  },
  {
    "id": "01-01-modeling-a-simple-list-id-line-pattern-3",
    "originalQuery": "WITH line_analysis AS (\n    SELECT \n        table_name,\n        MIN(line) as min_line,\n        MAX(line) as max_line,\n        COUNT(DISTINCT line) as distinct_lines\n    FROM (\n        SELECT 'PAT_ENC_DX' as table_name, PAT_ENC_CSN_ID as id, LINE \n        FROM PAT_ENC_DX\n        UNION ALL\n        SELECT 'ALLERGY_REACTIONS', ALLERGY_ID, LINE \n        FROM ALLERGY_REACTIONS\n        UNION ALL\n        SELECT 'PAT_ADDRESS', PAT_ID, LINE \n        FROM PAT_ADDRESS\n    )\n    GROUP BY table_name, id\n)\nSELECT \n    table_name,\n    MIN(min_line) as always_starts_at,\n    MAX(max_line) as can_go_up_to,\n    COUNT(*) as parent_records\nFROM line_analysis\nGROUP BY table_name;",
    "description": "Verify LINE numbering always starts at 1",
    "chapterId": "01-01-modeling-a-simple-list-id-line-pattern",
    "index": 3
  },
  {
    "id": "01-01-modeling-a-simple-list-id-line-pattern-4",
    "originalQuery": "SELECT \n    table_name,\n    SUBSTR(documentation, 1, 100) || '...' as table_purpose\nFROM _metadata\nWHERE column_name IS NULL\n  AND table_name IN (\n    SELECT DISTINCT table_name \n    FROM _metadata \n    WHERE column_name = 'LINE'\n  )\nORDER BY table_name\nLIMIT 10;",
    "description": "See the variety of data using the (ID, LINE) pattern",
    "chapterId": "01-01-modeling-a-simple-list-id-line-pattern",
    "index": 4
  },
  {
    "id": "01-01-modeling-a-simple-list-id-line-pattern-5",
    "originalQuery": "SELECT \n    PAT_ENC_CSN_ID,\n    COUNT(*) as diagnosis_count,\n    MAX(LINE) as max_line_number,\n    COUNT(CASE WHEN PRIMARY_DX_YN = 'Y' THEN 1 END) as primary_dx_count\nFROM PAT_ENC_DX\nGROUP BY PAT_ENC_CSN_ID\nHAVING COUNT(*) > 2\nLIMIT 5;",
    "description": "Count items per parent correctly",
    "chapterId": "01-01-modeling-a-simple-list-id-line-pattern",
    "index": 5
  },
  {
    "id": "01-02-modeling-a-grouped-list-id-group-line-value-line-pattern-0",
    "originalQuery": "SELECT \n    table_name,\n    COUNT(*) as column_count\nFROM _metadata\nWHERE column_name IN ('GROUP_LINE', 'VALUE_LINE')\nGROUP BY table_name\nHAVING COUNT(*) = 2\nORDER BY table_name;",
    "description": "Discover tables using the grouped list pattern",
    "chapterId": "01-02-modeling-a-grouped-list-id-group-line-value-line-pattern",
    "index": 0
  },
  {
    "id": "01-02-modeling-a-grouped-list-id-group-line-value-line-pattern-1",
    "originalQuery": "-- During an encounter, providers review different aspects of patient history\n-- Each review session (GROUP_LINE) covers multiple history types (VALUE_LINE)\nSELECT \n    tp.GROUP_LINE as review_session,\n    tp.VALUE_LINE as item_number,\n    tp.HX_REVIEWED_HEADER as review_location,\n    ty.HX_REVIEWED_TYPE_C_NAME as history_type\nFROM PAT_HX_REV_TOPIC tp\nJOIN PAT_HX_REV_TYPE ty \n    ON tp.PAT_ENC_CSN_ID = ty.PAT_ENC_CSN_ID \n    AND tp.GROUP_LINE = ty.GROUP_LINE \n    AND tp.VALUE_LINE = ty.VALUE_LINE\nWHERE tp.PAT_ENC_CSN_ID = 724623985 \n    AND tp.GROUP_LINE IN (6,7)\nORDER BY tp.GROUP_LINE, tp.VALUE_LINE;",
    "description": "See the grouped list pattern in action",
    "chapterId": "01-02-modeling-a-grouped-list-id-group-line-value-line-pattern",
    "index": 1
  },
  {
    "id": "01-02-modeling-a-grouped-list-id-group-line-value-line-pattern-2",
    "originalQuery": "SELECT \n    name as column_name,\n    CASE \n        WHEN name LIKE '%_ID' THEN 'Parent identifier'\n        WHEN name = 'GROUP_LINE' THEN 'Group sequence number'\n        WHEN name = 'VALUE_LINE' THEN 'Item sequence within group'\n        ELSE 'Data column'\n    END as column_role\nFROM pragma_table_info('PAT_HX_REV_TOPIC')\nORDER BY cid;",
    "description": "Examine the structure of a grouped list table",
    "chapterId": "01-02-modeling-a-grouped-list-id-group-line-value-line-pattern",
    "index": 2
  },
  {
    "id": "01-02-modeling-a-grouped-list-id-group-line-value-line-pattern-3",
    "originalQuery": "SELECT DISTINCT\n    m1.table_name,\n    SUBSTR(m1.documentation, 1, 80) || '...' as table_purpose\nFROM _metadata m1\nWHERE m1.column_name IS NULL\n  AND m1.table_name IN (\n    SELECT table_name\n    FROM _metadata\n    WHERE column_name IN ('GROUP_LINE', 'VALUE_LINE')\n    GROUP BY table_name\n    HAVING COUNT(*) = 2\n  )\nLIMIT 5;",
    "description": "Understand the variety of grouped list applications",
    "chapterId": "01-02-modeling-a-grouped-list-id-group-line-value-line-pattern",
    "index": 3
  },
  {
    "id": "01-02-modeling-a-grouped-list-id-group-line-value-line-pattern-4",
    "originalQuery": "-- Count history types reviewed in each session\nSELECT \n    PAT_ENC_CSN_ID,\n    GROUP_LINE as review_session,\n    COUNT(*) as history_types_reviewed,\n    GROUP_CONCAT(HX_REVIEWED_TYPE_C_NAME, ', ') as types_reviewed\nFROM PAT_HX_REV_TYPE\nWHERE PAT_ENC_CSN_ID = 724623985\nGROUP BY PAT_ENC_CSN_ID, GROUP_LINE\nHAVING COUNT(*) > 1\nORDER BY GROUP_LINE;",
    "description": "Aggregate values within groups",
    "chapterId": "01-02-modeling-a-grouped-list-id-group-line-value-line-pattern",
    "index": 4
  },
  {
    "id": "01-02-modeling-a-grouped-list-id-group-line-value-line-pattern-5",
    "originalQuery": "WITH line_rules AS (\n    SELECT \n        'ORDER_RPTD_SIG_TEXT' as table_name,\n        MIN(GROUP_LINE) as min_group,\n        MAX(GROUP_LINE) as max_group,\n        MIN(VALUE_LINE) as min_value,\n        MAX(VALUE_LINE) as max_value\n    FROM ORDER_RPTD_SIG_TEXT\n    \n    UNION ALL\n    \n    SELECT \n        'IMM_ADMIN_GROUPS',\n        MIN(GROUP_LINE),\n        MAX(GROUP_LINE),\n        MIN(VALUE_LINE),\n        MAX(VALUE_LINE)\n    FROM IMM_ADMIN_GROUPS\n)\nSELECT * FROM line_rules;",
    "description": "Verify the numbering rules for grouped lists",
    "chapterId": "01-02-modeling-a-grouped-list-id-group-line-value-line-pattern",
    "index": 5
  },
  {
    "id": "01-03-modeling-history-and-change-hx-pattern-0",
    "originalQuery": "SELECT \n    COUNT(*) as history_tables,\n    GROUP_CONCAT(REPLACE(name, '_HX', ''), ', ') as tracked_entities\nFROM sqlite_master \nWHERE type = 'table' \n  AND name LIKE '%_HX'\nORDER BY name;",
    "description": "Discover the scope of history tracking",
    "chapterId": "01-03-modeling-history-and-change-hx-pattern",
    "index": 0
  },
  {
    "id": "01-03-modeling-history-and-change-hx-pattern-1",
    "originalQuery": "-- First, see a current address\nSELECT \n    PAT_ID,\n    LINE,\n    ADDRESS\nFROM PAT_ADDRESS\nWHERE PAT_ID = 'Z7004242';",
    "description": "Compare a regular table to its history counterpart",
    "chapterId": "01-03-modeling-history-and-change-hx-pattern",
    "index": 1
  },
  {
    "id": "01-03-modeling-history-and-change-hx-pattern-2",
    "originalQuery": "-- Then see the address history with full details\nSELECT \n    PAT_ID,\n    LINE,\n    EFF_START_DATE,\n    EFF_END_DATE,\n    ADDR_HX_LINE1,\n    CITY_HX,\n    ZIP_HX\nFROM PAT_ADDR_CHNG_HX\nWHERE PAT_ID = 'Z7004242'\nORDER BY EFF_START_DATE;",
    "description": "See the address change history",
    "chapterId": "01-03-modeling-history-and-change-hx-pattern",
    "index": 2
  },
  {
    "id": "01-03-modeling-history-and-change-hx-pattern-3",
    "originalQuery": "SELECT \n    PAT_ID,\n    LINE,\n    EFF_START_DATE,\n    EFF_END_DATE,\n    CASE \n        WHEN EFF_END_DATE IS NULL OR EFF_END_DATE = '' \n        THEN '✓ Currently Active'\n        ELSE 'Historical'\n    END as record_status\nFROM PAT_ADDR_CHNG_HX\nORDER BY PAT_ID, EFF_START_DATE;",
    "description": "Understand the active record pattern",
    "chapterId": "01-03-modeling-history-and-change-hx-pattern",
    "index": 3
  },
  {
    "id": "01-03-modeling-history-and-change-hx-pattern-4",
    "originalQuery": "-- What was the patient's address on August 1, 2018?\nSELECT \n    PAT_ID,\n    ADDR_HX_LINE1,\n    CITY_HX,\n    ZIP_HX,\n    EFF_START_DATE,\n    EFF_END_DATE,\n    'Note: Sample data may not contain historical addresses' as note\nFROM PAT_ADDR_CHNG_HX\nLIMIT 5;",
    "description": "Find a patient's address on a specific date",
    "chapterId": "01-03-modeling-history-and-change-hx-pattern",
    "index": 4
  },
  {
    "id": "01-03-modeling-history-and-change-hx-pattern-5",
    "originalQuery": "SELECT \n    table_name,\n    COUNT(*) as column_count,\n    GROUP_CONCAT(column_name, ', ') as example_columns\nFROM _metadata\nWHERE table_name LIKE '%_HX'\n   OR table_name LIKE '%_HX_%'\n   OR table_name LIKE '%HIST%'\n   OR table_name LIKE '%CHNG%'\nGROUP BY table_name\nORDER BY table_name\nLIMIT 10;",
    "description": "Examine different types of historical data",
    "chapterId": "01-03-modeling-history-and-change-hx-pattern",
    "index": 5
  },
  {
    "id": "01-03-modeling-history-and-change-hx-pattern-6",
    "originalQuery": "SELECT \n    column_name,\n    COUNT(DISTINCT table_name) as table_count\nFROM _metadata\nWHERE column_name LIKE '%_INST%'\n   OR column_name LIKE '%_DTTM'\n   OR column_name LIKE '%_USER%'\nGROUP BY column_name\nORDER BY table_count DESC\nLIMIT 10;",
    "description": "Identify audit tracking columns",
    "chapterId": "01-03-modeling-history-and-change-hx-pattern",
    "index": 6
  },
  {
    "id": "01-03-modeling-history-and-change-hx-pattern-7",
    "originalQuery": "WITH hx_patterns AS (\n    SELECT \n        table_name,\n        CASE \n            WHEN column_name = 'LINE' THEN 'Has LINE'\n            WHEN column_name LIKE '%EFF_START%' THEN 'Has EFF_START'\n            WHEN column_name LIKE '%EFF_END%' THEN 'Has EFF_END'\n            WHEN column_name LIKE '%UPDATE%USER%' THEN 'Has UPDATE_USER'\n            ELSE NULL\n        END as pattern\n    FROM _metadata\n    WHERE table_name LIKE '%_HX'\n)\nSELECT \n    pattern,\n    COUNT(DISTINCT table_name) as table_count,\n    GROUP_CONCAT(DISTINCT table_name) as example_tables\nFROM hx_patterns\nWHERE pattern IS NOT NULL\nGROUP BY pattern\nORDER BY table_count DESC;",
    "description": "Analyze history table structures",
    "chapterId": "01-03-modeling-history-and-change-hx-pattern",
    "index": 7
  },
  {
    "id": "01-03-modeling-history-and-change-hx-pattern-8",
    "originalQuery": "WITH all_tables AS (\n    SELECT \n        name as table_name,\n        CASE \n            WHEN name LIKE '%_HX' THEN 'History Table'\n            WHEN EXISTS (\n                SELECT 1 FROM sqlite_master sm2\n                WHERE sm2.name = sm.name || '_HX'\n            ) THEN 'Has History Table'\n            ELSE 'No History Tracking'\n        END as history_status\n    FROM sqlite_master sm\n    WHERE type = 'table' AND name != '_metadata'\n)\nSELECT \n    history_status,\n    COUNT(*) as table_count\nFROM all_tables\nGROUP BY history_status\nORDER BY table_count DESC;",
    "description": "Compare tables with and without history tracking",
    "chapterId": "01-03-modeling-history-and-change-hx-pattern",
    "index": 8
  },
  {
    "id": "01-04-modeling-categories-c-name-pattern-0",
    "originalQuery": "-- Traditional Epic systems use ZC_ tables for lookups\nSELECT \n    COUNT(*) as zc_tables_found,\n    CASE \n        WHEN COUNT(*) = 0 THEN '❌ No ZC_ lookup tables in EHI export!'\n        ELSE 'Found lookup tables'\n    END as finding\nFROM sqlite_master \nWHERE type = 'table' \n  AND name LIKE 'ZC_%';",
    "description": "Prove that ZC_ lookup tables don't exist",
    "chapterId": "01-04-modeling-categories-c-name-pattern",
    "index": 0
  },
  {
    "id": "01-04-modeling-categories-c-name-pattern-1",
    "originalQuery": "SELECT \n    COUNT(DISTINCT column_name) as category_columns,\n    COUNT(DISTINCT table_name) as tables_with_categories\nFROM _metadata\nWHERE column_name LIKE '%_C_NAME%';",
    "description": "Discover the prevalence of the _C_NAME pattern",
    "chapterId": "01-04-modeling-categories-c-name-pattern",
    "index": 1
  },
  {
    "id": "01-04-modeling-categories-c-name-pattern-2",
    "originalQuery": "-- First, see the distinct values\nSELECT \n    APPT_STATUS_C_NAME as status,\n    COUNT(*) as encounter_count\nFROM pat_enc \nWHERE APPT_STATUS_C_NAME IS NOT NULL\nGROUP BY APPT_STATUS_C_NAME\nORDER BY encounter_count DESC;",
    "description": "See category values in practice",
    "chapterId": "01-04-modeling-categories-c-name-pattern",
    "index": 2
  },
  {
    "id": "01-04-modeling-categories-c-name-pattern-3",
    "originalQuery": "SELECT \n    table_name,\n    column_name,\n    SUBSTR(documentation, 1, 100) || '...' as shows_numeric_codes\nFROM _metadata\nWHERE column_name LIKE '%_C_NAME'\n  AND documentation LIKE '%1 -%'\nLIMIT 5;",
    "description": "Find columns where documentation reveals numeric codes",
    "chapterId": "01-04-modeling-categories-c-name-pattern",
    "index": 3
  },
  {
    "id": "01-04-modeling-categories-c-name-pattern-4",
    "originalQuery": "-- Are category values consistent?\nSELECT \n    APPT_STATUS_C_NAME,\n    UPPER(APPT_STATUS_C_NAME) as uppercase,\n    LOWER(APPT_STATUS_C_NAME) as lowercase,\n    COUNT(*) as occurrences\nFROM pat_enc\nWHERE APPT_STATUS_C_NAME IS NOT NULL\nGROUP BY APPT_STATUS_C_NAME\nORDER BY APPT_STATUS_C_NAME;",
    "description": "Check for case variations in category values",
    "chapterId": "01-04-modeling-categories-c-name-pattern",
    "index": 4
  },
  {
    "id": "01-04-modeling-categories-c-name-pattern-5",
    "originalQuery": "-- Find all unique statuses across different status columns\nWITH all_statuses AS (\n    SELECT DISTINCT 'APPT_STATUS' as status_type, APPT_STATUS_C_NAME as status_value \n    FROM pat_enc WHERE APPT_STATUS_C_NAME IS NOT NULL\n    \n    UNION\n    \n    SELECT DISTINCT 'PROBLEM_STATUS', PROBLEM_STATUS_C_NAME \n    FROM PROBLEM_LIST WHERE PROBLEM_STATUS_C_NAME IS NOT NULL\n)\nSELECT * FROM all_statuses\nORDER BY status_type, status_value;",
    "description": "Demonstrate lack of referential constraints",
    "chapterId": "01-04-modeling-categories-c-name-pattern",
    "index": 5
  },
  {
    "id": "01-04-modeling-categories-c-name-pattern-6",
    "originalQuery": "WITH category_types AS (\n    SELECT \n        SUBSTR(column_name, 1, INSTR(column_name, '_C_NAME') - 1) as base_name,\n        column_name,\n        table_name\n    FROM _metadata\n    WHERE column_name LIKE '%_C_NAME%'\n)\nSELECT \n    base_name,\n    COUNT(DISTINCT table_name) as table_count,\n    GROUP_CONCAT(DISTINCT table_name) as appears_in_tables\nFROM category_types\nGROUP BY base_name\nHAVING COUNT(DISTINCT table_name) > 3\nORDER BY table_count DESC\nLIMIT 10;",
    "description": "Analyze category naming patterns",
    "chapterId": "01-04-modeling-categories-c-name-pattern",
    "index": 6
  },
  {
    "id": "01-04-modeling-categories-c-name-pattern-7",
    "originalQuery": "SELECT \n    column_name,\n    table_name,\n    documentation\nFROM _metadata\nWHERE column_name LIKE '%_C'\n  AND column_name NOT IN (\n      SELECT REPLACE(column_name, '_NAME', '') \n      FROM _metadata \n      WHERE column_name LIKE '%_C_NAME%'\n  )\nLIMIT 10;",
    "description": "Investigate _C columns without _NAME",
    "chapterId": "01-04-modeling-categories-c-name-pattern",
    "index": 7
  },
  {
    "id": "01-04-modeling-categories-c-name-pattern-8",
    "originalQuery": "-- Build a reference of all appointment statuses\nSELECT DISTINCT \n    APPT_STATUS_C_NAME as status_name,\n    COUNT(*) as usage_count\nFROM PAT_ENC\nWHERE APPT_STATUS_C_NAME IS NOT NULL\nGROUP BY APPT_STATUS_C_NAME\nORDER BY usage_count DESC;",
    "description": "Create a reference list of valid values",
    "chapterId": "01-04-modeling-categories-c-name-pattern",
    "index": 8
  },
  {
    "id": "01-05-modeling-time-real-date-pattern-0",
    "originalQuery": "-- Multiple encounters on the same day\nSELECT \n    PAT_ENC_CSN_ID,\n    CONTACT_DATE,\n    PAT_ENC_DATE_REAL\nFROM pat_enc\nWHERE CONTACT_DATE LIKE '8/9/2018%'\nORDER BY PAT_ENC_DATE_REAL;",
    "description": "See why standard dates aren't enough",
    "chapterId": "01-05-modeling-time-real-date-pattern",
    "index": 0
  },
  {
    "id": "01-05-modeling-time-real-date-pattern-1",
    "originalQuery": "-- Calculate dates from _REAL values\nSELECT \n    PAT_ENC_DATE_REAL,\n    DATE('1840-12-31', '+' || CAST(PAT_ENC_DATE_REAL AS INT) || ' days') as calculated_date,\n    SUBSTR(CONTACT_DATE, 1, 10) as actual_date,\n    CASE \n        WHEN DATE('1840-12-31', '+' || CAST(PAT_ENC_DATE_REAL AS INT) || ' days') \n             = DATE(SUBSTR(CONTACT_DATE, 7, 4) || '-' || \n                    PRINTF('%02d', CAST(SUBSTR(CONTACT_DATE, 1, INSTR(CONTACT_DATE, '/') - 1) AS INT)) || '-' ||\n                    PRINTF('%02d', CAST(SUBSTR(CONTACT_DATE, INSTR(CONTACT_DATE, '/') + 1, 2) AS INT)))\n        THEN '✓ Match!'\n        ELSE '✗ Mismatch'\n    END as verification\nFROM pat_enc\nWHERE PAT_ENC_DATE_REAL IS NOT NULL\nLIMIT 5;",
    "description": "Verify the Epic epoch date",
    "chapterId": "01-05-modeling-time-real-date-pattern",
    "index": 1
  },
  {
    "id": "01-05-modeling-time-real-date-pattern-2",
    "originalQuery": "WITH real_analysis AS (\n    SELECT \n        PAT_ID,\n        CONTACT_DATE,\n        PAT_ENC_CSN_ID,\n        PAT_ENC_DATE_REAL,\n        CAST(PAT_ENC_DATE_REAL AS INT) as date_part,\n        ROUND((PAT_ENC_DATE_REAL - CAST(PAT_ENC_DATE_REAL AS INT)) * 100, 0) as sequence_part\n    FROM pat_enc\n    WHERE CONTACT_DATE LIKE '8/9/2018%'\n)\nSELECT \n    *,\n    'Encounter #' || (sequence_part + 1) as encounter_order\nFROM real_analysis\nORDER BY PAT_ENC_DATE_REAL;",
    "description": "Analyze decimal sequencing patterns",
    "chapterId": "01-05-modeling-time-real-date-pattern",
    "index": 2
  },
  {
    "id": "01-05-modeling-time-real-date-pattern-3",
    "originalQuery": "SELECT \n    column_name,\n    COUNT(DISTINCT table_name) as table_count,\n    GROUP_CONCAT(DISTINCT table_name) as appears_in_tables\nFROM _metadata\nWHERE column_name LIKE '%_REAL'\nGROUP BY column_name\nORDER BY table_count DESC",
    "description": "Discover all _REAL date columns",
    "chapterId": "01-05-modeling-time-real-date-pattern",
    "index": 3
  },
  {
    "id": "01-05-modeling-time-real-date-pattern-4",
    "originalQuery": "-- Create a scenario showing the problem\nWITH sorting_comparison AS (\n    SELECT \n        PAT_ENC_CSN_ID,\n        CONTACT_DATE,\n        PAT_ENC_DATE_REAL,\n        -- Different sorting approaches\n        ROW_NUMBER() OVER (ORDER BY CONTACT_DATE, PAT_ENC_CSN_ID) as sort_by_date_and_id,\n        ROW_NUMBER() OVER (ORDER BY PAT_ENC_DATE_REAL) as sort_by_real,\n        -- Check if they match\n        CASE \n            WHEN ROW_NUMBER() OVER (ORDER BY CONTACT_DATE, PAT_ENC_CSN_ID) = \n                 ROW_NUMBER() OVER (ORDER BY PAT_ENC_DATE_REAL)\n            THEN 'Same'\n            ELSE 'Different!'\n        END as sort_order_match\n    FROM pat_enc\n    WHERE CONTACT_DATE LIKE '8/9/2018%'\n)\nSELECT * FROM sorting_comparison;",
    "description": "Demonstrate why _REAL sorting is essential",
    "chapterId": "01-05-modeling-time-real-date-pattern",
    "index": 4
  },
  {
    "id": "01-05-modeling-time-real-date-pattern-5",
    "originalQuery": "-- Check for any duplicate _REAL values\nWITH duplicate_check AS (\n    SELECT \n        PAT_ID,\n        PAT_ENC_DATE_REAL,\n        COUNT(*) as occurrence_count\n    FROM pat_enc\n    WHERE PAT_ENC_DATE_REAL IS NOT NULL\n    GROUP BY PAT_ID, PAT_ENC_DATE_REAL\n    HAVING COUNT(*) > 1\n)\nSELECT \n    CASE \n        WHEN COUNT(*) = 0 THEN '✓ All _REAL values are unique per patient'\n        ELSE '✗ Found ' || COUNT(*) || ' duplicates'\n    END as uniqueness_check\nFROM duplicate_check;",
    "description": "Verify _REAL values are unique per patient",
    "chapterId": "01-05-modeling-time-real-date-pattern",
    "index": 5
  },
  {
    "id": "01-05-modeling-time-real-date-pattern-6",
    "originalQuery": "SELECT \n    column_name,\n    SUBSTR(documentation, 1, 150) as description\nFROM _metadata\nWHERE column_name LIKE '%_REAL'\nORDER BY column_name\nLIMIT 5;",
    "description": "Prove decimals aren't timestamps",
    "chapterId": "01-05-modeling-time-real-date-pattern",
    "index": 6
  },
  {
    "id": "01-06-other-common-patterns-0",
    "originalQuery": "WITH pattern_analysis AS (\n    SELECT \n        CASE\n            WHEN column_name LIKE '%_YN' THEN '_YN (Yes/No)'\n            WHEN column_name LIKE '%_ID_%NAME' THEN '_ID/_NAME pairs'\n            WHEN column_name LIKE '%_AMT' THEN '_AMT (Amounts)'\n            WHEN column_name LIKE '%_DTTM' THEN '_DTTM (DateTime)'\n            WHEN column_name LIKE '%_DT' THEN '_DT (Date)'\n            WHEN column_name LIKE '%_NUM' THEN '_NUM (Number)'\n            WHEN column_name LIKE '%_CSN' THEN '_CSN (Contact Serial)'\n            ELSE 'Other'\n        END as pattern_type,\n        column_name\n    FROM _metadata\n    WHERE column_name IS NOT NULL\n)\nSELECT \n    pattern_type,\n    COUNT(*) as occurrence_count\nFROM pattern_analysis\nWHERE pattern_type != 'Other'\nGROUP BY pattern_type\nORDER BY occurrence_count DESC",
    "description": "Discover the most common column patterns",
    "chapterId": "01-06-other-common-patterns",
    "index": 0
  },
  {
    "id": "01-06-other-common-patterns-1",
    "originalQuery": "-- Check valid values\nSELECT DISTINCT \n    PRIMARY_DX_YN as yn_value,\n    COUNT(*) as occurrences\nFROM PAT_ENC_DX\nGROUP BY PRIMARY_DX_YN\nORDER BY yn_value;\n\n-- See variety of boolean fields\nSELECT \n    column_name,\n    REPLACE(column_name, '_YN', '') as what_it_tracks\nFROM _metadata\nWHERE column_name LIKE '%_YN'\n  AND table_name = 'PATIENT'\nORDER BY column_name\nLIMIT 10",
    "description": "Understand the _YN boolean pattern",
    "chapterId": "01-06-other-common-patterns",
    "index": 1
  },
  {
    "id": "01-06-other-common-patterns-2",
    "originalQuery": "-- Find examples of paired columns\nSELECT \n    REPLACE(column_name, '_NAME', '') as base_column,\n    GROUP_CONCAT(column_name, ' + ') as paired_columns\nFROM _metadata\nWHERE table_name = 'PROBLEM_LIST'\n  AND (column_name LIKE '%USER_ID' OR column_name LIKE '%USER_ID_NAME')\nGROUP BY REPLACE(column_name, '_NAME', '')\nORDER BY base_column",
    "description": "Explore ID/NAME pairs",
    "chapterId": "01-06-other-common-patterns",
    "index": 2
  },
  {
    "id": "01-06-other-common-patterns-3",
    "originalQuery": "SELECT \n    PROBLEM_LIST_ID,\n    ENTRY_USER_ID,\n    ENTRY_USER_ID_NAME,\n    DESCRIPTION\nFROM PROBLEM_LIST\nWHERE ENTRY_USER_ID IS NOT NULL\nLIMIT 5;",
    "description": "See ID/NAME pairs in action",
    "chapterId": "01-06-other-common-patterns",
    "index": 3
  },
  {
    "id": "01-06-other-common-patterns-4",
    "originalQuery": "SELECT \n    SUBSTR(name, 1, LENGTH(name) - 2) as base_table,\n    GROUP_CONCAT(name, ', ') as all_parts,\n    COUNT(*) as table_count\nFROM sqlite_master\nWHERE type = 'table'\n  AND (name LIKE '%\\_2' ESCAPE '\\' \n       OR name LIKE '%\\_3' ESCAPE '\\' \n       OR name LIKE '%\\_4' ESCAPE '\\')\nGROUP BY base_table\nHAVING table_count >= 1\nORDER BY table_count DESC\nLIMIT 10;",
    "description": "Discover continuation tables",
    "chapterId": "01-06-other-common-patterns",
    "index": 4
  },
  {
    "id": "01-06-other-common-patterns-5",
    "originalQuery": "WITH date_patterns AS (\n    SELECT \n        CASE\n            WHEN column_name LIKE '%_DTTM' THEN 'DateTime (_DTTM)'\n            WHEN column_name LIKE '%_DT' AND column_name NOT LIKE '%_DTTM' THEN 'Date only (_DT)'\n            WHEN column_name LIKE '%_DATE' THEN 'Date (spelled out)'\n            WHEN column_name LIKE '%_TIME' THEN 'Time only (_TIME)'\n            WHEN column_name LIKE '%_TM' AND column_name NOT LIKE '%_DTTM' THEN 'Time (_TM)'\n        END as pattern,\n        column_name,\n        table_name\n    FROM _metadata\n    WHERE column_name LIKE '%_DT%' \n       OR column_name LIKE '%_DATE%'\n       OR column_name LIKE '%_TIME%'\n       OR column_name LIKE '%_TM'\n)\nSELECT \n    pattern,\n    COUNT(*) as column_count,\n    SUBSTR(GROUP_CONCAT(DISTINCT column_name), 1, 100) as examples\nFROM date_patterns\nWHERE pattern IS NOT NULL\nGROUP BY pattern\nORDER BY column_count DESC\nLIMIT 5",
    "description": "Analyze temporal column patterns",
    "chapterId": "01-06-other-common-patterns",
    "index": 5
  },
  {
    "id": "01-06-other-common-patterns-6",
    "originalQuery": "SELECT \n    table_name,\n    column_name,\n    SUBSTR(documentation, 1, 100) || '...' as description\nFROM _metadata\nWHERE column_name LIKE '%_AMT'\n  AND documentation LIKE '%dollar%' OR documentation LIKE '%amount%'\nORDER BY RANDOM()\nLIMIT 5",
    "description": "Explore financial amount columns",
    "chapterId": "01-06-other-common-patterns",
    "index": 6
  },
  {
    "id": "01-06-other-common-patterns-7",
    "originalQuery": "SELECT \n    column_name,\n    COUNT(DISTINCT table_name) as used_in_tables\nFROM _metadata\nWHERE column_name LIKE '%_CSN%'\nGROUP BY column_name\nORDER BY used_in_tables DESC\nLIMIT 10",
    "description": "Understand CSN usage",
    "chapterId": "01-06-other-common-patterns",
    "index": 7
  },
  {
    "id": "01-06-other-common-patterns-8",
    "originalQuery": "SELECT \n    -- ID/NAME pair\n    ENTRY_USER_ID,\n    ENTRY_USER_ID_NAME,\n    \n    -- _YN boolean\n    CHRONIC_YN,\n    \n    -- _C_NAME category\n    PROBLEM_STATUS_C_NAME,\n    \n    -- Standard date\n    DATE_OF_ENTRY,\n    \n    -- The actual problem\n    DESCRIPTION\n    \nFROM PROBLEM_LIST\nWHERE PROBLEM_LIST_ID IS NOT NULL\nLIMIT 5;",
    "description": "See all patterns working together",
    "chapterId": "01-06-other-common-patterns",
    "index": 8
  },
  {
    "id": "02-01-patient-identity-and-demographics-0",
    "originalQuery": "SELECT \n    PAT_ID,\n    PAT_MRN_ID,\n    PAT_NAME,\n    BIRTH_DATE,\n    SEX_C_NAME\nFROM PATIENT;",
    "description": "Explore the core patient record",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 0
  },
  {
    "id": "02-01-patient-identity-and-demographics-1",
    "originalQuery": "SELECT documentation\nFROM _metadata\nWHERE table_name = 'PATIENT' \n  AND column_name IS NULL",
    "description": "View the comprehensive patient master documentation",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 1
  },
  {
    "id": "02-01-patient-identity-and-demographics-2",
    "originalQuery": "SELECT \n    PAT_ID,\n    PAT_MRN_ID,\n    -- Extract the prefix patterns\n    SUBSTR(PAT_ID, 1, 1) as pat_id_prefix,\n    SUBSTR(PAT_MRN_ID, 1, 3) as mrn_prefix\nFROM PATIENT;",
    "description": "Compare internal and external patient identifiers",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 2
  },
  {
    "id": "02-01-patient-identity-and-demographics-3",
    "originalQuery": "SELECT \n    table_name,\n    COUNT(*) as tables_with_pat_id\nFROM _metadata\nWHERE column_name = 'PAT_ID'\n  AND table_name != 'PATIENT'\nGROUP BY table_name\nORDER BY table_name\nLIMIT 10",
    "description": "Prove PAT_ID is the universal foreign key",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 3
  },
  {
    "id": "02-01-patient-identity-and-demographics-4",
    "originalQuery": "SELECT \n    PAT_NAME,\n    PAT_FIRST_NAME,\n    PAT_MIDDLE_NAME,\n    PAT_LAST_NAME\nFROM PATIENT;",
    "description": "Examine the multiple name storage formats",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 4
  },
  {
    "id": "02-01-patient-identity-and-demographics-5",
    "originalQuery": "SELECT \n    p.PAT_NAME as primary_name,\n    a.LINE,\n    a.ALIAS as alternative_name\nFROM PATIENT p\nLEFT JOIN PATIENT_ALIAS a ON p.PAT_ID = a.PAT_ID\nORDER BY a.LINE;",
    "description": "Explore patient aliases and alternative names",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 5
  },
  {
    "id": "02-01-patient-identity-and-demographics-6",
    "originalQuery": "-- Race: Stored in separate table (supports multiple selections)\nSELECT \n    'Race' as data_type,\n    pr.LINE,\n    pr.PATIENT_RACE_C_NAME as value\nFROM PATIENT_RACE pr\nWHERE pr.PAT_ID = 'Z7004242'\n\nUNION ALL\n\n-- Ethnicity: Stored directly in PATIENT table (single selection)\nSELECT \n    'Ethnicity' as data_type,\n    1 as line,\n    p.ETHNIC_GROUP_C_NAME as value\nFROM PATIENT p\nWHERE p.PAT_ID = 'Z7004242'\nORDER BY data_type, line;",
    "description": "Compare race and ethnicity storage patterns",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 6
  },
  {
    "id": "02-01-patient-identity-and-demographics-7",
    "originalQuery": "-- Permanent address components in PATIENT table\nSELECT \n    'Permanent' as address_type,\n    CITY,\n    STATE_C_NAME,\n    ZIP,\n    COUNTY_C_NAME\nFROM PATIENT\nWHERE PAT_ID = 'Z7004242'\n\nUNION ALL\n\n-- Temporary address fields (if populated)\nSELECT \n    'Temporary' as address_type,\n    TMP_CITY,\n    TMP_STATE_C_NAME,\n    TMP_ZIP,\n    TMP_COUNTY_C_NAME\nFROM PATIENT\nWHERE PAT_ID = 'Z7004242' \n  AND TMP_CITY IS NOT NULL;",
    "description": "Understand the three-tier address system",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 7
  },
  {
    "id": "02-01-patient-identity-and-demographics-8",
    "originalQuery": "SELECT \n    p.CITY,\n    p.STATE_C_NAME,\n    p.ZIP,\n    pa.LINE,\n    pa.ADDRESS as street_line\nFROM PATIENT p\nLEFT JOIN PAT_ADDRESS pa ON p.PAT_ID = pa.PAT_ID\nORDER BY pa.LINE;",
    "description": "Get complete address with street lines",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 8
  },
  {
    "id": "02-01-patient-identity-and-demographics-9",
    "originalQuery": "-- NOTE: The sample patient may not have emergency contacts listed.\n-- This query is structurally correct for a production environment.\nSELECT \n    prl.NAME as Contact_Name,\n    pr.PAT_REL_RELATION_C_NAME as Relationship,\n    pr.PAT_REL_HOME_PHONE as Home_Phone,\n    pr.PAT_REL_MOBILE_PHNE as Mobile_Phone\nFROM PAT_RELATIONSHIPS pr\nJOIN PAT_RELATIONSHIP_LIST prl ON pr.PAT_REL_RLA_ID = prl.PAT_RELATIONSHIP_ID\nWHERE pr.PAT_ID = 'Z7004242'\n  AND pr.PAT_REL_NOTIFY_YN = 'Y'\nORDER BY pr.LINE;",
    "description": "View emergency contacts",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 9
  },
  {
    "id": "02-01-patient-identity-and-demographics-10",
    "originalQuery": "SELECT \n    LANGUAGE_C_NAME as primary_language,\n    LANG_CARE_C_NAME as care_language,\n    LANG_WRIT_C_NAME as written_language,\n    PREF_PCP_LANG_C_NAME as preferred_pcp_language\nFROM PATIENT;",
    "description": "Explore granular language preferences",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 10
  },
  {
    "id": "02-01-patient-identity-and-demographics-11",
    "originalQuery": "SELECT \n    'PATIENT' as table_name, COUNT(*) as column_count \nFROM pragma_table_info('PATIENT')\nUNION ALL\nSELECT \n    'PATIENT_2', COUNT(*) \nFROM pragma_table_info('PATIENT_2')\nUNION ALL\nSELECT \n    'PATIENT_3', COUNT(*) \nFROM pragma_table_info('PATIENT_3')\nORDER BY table_name;",
    "description": "Explore the continuation table pattern",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 11
  },
  {
    "id": "02-01-patient-identity-and-demographics-12",
    "originalQuery": "-- PATIENT_2: Birth details and citizenship\nSELECT \n    BIRTH_TM as birth_time,\n    IS_ADOPTED_YN,\n    CITIZENSHIP_C_NAME\nFROM PATIENT_2\nWHERE PAT_ID = 'Z7004242';",
    "description": "See specialized data in overflow tables",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 12
  },
  {
    "id": "02-01-patient-identity-and-demographics-13",
    "originalQuery": "SELECT \n    p.CUR_PCP_PROV_ID,\n    p.PREF_PCP_SEX_C_NAME,\n    p.PREF_PCP_SPEC_C_NAME,\n    p.PREF_PCP_LANG_C_NAME\nFROM PATIENT p\nWHERE p.PAT_ID = 'Z7004242';",
    "description": "Examine PCP assignment and preferences",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 13
  },
  {
    "id": "02-01-patient-identity-and-demographics-14",
    "originalQuery": "SELECT column_name\nFROM _metadata\nWHERE table_name = 'PATIENT'\n  AND (LOWER(column_name) LIKE '%gender%' \n       OR LOWER(column_name) LIKE '%sex%')\nORDER BY column_name;",
    "description": "Confirm absence of gender identity fields",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 14
  },
  {
    "id": "02-01-patient-identity-and-demographics-15",
    "originalQuery": "SELECT \n    'No merge tracking tables found' as result,\n    COUNT(*) as tables_checked\nFROM sqlite_master \nWHERE type = 'table' \n  AND (name LIKE '%MERGE%' OR name LIKE '%DUPL%');",
    "description": "Search for merge tracking tables",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 15
  },
  {
    "id": "02-01-patient-identity-and-demographics-16",
    "originalQuery": "SELECT \n    p2.RECORD_TYPE_6_C_NAME\nFROM PATIENT_2 p2\nWHERE p2.PAT_ID = 'Z7004242';",
    "description": "Check for test patient identification",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 16
  },
  {
    "id": "02-01-patient-identity-and-demographics-17",
    "originalQuery": "WITH patient_summary AS (\n    SELECT \n        p.PAT_ID,\n        p.PAT_MRN_ID,\n        p.PAT_NAME,\n        p.BIRTH_DATE,\n        -- Calculate age\n        CAST((julianday('now') - julianday(SUBSTR(p.BIRTH_DATE, 7, 4) || '-' || \n             PRINTF('%02d', CAST(SUBSTR(p.BIRTH_DATE, 1, INSTR(p.BIRTH_DATE, '/') - 1) AS INT)) || '-' ||\n             PRINTF('%02d', CAST(SUBSTR(p.BIRTH_DATE, INSTR(p.BIRTH_DATE, '/') + 1, 2) AS INT)))) / 365.25 AS INT) as age,\n        p.SEX_C_NAME,\n        p.ETHNIC_GROUP_C_NAME,\n        p.LANGUAGE_C_NAME,\n        p.CUR_PCP_PROV_ID\n    FROM PATIENT p\n)\nSELECT \n    ps.*,\n    -- Add race (concatenated if multiple)\n    GROUP_CONCAT(pr.PATIENT_RACE_C_NAME) as races,\n    -- Add address\n    pa.ADDRESS as street_address,\n    p.CITY || ', ' || p.STATE_C_NAME || ' ' || p.ZIP as city_state_zip\nFROM patient_summary ps\nJOIN PATIENT p ON ps.PAT_ID = p.PAT_ID\nLEFT JOIN PATIENT_RACE pr ON ps.PAT_ID = pr.PAT_ID\nLEFT JOIN PAT_ADDRESS pa ON ps.PAT_ID = pa.PAT_ID AND pa.LINE = 1\nGROUP BY ps.PAT_ID;",
    "description": "Create a complete patient demographic summary",
    "chapterId": "02-01-patient-identity-and-demographics",
    "index": 17
  },
  {
    "id": "02-02-encounters-and-patient-movement-0",
    "originalQuery": "SELECT \n    pe.PAT_ENC_CSN_ID as CSN,\n    SUBSTR(pe.CONTACT_DATE, 1, 10) as Visit_Date,\n    dep.DEPARTMENT_NAME as Department,\n    ser.PROV_NAME as Provider,\n    pe.APPT_STATUS_C_NAME as Status\nFROM PAT_ENC pe\nLEFT JOIN CLARITY_DEP dep ON pe.DEPARTMENT_ID = dep.DEPARTMENT_ID\nLEFT JOIN CLARITY_SER ser ON pe.VISIT_PROV_ID = ser.PROV_ID\nWHERE pe.PAT_ID = 'Z7004242'\nORDER BY pe.CONTACT_DATE DESC\nLIMIT 10;",
    "description": "View recent patient encounters",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 0
  },
  {
    "id": "02-02-encounters-and-patient-movement-1",
    "originalQuery": "SELECT \n    COUNT(*) as total_encounters,\n    COUNT(DISTINCT PAT_ENC_CSN_ID) as unique_csns,\n    CASE \n        WHEN COUNT(*) = COUNT(DISTINCT PAT_ENC_CSN_ID) \n        THEN 'CSNs are unique (primary key)' \n        ELSE 'CSNs are not unique' \n    END as verification\nFROM PAT_ENC;",
    "description": "Verify CSN uniqueness and its role as a primary key",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 1
  },
  {
    "id": "02-02-encounters-and-patient-movement-2",
    "originalQuery": "SELECT \n    PAT_ID,\n    CONTACT_DATE,\n    PAT_ENC_DATE_REAL,\n    -- Extract the sequence number\n    ROUND((PAT_ENC_DATE_REAL - CAST(PAT_ENC_DATE_REAL AS INT)) * 100, 0) + 1 as encounter_sequence\nFROM PAT_ENC\nWHERE CONTACT_DATE = '9/28/2023 12:00:00 AM'\nORDER BY PAT_ENC_DATE_REAL;",
    "description": "Demonstrate the decimal date pattern for chronological sorting",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 2
  },
  {
    "id": "02-02-encounters-and-patient-movement-3",
    "originalQuery": "SELECT \n    d.DEPARTMENT_NAME as Department,\n    COUNT(*) as Count,\n    MIN(SUBSTR(pe.CONTACT_DATE, 1, 10)) as First_Visit,\n    MAX(SUBSTR(pe.CONTACT_DATE, 1, 10)) as Last_Visit\nFROM PAT_ENC pe\nLEFT JOIN CLARITY_DEP d ON pe.DEPARTMENT_ID = d.DEPARTMENT_ID\nWHERE pe.PAT_ID = 'Z7004242'\nGROUP BY d.DEPARTMENT_NAME\nORDER BY Count DESC;",
    "description": "Analyze encounter distribution by department",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 3
  },
  {
    "id": "02-02-encounters-and-patient-movement-4",
    "originalQuery": "SELECT \n    PAT_ENC_CSN_ID as CSN,\n    SUBSTR(HOSP_ADMSN_TIME, 1, 10) as Admission_Date,\n    SUBSTR(HOSP_DISCHRG_TIME, 1, 10) as Discharge_Date,\n    HOSP_ADMSN_TYPE_C_NAME as Admission_Type,\n    DISCH_DISP_C_NAME as Discharge_Disposition,\n    CASE \n        WHEN HOSP_ADMSN_TIME IS NOT NULL AND HOSP_DISCHRG_TIME IS NOT NULL\n        THEN ROUND(julianday(HOSP_DISCHRG_TIME) - julianday(HOSP_ADMSN_TIME), 2)\n        ELSE NULL\n    END as los_days\nFROM PAT_ENC\nWHERE PAT_ID = 'Z7004242'\n  AND HOSP_ADMSN_TIME IS NOT NULL\nORDER BY HOSP_ADMSN_TIME DESC;",
    "description": "View hospital admissions and length of stay",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 4
  },
  {
    "id": "02-02-encounters-and-patient-movement-5",
    "originalQuery": "SELECT \n    EVENT_TYPE_C_NAME,\n    EFFECTIVE_TIME,\n    -- Calculate time between events\n    ROUND((julianday(EFFECTIVE_TIME) - \n           julianday(LAG(EFFECTIVE_TIME) OVER (ORDER BY EFFECTIVE_TIME))) * 24, 2) as hours_since_last_event\nFROM CLARITY_ADT\nWHERE PAT_ENC_CSN_ID = 922942674\nORDER BY EFFECTIVE_TIME;",
    "description": "Show the complete patient journey for an encounter",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 5
  },
  {
    "id": "02-02-encounters-and-patient-movement-6",
    "originalQuery": "SELECT \n    APPT_STATUS_C_NAME,\n    COUNT(*) as count,\n    ROUND(100.0 * COUNT(*) / (SELECT COUNT(*) FROM PAT_ENC), 1) as percentage\nFROM PAT_ENC\nGROUP BY APPT_STATUS_C_NAME\nORDER BY count DESC;",
    "description": "Analyze appointment status distribution",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 6
  },
  {
    "id": "02-02-encounters-and-patient-movement-7",
    "originalQuery": "SELECT \n    pe.PAT_ENC_CSN_ID,\n    ser_visit.PROV_NAME as Visit_Provider,\n    ser_pcp.PROV_NAME as PCP_on_Visit,\n    ser_ref.PROV_NAME as Referring_Provider\nFROM PAT_ENC pe\nLEFT JOIN CLARITY_SER ser_visit ON pe.VISIT_PROV_ID = ser_visit.PROV_ID\nLEFT JOIN CLARITY_SER ser_pcp ON pe.PCP_PROV_ID = ser_pcp.PROV_ID\nLEFT JOIN CLARITY_SER ser_ref ON pe.REFERRING_PROV_ID = ser_ref.PROV_ID\nWHERE pe.PAT_ID = 'Z7004242' AND pe.APPT_STATUS_C_NAME = 'Completed'\nLIMIT 5;",
    "description": "Understand the different provider roles",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 7
  },
  {
    "id": "02-02-encounters-and-patient-movement-8",
    "originalQuery": "WITH encounter_timeline AS (\n    SELECT \n        pe.PAT_ENC_CSN_ID,\n        pe.CONTACT_DATE,\n        pe.PAT_ENC_DATE_REAL,\n        pe.APPT_STATUS_C_NAME,\n        d.DEPARTMENT_NAME,\n        p.PROV_NAME as VISIT_PROV_ID_PROV_NAME,\n        -- Calculate days since last encounter\n        ROUND(pe.PAT_ENC_DATE_REAL - LAG(pe.PAT_ENC_DATE_REAL) OVER (\n            PARTITION BY pe.PAT_ID \n            ORDER BY pe.PAT_ENC_DATE_REAL\n        ), 0) as days_since_last_visit\n    FROM PAT_ENC pe\n    LEFT JOIN CLARITY_DEP d ON pe.DEPARTMENT_ID = d.DEPARTMENT_ID\n    LEFT JOIN CLARITY_SER p ON pe.VISIT_PROV_ID = p.PROV_ID\n    WHERE pe.PAT_ID = 'Z7004242'\n)\nSELECT * FROM encounter_timeline\nORDER BY PAT_ENC_DATE_REAL\nLIMIT 10;",
    "description": "Create a patient's encounter timeline",
    "chapterId": "02-02-encounters-and-patient-movement",
    "index": 8
  },
  {
    "id": "02-03-diagnoses-and-problems-0",
    "originalQuery": "-- Encounter diagnoses: Multiple per visit\nSELECT 'Encounter Diagnoses' as type, COUNT(*) as total_records\nFROM PAT_ENC_DX\n\nUNION ALL\n\n-- Problem list: Ongoing conditions\nSELECT 'Problem List', COUNT(*)\nFROM PROBLEM_LIST;",
    "description": "Compare the record counts of the two diagnosis storage models",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 0
  },
  {
    "id": "02-03-diagnoses-and-problems-1",
    "originalQuery": "SELECT \n    e.PAT_ENC_CSN_ID,\n    e.LINE,\n    e.DX_ID,\n    e.PRIMARY_DX_YN,\n    -- Join to get the diagnosis name\n    d.DX_NAME\nFROM PAT_ENC_DX e\nJOIN CLARITY_EDG d ON e.DX_ID = d.DX_ID\nWHERE e.PAT_ENC_CSN_ID = 720803470\nORDER BY e.LINE;",
    "description": "Examine the diagnosis structure for a single encounter",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 1
  },
  {
    "id": "02-03-diagnoses-and-problems-2",
    "originalQuery": "-- Find cases where the primary diagnosis is NOT at LINE 1\nSELECT \n    PAT_ENC_CSN_ID,\n    LINE,\n    PRIMARY_DX_YN,\n    DX_ID,\n    CASE \n        WHEN PRIMARY_DX_YN = 'Y' AND LINE > 1 \n        THEN 'Primary diagnosis at LINE ' || LINE || '!'\n        ELSE 'Normal'\n    END as note\nFROM PAT_ENC_DX\nWHERE PRIMARY_DX_YN = 'Y' AND LINE > 1\nLIMIT 5;",
    "description": "Prove that LINE number does not indicate priority",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 2
  },
  {
    "id": "02-03-diagnoses-and-problems-3",
    "originalQuery": "SELECT \n    pl.PROBLEM_LIST_ID,\n    pl.DESCRIPTION,\n    pl.PROBLEM_STATUS_C_NAME,\n    pl.DATE_OF_ENTRY,\n    pl.RESOLVED_DATE,\n    pl.CHRONIC_YN\nFROM PROBLEM_LIST pl\nWHERE pl.PAT_ID = 'Z7004242' AND pl.PROBLEM_STATUS_C_NAME = 'Active'\nORDER BY pl.DATE_OF_ENTRY;",
    "description": "View a patient's active problem list",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 3
  },
  {
    "id": "02-03-diagnoses-and-problems-4",
    "originalQuery": "SELECT \n    SUBSTR(pe.CONTACT_DATE, 1, 10) as Visit_Date,\n    pl.DESCRIPTION as Problem_Addressed\nFROM PAT_ENC pe\nJOIN PAT_ENC_DX ped ON pe.PAT_ENC_CSN_ID = ped.PAT_ENC_CSN_ID\nJOIN PROBLEM_LIST pl ON ped.DX_LINK_PROB_ID = pl.PROBLEM_LIST_ID\nWHERE pe.PAT_ID = 'Z7004242'\n  AND ped.DX_LINK_PROB_ID IS NOT NULL\nORDER BY pe.CONTACT_DATE DESC;",
    "description": "Find when ongoing problems were addressed in specific encounters",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 4
  },
  {
    "id": "02-03-diagnoses-and-problems-5",
    "originalQuery": "SELECT \n    DX_ID,\n    DX_NAME\nFROM CLARITY_EDG\nWHERE DX_NAME LIKE '%reflux%' OR DX_NAME LIKE '%diabetes%'\nORDER BY DX_ID;",
    "description": "Look up common diagnoses in the master table",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 5
  },
  {
    "id": "02-03-diagnoses-and-problems-6",
    "originalQuery": "SELECT \n    p.CONTACT_DATE,\n    e.LINE,\n    e.PRIMARY_DX_YN,\n    d.DX_NAME,\n    e.DX_CHRONIC_YN,\n    CASE WHEN e.DX_LINK_PROB_ID IS NOT NULL THEN 'Yes' ELSE 'No' END as Linked_to_Problem_List\nFROM PAT_ENC_DX e\nJOIN CLARITY_EDG d ON e.DX_ID = d.DX_ID\nJOIN PAT_ENC p ON e.PAT_ENC_CSN_ID = p.PAT_ENC_CSN_ID\nWHERE p.PAT_ID = 'Z7004242'\nORDER BY p.PAT_ENC_DATE_REAL, e.LINE;",
    "description": "Create a timeline of all diagnoses for a patient",
    "chapterId": "02-03-diagnoses-and-problems",
    "index": 6
  },
  {
    "id": "02-04-orders-and-results-0",
    "originalQuery": "SELECT \n    ORDER_TYPE_C_NAME as Order_Type,\n    COUNT(*) as Count\nFROM ORDER_PROC\nWHERE PAT_ID = 'Z7004242'\nGROUP BY ORDER_TYPE_C_NAME\nORDER BY Count DESC;",
    "description": "View the different types of non-medication orders",
    "chapterId": "02-04-orders-and-results",
    "index": 0
  },
  {
    "id": "02-04-orders-and-results-1",
    "originalQuery": "SELECT \n    ORDER_PROC_ID,\n    DESCRIPTION as Test_Name,\n    SUBSTR(ORDERING_DATE, 1, 10) as Order_Date,\n    ORDER_STATUS_C_NAME as Status,\n    ABNORMAL_YN as Has_Abnormal_Results\nFROM ORDER_PROC\nWHERE PAT_ID = 'Z7004242'\n  AND ORDER_TYPE_C_NAME = 'Lab'\nORDER BY ORDERING_DATE DESC\nLIMIT 5;",
    "description": "Examine a lab order and its status",
    "chapterId": "02-04-orders-and-results",
    "index": 1
  },
  {
    "id": "02-04-orders-and-results-2",
    "originalQuery": "SELECT \n    o.DESCRIPTION as panel_name,\n    r.LINE,\n    r.COMPONENT_ID_NAME,\n    r.ORD_VALUE,\n    r.REFERENCE_LOW || '-' || r.REFERENCE_HIGH as reference_range,\n    r.REFERENCE_UNIT,\n    r.RESULT_FLAG_C_NAME\nFROM ORDER_PROC o\nJOIN ORDER_RESULTS r ON o.ORDER_PROC_ID = r.ORDER_PROC_ID\nWHERE o.ORDER_PROC_ID = 772179262\nORDER BY r.LINE;",
    "description": "Examine a complete metabolic panel with all its result components",
    "chapterId": "02-04-orders-and-results",
    "index": 2
  },
  {
    "id": "02-04-orders-and-results-3",
    "originalQuery": "SELECT \n    ORDER_PROC_ID,\n    DESCRIPTION as Study,\n    SUBSTR(ORDERING_DATE, 1, 10) as Order_Date,\n    ORDER_STATUS_C_NAME as Status,\n    PRIORITY_C_NAME as Priority\nFROM ORDER_PROC\nWHERE PAT_ID = 'Z7004242'\n  AND ORDER_TYPE_C_NAME = 'Imaging'\nORDER BY ORDERING_DATE DESC\nLIMIT 10;",
    "description": "View imaging orders and their status",
    "chapterId": "02-04-orders-and-results",
    "index": 3
  },
  {
    "id": "02-04-orders-and-results-4",
    "originalQuery": "SELECT \n    DESCRIPTION as Referral_To,\n    SUBSTR(ORDERING_DATE, 1, 10) as Referred_Date,\n    ORDER_STATUS_C_NAME as Status,\n    REFERRING_PROV_ID_PROV_NAME as Referred_By\nFROM ORDER_PROC\nWHERE PAT_ID = 'Z7004242'\n  AND ORDER_TYPE_C_NAME = 'Referral'\nORDER BY ORDERING_DATE DESC;",
    "description": "Track referrals to specialists",
    "chapterId": "02-04-orders-and-results",
    "index": 4
  },
  {
    "id": "02-04-orders-and-results-5",
    "originalQuery": "SELECT \n    ORDER_STATUS_C_NAME,\n    COUNT(*) as orders,\n    SUM(CASE WHEN ORDER_PROC_ID IN (SELECT DISTINCT ORDER_PROC_ID FROM ORDER_RESULTS) \n             THEN 1 ELSE 0 END) as has_results\nFROM ORDER_PROC\nGROUP BY ORDER_STATUS_C_NAME\nORDER BY orders DESC;",
    "description": "Analyze order status distribution",
    "chapterId": "02-04-orders-and-results",
    "index": 5
  },
  {
    "id": "02-04-orders-and-results-6",
    "originalQuery": "SELECT \n    o.ORDER_PROC_ID,\n    o.DESCRIPTION as test_ordered,\n    p.CONTACT_DATE,\n    d.DEPARTMENT_NAME,\n    s.PROV_NAME as VISIT_PROV_ID_PROV_NAME,\n    edg.DX_NAME as primary_diagnosis\nFROM ORDER_PROC o\nJOIN PAT_ENC p ON o.PAT_ENC_CSN_ID = p.PAT_ENC_CSN_ID\nLEFT JOIN CLARITY_DEP d ON p.DEPARTMENT_ID = d.DEPARTMENT_ID\nLEFT JOIN CLARITY_SER s ON p.VISIT_PROV_ID = s.PROV_ID\nLEFT JOIN PAT_ENC_DX dx ON p.PAT_ENC_CSN_ID = dx.PAT_ENC_CSN_ID AND dx.PRIMARY_DX_YN = 'Y'\nLEFT JOIN CLARITY_EDG edg ON dx.DX_ID = edg.DX_ID\nWHERE o.ORDER_STATUS_C_NAME = 'Completed'\nLIMIT 5;",
    "description": "Connect orders to their originating encounter and diagnosis",
    "chapterId": "02-04-orders-and-results",
    "index": 6
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-0",
    "originalQuery": "SELECT \n    'Medication Orders' as data_type, COUNT(*) as records FROM ORDER_MED\nUNION ALL\nSELECT 'Allergies', COUNT(*) FROM PAT_ALLERGIES\nUNION ALL\nSELECT 'Immunizations', COUNT(*) FROM PAT_IMMUNIZATIONS\nORDER BY records DESC;",
    "description": "Overview of safety-critical data volumes",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 0
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-1",
    "originalQuery": "SELECT \n    ORDER_MED_ID,\n    DESCRIPTION as Medication,\n    ORDER_STATUS_C_NAME as Status,\n    SUBSTR(ORDERING_DATE, 1, 10) as Order_Date,\n    QUANTITY,\n    REFILLS\nFROM ORDER_MED\nWHERE PAT_ID = 'Z7004242'\n  AND ORDER_STATUS_C_NAME IN ('Sent', 'Active')\nORDER BY ORDERING_DATE DESC\nLIMIT 10;",
    "description": "View current medication orders with status",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 1
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-2",
    "originalQuery": "SELECT \n    om.DESCRIPTION as Medication,\n    oms.SIG_TEXT as Instructions\nFROM ORDER_MED om\nJOIN ORDER_MED_SIG oms ON om.ORDER_MED_ID = oms.ORDER_ID\nWHERE om.PAT_ID = 'Z7004242'\nORDER BY om.ORDERING_DATE DESC\nLIMIT 5;",
    "description": "Get patient sig instructions for a medication",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 2
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-3",
    "originalQuery": "SELECT \n    a.ALLERGEN_ID_ALLERGEN_NAME,\n    a.REACTION as Reaction,\n    a.SEVERITY_C_NAME as Severity,\n    SUBSTR(a.DATE_NOTED, 1, 10) as Date_Noted\nFROM PAT_ALLERGIES pa\nJOIN ALLERGY a ON pa.ALLERGY_RECORD_ID = a.ALLERGY_ID\nWHERE pa.PAT_ID = 'Z7004242'\n  AND a.ALRGY_STATUS_C_NAME = 'Active'\nORDER BY a.SEVERITY_C_NAME, a.ALLERGEN_ID_ALLERGEN_NAME;",
    "description": "View a patient's active allergies and their severity",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 3
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-4",
    "originalQuery": "SELECT \n    a.ALLERGEN_ID_ALLERGEN_NAME,\n    ar.REACTION_C_NAME as Specific_Reaction\nFROM PAT_ALLERGIES pa\nJOIN ALLERGY a ON pa.ALLERGY_RECORD_ID = a.ALLERGY_ID\nJOIN ALLERGY_REACTIONS ar ON a.ALLERGY_ID = ar.ALLERGY_ID\nWHERE pa.PAT_ID = 'Z7004242' AND UPPER(a.ALLERGEN_ID_ALLERGEN_NAME) LIKE '%PENICILLIN%'\nORDER BY a.ALLERGEN_ID_ALLERGEN_NAME, ar.LINE;",
    "description": "See detailed reactions for a specific allergy",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 4
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-5",
    "originalQuery": "SELECT \n    imm.IMMUNIZATION_ID_NAME as Vaccine,\n    SUBSTR(pi.IMMUNE_DATE, 1, 10) as Date_Given,\n    pi.DOSE_NUMBER,\n    pi.IMMNZTN_STATUS_C_NAME as Status -- Given vs. Historical\nFROM PAT_IMMUNIZATIONS pi\nJOIN CLARITY_IMMUNZATN imm ON pi.IMMUNIZATION_ID = imm.IMMUNIZATION_ID\nWHERE pi.PAT_ID = 'Z7004242'\nORDER BY pi.IMMUNE_DATE DESC;",
    "description": "View a patient's immunization history",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 5
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-6",
    "originalQuery": "SELECT \n    IMMUNZATN_ID_NAME as vaccine,\n    IMMUNE_DATE,\n    MFG_C_NAME as manufacturer,\n    LOT as lot_number,\n    EXP_DATE as expiration\nFROM IMMUNE\nWHERE LOT IS NOT NULL\nORDER BY IMMUNE_DATE DESC\nLIMIT 5;",
    "description": "View complete vaccine administration details including lot number",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 6
  },
  {
    "id": "02-05-medications-allergies-and-immunizations-7",
    "originalQuery": "-- Find patients with active penicillin allergies who have been prescribed penicillin\nSELECT \n    om.PAT_ID,\n    om.DESCRIPTION as Medication_Ordered,\n    a.ALLERGEN_ID_ALLERGEN_NAME as Allergy\nFROM ORDER_MED om\nJOIN PAT_ALLERGIES pa ON om.PAT_ID = pa.PAT_ID\nJOIN ALLERGY a ON pa.ALLERGY_RECORD_ID = a.ALLERGY_ID\nWHERE a.ALRGY_STATUS_C_NAME = 'Active'\n  AND UPPER(a.ALLERGEN_ID_ALLERGEN_NAME) LIKE '%PENICILLIN%'\n  AND UPPER(om.DESCRIPTION) LIKE '%PENICILLIN%';",
    "description": "Check for potential medication-allergy conflicts",
    "chapterId": "02-05-medications-allergies-and-immunizations",
    "index": 7
  },
  {
    "id": "03-01-clinical-documentation-and-narrative-0",
    "originalQuery": "SELECT DISTINCT\n    ni.NOTE_TYPE_C_NAME as Note_Type,\n    COUNT(*) as Note_Count\nFROM HNO_NOTE_TEXT nt\nJOIN HNO_INFO ni ON nt.NOTE_ID = ni.NOTE_ID\nGROUP BY ni.NOTE_TYPE_C_NAME\nORDER BY Note_Count DESC;",
    "description": "View the different types of clinical notes available",
    "chapterId": "03-01-clinical-documentation-and-narrative",
    "index": 0
  },
  {
    "id": "03-01-clinical-documentation-and-narrative-1",
    "originalQuery": "SELECT \n    ni.NOTE_TYPE_C_NAME as Note_Type,\n    SUBSTR(ni.SPEC_NOTE_TIME_DTTM, 1, 10) as Date,\n    ni.AUTHOR_PROV_ID_PROV_NAME as Author,\n    nt.PLAIN_TEXT as Note_Text\nFROM HNO_INFO ni\nJOIN HNO_NOTE_TEXT nt ON ni.NOTE_ID = nt.NOTE_ID\nWHERE ni.PAT_ID = 'Z7004242'\n  AND ni.DELETE_INSTANT_DTTM IS NULL\n  AND LENGTH(nt.PLAIN_TEXT) > 100\nORDER BY ni.SPEC_NOTE_TIME_DTTM DESC\nLIMIT 1;",
    "description": "Read the content of a recent clinical note",
    "chapterId": "03-01-clinical-documentation-and-narrative",
    "index": 1
  },
  {
    "id": "03-01-clinical-documentation-and-narrative-2",
    "originalQuery": "SELECT \n    d.DOCUMENT_ID,\n    d.DOC_TYPE_C_NAME as Document_Type,\n    SUBSTR(d.DOC_RECV_TIME, 1, 10) as Received_Date,\n    d.DOC_SOURCE_C_NAME as Source\nFROM DOC_INFORMATION d\nJOIN PAT_DOC pd ON d.DOCUMENT_ID = pd.DOCUMENT_ID\nWHERE pd.PAT_ID = 'Z7004242'\nORDER BY d.DOC_RECV_TIME DESC\nLIMIT 10;",
    "description": "Find external (scanned) documents",
    "chapterId": "03-01-clinical-documentation-and-narrative",
    "index": 2
  },
  {
    "id": "03-01-clinical-documentation-and-narrative-3",
    "originalQuery": "SELECT \n    fm.TEMPLATE_ID_FLO_MEAS_NAME as Measurement,\n    ip.MEAS_VALUE as Value,\n    fm.UNITS,\n    SUBSTR(ip.RECORDED_TIME, 1, 16) as Recorded_Time\nFROM IP_FLWSHT_MEAS ip\nJOIN FLOWSHEET_MEAS fm ON ip.TEMPLATE_ID = fm.TEMPLATE_ID\nWHERE ip.PAT_ID = 'Z7004242'\n  AND fm.TEMPLATE_ID_FLO_MEAS_NAME IN ('Blood Pressure', 'Pulse', 'Temperature', 'Weight', 'Height', 'Pain Screen')\nORDER BY ip.RECORDED_TIME DESC\nLIMIT 20;",
    "description": "View a patient's recent vital signs from flowsheets",
    "chapterId": "03-01-clinical-documentation-and-narrative",
    "index": 3
  },
  {
    "id": "03-01-clinical-documentation-and-narrative-4",
    "originalQuery": "SELECT DISTINCT\n    fm.TEMPLATE_ID_FLO_MEAS_NAME as Measurement,\n    fm.DISP_NAME as Display_Name,\n    COUNT(*) as Times_Recorded\nFROM IP_FLWSHT_MEAS ip\nJOIN FLOWSHEET_MEAS fm ON ip.TEMPLATE_ID = fm.TEMPLATE_ID\nWHERE ip.PAT_ID = 'Z7004242'\nGROUP BY fm.TEMPLATE_ID_FLO_MEAS_NAME, fm.DISP_NAME\nORDER BY Times_Recorded DESC;",
    "description": "List all flowsheet measurements recorded for a patient",
    "chapterId": "03-01-clinical-documentation-and-narrative",
    "index": 4
  },
  {
    "id": "03-01-clinical-documentation-and-narrative-5",
    "originalQuery": "SELECT \n    fm.TEMPLATE_ID_FLO_MEAS_NAME as Measurement,\n    ip.MEAS_VALUE as Value,\n    SUBSTR(ip.RECORDED_TIME, 1, 16) as When_Recorded,\n    ip.ENTRY_USER_ID_NAME as Who_Recorded,\n    pe.DEPARTMENT_ID_DEPARTMENT_NAME as Where_Recorded\nFROM IP_FLWSHT_MEAS ip\nJOIN FLOWSHEET_MEAS fm ON ip.TEMPLATE_ID = fm.TEMPLATE_ID\nLEFT JOIN PAT_ENC pe ON ip.PAT_ENC_CSN_ID = pe.PAT_ENC_CSN_ID\nWHERE ip.PAT_ID = 'Z7004242'\nORDER BY ip.RECORDED_TIME DESC\nLIMIT 10;",
    "description": "View measurement context, including who recorded it and where",
    "chapterId": "03-01-clinical-documentation-and-narrative",
    "index": 5
  },
  {
    "id": "03-02-preventive-care-and-population-health-0",
    "originalQuery": "SELECT \n    HM_PLAN_ID,\n    HM_PLAN_NAME as Topic,\n    CASE \n        WHEN HM_PLAN_NAME LIKE '%Vaccine%' THEN 'Immunization'\n        WHEN HM_PLAN_NAME LIKE '%Screening%' THEN 'Screening'\n        WHEN HM_PLAN_NAME LIKE '%Visit%' THEN 'Wellness Visit'\n        ELSE 'Other Prevention'\n    END as Category\nFROM HM_PLAN_INFO\nORDER BY Category, Topic;",
    "description": "Explore all available health maintenance topics and categorize them",
    "chapterId": "03-02-preventive-care-and-population-health",
    "index": 0
  },
  {
    "id": "03-02-preventive-care-and-population-health-1",
    "originalQuery": "SELECT \n    ps.ACTIVE_HM_PLAN_ID_HM_PLAN_NAME as Topic,\n    hs.HM_STATUS_C_NAME as Status,\n    SUBSTR(hs.NEXT_DUE_DATE, 1, 10) as Due_Date\nFROM PATIENT_HMT_STATUS ps\nLEFT JOIN HM_HISTORICAL_STATUS hs \n    ON ps.PAT_ID = hs.PAT_ID \n    AND ps.ACTIVE_HM_PLAN_ID = hs.HM_TOPIC_ID\nWHERE ps.PAT_ID = 'Z7004242'\n  AND hs.LINE = (SELECT MAX(LINE) FROM HM_HISTORICAL_STATUS \n                 WHERE PAT_ID = ps.PAT_ID \n                 AND HM_TOPIC_ID = ps.ACTIVE_HM_PLAN_ID)\nORDER BY Topic;",
    "description": "View current health maintenance status for a specific patient",
    "chapterId": "03-02-preventive-care-and-population-health",
    "index": 1
  },
  {
    "id": "03-02-preventive-care-and-population-health-2",
    "originalQuery": "SELECT \n    HM_COMP_TYPE_C_NAME as Completion_Source,\n    COUNT(*) as Total_Completions,\n    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM HM_HISTORY), 2) as Percentage,\n    MIN(SUBSTR(HM_COMP_UTC_DTTM, 1, 10)) as Earliest,\n    MAX(SUBSTR(HM_COMP_UTC_DTTM, 1, 10)) as Latest\nFROM HM_HISTORY\nGROUP BY HM_COMP_TYPE_C_NAME\nORDER BY Total_Completions DESC;",
    "description": "Analyze how health maintenance items get completed across the system",
    "chapterId": "03-02-preventive-care-and-population-health",
    "index": 2
  },
  {
    "id": "03-02-preventive-care-and-population-health-3",
    "originalQuery": "WITH OverdueStats AS (\n    SELECT \n        hs.HM_TOPIC_ID_NAME as Topic,\n        COUNT(DISTINCT hs.PAT_ID) as Overdue_Patients\n    FROM HM_HISTORICAL_STATUS hs\n    WHERE hs.HM_STATUS_C_NAME = 'Overdue'\n      AND hs.HM_TOPIC_ID_NAME IS NOT NULL\n    GROUP BY hs.HM_TOPIC_ID_NAME\n),\nTotalStats AS (\n    SELECT \n        HM_TOPIC_ID_NAME as Topic,\n        COUNT(DISTINCT PAT_ID) as Total_Patients\n    FROM HM_HISTORICAL_STATUS\n    WHERE HM_TOPIC_ID_NAME IS NOT NULL\n    GROUP BY HM_TOPIC_ID_NAME\n)\nSELECT \n    os.Topic,\n    os.Overdue_Patients,\n    ts.Total_Patients,\n    ROUND(os.Overdue_Patients * 100.0 / ts.Total_Patients, 1) as Overdue_Rate\nFROM OverdueStats os\nJOIN TotalStats ts ON os.Topic = ts.Topic\nWHERE ts.Total_Patients >= 1\nORDER BY os.Overdue_Patients DESC\nLIMIT 10;",
    "description": "Identify the most common overdue preventive care items",
    "chapterId": "03-02-preventive-care-and-population-health",
    "index": 3
  },
  {
    "id": "03-03-patient-engagement-and-portals-0",
    "originalQuery": "SELECT \n    p.PAT_ID,\n    p.PAT_NAME,\n    pm.MYCHART_STATUS_C_NAME as Portal_Status,\n    pm.PAT_ACCESS_STAT_C_NAME as Access_Code_Status,\n    pm.DEM_VERIF_DT as Demographics_Verified,\n    mp.MYPT_ID as MyChart_Account_ID\nFROM PATIENT p\nLEFT JOIN PATIENT_MYC pm ON p.PAT_ID = pm.PAT_ID\nLEFT JOIN MYC_PATIENT mp ON p.PAT_ID = mp.PAT_ID\nWHERE p.PAT_ID = 'Z7004242';",
    "description": "Check a patient's portal account status and activation details",
    "chapterId": "03-03-patient-engagement-and-portals",
    "index": 0
  },
  {
    "id": "03-03-patient-engagement-and-portals-1",
    "originalQuery": "SELECT \n    m.MESSAGE_ID,\n    m.CREATED_TIME,\n    m.SUBJECT,\n    m.TOFROM_PAT_C_NAME as Direction,\n    CASE \n        WHEN m.FROM_USER_ID_NAME IS NOT NULL THEN m.FROM_USER_ID_NAME\n        WHEN m.TO_USER_ID_NAME IS NOT NULL THEN m.TO_USER_ID_NAME\n        ELSE 'System'\n    END as Other_Party,\n    CASE \n        WHEN m.PARENT_MESSAGE_ID IS NOT NULL THEN 'Reply'\n        ELSE 'New Thread'\n    END as Message_Type\nFROM MYC_MESG m\nWHERE m.PAT_ID = 'Z7004242'\nORDER BY m.CREATED_TIME DESC\nLIMIT 10;",
    "description": "View recent messages for a patient showing direction and threading",
    "chapterId": "03-03-patient-engagement-and-portals",
    "index": 1
  },
  {
    "id": "03-03-patient-engagement-and-portals-2",
    "originalQuery": "SELECT \n    m.SUBJECT,\n    m.TOFROM_PAT_C_NAME as Direction,\n    GROUP_CONCAT(mt.MSG_TXT, CHAR(10)) as Full_Message\nFROM MYC_MESG m\nJOIN MSG_TXT mt ON m.MESSAGE_ID = mt.MESSAGE_ID\nWHERE m.MESSAGE_ID = '27921908'\nGROUP BY m.MESSAGE_ID, m.SUBJECT, m.TOFROM_PAT_C_NAME;",
    "description": "Read the complete text of a patient's message about wrist pain",
    "chapterId": "03-03-patient-engagement-and-portals",
    "index": 2
  },
  {
    "id": "03-03-patient-engagement-and-portals-3",
    "originalQuery": "SELECT \n    c.MYC_MSG_TYP_C_NAME as Conversation_Type,\n    COUNT(DISTINCT c.THREAD_ID) as Thread_Count,\n    COUNT(DISTINCT cm.MESSAGE_ID) as Total_Messages\nFROM MYC_CONVO c\nLEFT JOIN MYC_CONVO_MSGS cm ON c.THREAD_ID = cm.THREAD_ID\nWHERE c.PAT_ID = 'Z7004242'\nGROUP BY c.MYC_MSG_TYP_C_NAME\nORDER BY Thread_Count DESC;",
    "description": "Analyze the types of conversations a patient has initiated",
    "chapterId": "03-03-patient-engagement-and-portals",
    "index": 3
  },
  {
    "id": "03-03-patient-engagement-and-portals-4",
    "originalQuery": "WITH MessageStats AS (\n    SELECT \n        m.PAT_ID,\n        COUNT(*) as Total_Messages,\n        SUM(CASE WHEN m.TOFROM_PAT_C_NAME = 'To Patient' THEN 1 ELSE 0 END) as To_Patient,\n        SUM(CASE WHEN m.TOFROM_PAT_C_NAME = 'From Patient' THEN 1 ELSE 0 END) as From_Patient,\n        MIN(m.CREATED_TIME) as First_Message,\n        MAX(m.CREATED_TIME) as Last_Message\n    FROM MYC_MESG m\n    WHERE m.PAT_ID = 'Z7004242'\n    GROUP BY m.PAT_ID\n)\nSELECT \n    *,\n    ROUND(CAST(From_Patient AS FLOAT) / Total_Messages * 100, 1) as Patient_Initiated_Pct\nFROM MessageStats;",
    "description": "Analyze bidirectional message flow for a patient",
    "chapterId": "03-03-patient-engagement-and-portals",
    "index": 4
  },
  {
    "id": "03-03-patient-engagement-and-portals-5",
    "originalQuery": "SELECT DISTINCT\n    COMMUNICATION_CONCEPT_ID_SETTING_NAME as Preference_Type,\n    COMMUNICATION_CONCEPT_ID as Concept_ID\nFROM COMMUNICATION_PREFERENCES\nWHERE COMMUNICATION_CONCEPT_ID_SETTING_NAME LIKE '%Reminder%'\n   OR COMMUNICATION_CONCEPT_ID_SETTING_NAME LIKE '%Message%'\nORDER BY Preference_Type\nLIMIT 10;",
    "description": "Explore available communication preference types",
    "chapterId": "03-03-patient-engagement-and-portals",
    "index": 5
  },
  {
    "id": "03-03-patient-engagement-and-portals-6",
    "originalQuery": "WITH PortalMetrics AS (\n    SELECT \n        p.PAT_ID,\n        p.PAT_NAME,\n        pm.MYCHART_STATUS_C_NAME as Portal_Status,\n        \n        -- Messaging metrics\n        (SELECT COUNT(*) FROM MYC_MESG m WHERE m.PAT_ID = p.PAT_ID) as Total_Messages,\n        (SELECT COUNT(DISTINCT THREAD_ID) FROM MYC_CONVO c WHERE c.PAT_ID = p.PAT_ID) as Total_Conversations,\n        \n        -- Recent activity\n        (SELECT MAX(CREATED_TIME) FROM MYC_MESG m WHERE m.PAT_ID = p.PAT_ID) as Last_Message_Date\n        \n    FROM PATIENT p\n    LEFT JOIN PATIENT_MYC pm ON p.PAT_ID = pm.PAT_ID\n    WHERE p.PAT_ID = 'Z7004242'\n)\nSELECT \n    PAT_NAME,\n    Portal_Status,\n    Total_Messages || ' messages in ' || Total_Conversations || ' conversations' as Messaging_Activity,\n    Last_Message_Date as Last_Portal_Activity\nFROM PortalMetrics;",
    "description": "Create a complete patient portal engagement summary",
    "chapterId": "03-03-patient-engagement-and-portals",
    "index": 6
  },
  {
    "id": "04-01-insurance-coverage-and-benefits-0",
    "originalQuery": "SELECT \n    pac.PAT_ID,\n    pac.ACCOUNT_ID,\n    pac.ACCOUNT_TYPE_C_NAME as Account_Type,\n    pac.FIN_CLASS_NAME as Financial_Class,\n    ac.COVERAGE_ID,\n    c.PAYOR_ID_PAYOR_NAME as Insurance_Company,\n    c.PLAN_ID_BENEFIT_PLAN_NAME as Plan_Name,\n    c.GROUP_NAME as Employer\nFROM PAT_ACCT_CVG pac\nJOIN ACCT_COVERAGE ac ON pac.ACCOUNT_ID = ac.ACCOUNT_ID\nJOIN COVERAGE c ON ac.COVERAGE_ID = c.COVERAGE_ID\nWHERE pac.PAT_ID = 'Z7004242'\nORDER BY pac.LINE;",
    "description": "Show how patients link to insurance coverage through accounts",
    "chapterId": "04-01-insurance-coverage-and-benefits",
    "index": 0
  },
  {
    "id": "04-01-insurance-coverage-and-benefits-1",
    "originalQuery": "SELECT \n    c.COVERAGE_ID,\n    c.PAYOR_ID_PAYOR_NAME as Payer,\n    c.PLAN_ID_BENEFIT_PLAN_NAME as Plan,\n    c.GROUP_NUM as Group_Number,\n    c.GROUP_NAME as Employer,\n    c.CVG_EFF_DT as Effective_Date,\n    c.CVG_TERM_DT as Termination_Date,\n    cm.MEM_NUMBER as Member_ID,\n    cm.MEM_REL_TO_SUB_C_NAME as Member_Relationship,\n    cm.MEM_COVERED_YN as Is_Covered,\n    cm.MEM_EFF_FROM_DATE as Member_Start_Date\nFROM COVERAGE c\nJOIN COVERAGE_MEMBER_LIST cm ON c.COVERAGE_ID = cm.COVERAGE_ID\nWHERE cm.PAT_ID = 'Z7004242';",
    "description": "Examine comprehensive coverage information including member details",
    "chapterId": "04-01-insurance-coverage-and-benefits",
    "index": 1
  },
  {
    "id": "04-01-insurance-coverage-and-benefits-2",
    "originalQuery": "WITH BenefitDetails AS (\n    SELECT \n        'Overall Coverage' as Benefit_Level,\n        cb.DEDUCTIBLE_AMOUNT,\n        cb.DEDUCTIBLE_MET_AMT as Deductible_Met,\n        cb.DEDUCT_REMAIN_AMT as Deductible_Remaining,\n        cb.OUT_OF_POCKET_MAX as OOP_Maximum,\n        cb.OUT_OF_PCKT_REMAIN as OOP_Remaining,\n        NULL as Service_Type,\n        cb.COINS_PERCENT as Coinsurance_Percent\n    FROM COVERAGE_BENEFITS cb\n    WHERE cb.CVG_ID = 5934765.0\n      AND cb.DEDUCTIBLE_AMOUNT IS NOT NULL\n    \n    UNION ALL\n    \n    SELECT \n        'Service-Specific' as Benefit_Level,\n        sb.DEDUCTIBLE_AMOUNT,\n        sb.DEDUCTIBLE_MET_AMT,\n        sb.DEDUCT_REMAIN_AMT,\n        sb.OUT_OF_POCKET_MAX,\n        sb.OUT_OF_PCKT_REMAIN,\n        sb.CVG_SVC_TYPE_ID_SERVICE_TYPE_NAME as Service_Type,\n        sb.COINS_PERCENT\n    FROM SERVICE_BENEFITS sb\n    JOIN COVERAGE_BENEFITS cb ON sb.RECORD_ID = cb.RECORD_ID\n    WHERE cb.CVG_ID = 5934765.0\n      AND sb.CVG_SVC_TYPE_ID_SERVICE_TYPE_NAME IS NOT NULL\n)\nSELECT * FROM BenefitDetails\nWHERE Service_Type IS NULL OR Service_Type IN ('PRIMARY', 'SPEC', 'ED', 'HOSP IP')\nORDER BY Benefit_Level, Service_Type;",
    "description": "View the multi-tier benefit structure with deductibles and coinsurance",
    "chapterId": "04-01-insurance-coverage-and-benefits",
    "index": 2
  },
  {
    "id": "04-01-insurance-coverage-and-benefits-3",
    "originalQuery": "SELECT \n    ROW_NUMBER() OVER (ORDER BY cb.DEDUCTIBLE_MET_AMT DESC) as Record_Num,\n    cb.DEDUCTIBLE_AMOUNT as Annual_Deductible,\n    cb.DEDUCTIBLE_MET_AMT as Amount_Applied,\n    cb.DEDUCT_REMAIN_AMT as Amount_Remaining,\n    ROUND((cb.DEDUCTIBLE_MET_AMT / cb.DEDUCTIBLE_AMOUNT) * 100, 1) as Percent_Met,\n    '$' || CAST(cb.DEDUCTIBLE_MET_AMT AS TEXT) || ' of $' || \n        CAST(cb.DEDUCTIBLE_AMOUNT AS TEXT) as Progress\nFROM COVERAGE_BENEFITS cb\nWHERE cb.CVG_ID = 5934765.0\n  AND cb.DEDUCTIBLE_AMOUNT IS NOT NULL\n  AND cb.DEDUCTIBLE_AMOUNT > 0\nORDER BY cb.DEDUCTIBLE_MET_AMT DESC;",
    "description": "Analyze deductible accumulation across multiple benefit records",
    "chapterId": "04-01-insurance-coverage-and-benefits",
    "index": 3
  },
  {
    "id": "04-01-insurance-coverage-and-benefits-4",
    "originalQuery": "SELECT \n    sb.CVG_SVC_TYPE_ID_SERVICE_TYPE_NAME as Service_Type,\n    sb.COPAY_AMOUNT as Copay,\n    sb.COINS_PERCENT as Coinsurance_Pct,\n    sb.IN_NETWORK_YN as Network_Status,\n    sb.MAX_VISITS as Visit_Limit,\n    sb.REMAINING_VISITS as Visits_Remaining,\n    CASE \n        WHEN sb.COPAY_AMOUNT > 0 THEN '$' || CAST(sb.COPAY_AMOUNT AS TEXT) || ' copay'\n        WHEN sb.COINS_PERCENT > 0 THEN CAST(sb.COINS_PERCENT AS TEXT) || '% after deductible'\n        ELSE 'Covered'\n    END as Patient_Responsibility\nFROM SERVICE_BENEFITS sb\nJOIN COVERAGE_BENEFITS cb ON sb.RECORD_ID = cb.RECORD_ID\nWHERE cb.CVG_ID = 5934765.0\n  AND sb.CVG_SVC_TYPE_ID_SERVICE_TYPE_NAME IS NOT NULL\nORDER BY \n    CASE sb.CVG_SVC_TYPE_ID_SERVICE_TYPE_NAME\n        WHEN 'PRIMARY' THEN 1\n        WHEN 'SPEC' THEN 2\n        WHEN 'ED' THEN 3\n        WHEN 'HOSP IP' THEN 4\n        WHEN 'HOSP OP' THEN 5\n        ELSE 6\n    END,\n    sb.COINS_PERCENT;",
    "description": "Display comprehensive service benefits showing network variations",
    "chapterId": "04-01-insurance-coverage-and-benefits",
    "index": 4
  },
  {
    "id": "04-01-insurance-coverage-and-benefits-5",
    "originalQuery": "WITH DeductibleStatus AS (\n    SELECT \n        MAX(DEDUCTIBLE_AMOUNT) as Annual_Deductible,\n        MAX(DEDUCTIBLE_MET_AMT) as Deductible_Met,\n        MAX(DEDUCT_REMAIN_AMT) as Deductible_Remaining\n    FROM COVERAGE_BENEFITS\n    WHERE CVG_ID = 5934765.0\n      AND DEDUCTIBLE_AMOUNT IS NOT NULL\n),\nServiceScenarios AS (\n    SELECT \n        'Office Visit - Primary Care' as Service,\n        500 as Billed_Amount,\n        'PRIMARY' as Service_Type\n    UNION ALL\n    SELECT 'MRI Scan', 2000, 'HOSP OP'\n    UNION ALL\n    SELECT 'Emergency Room Visit', 1500, 'ED'\n    UNION ALL\n    SELECT 'Specialist Consultation', 350, 'SPEC'\n)\nSELECT \n    ss.Service,\n    '$' || ss.Billed_Amount as Billed_Amount,\n    sb.COINS_PERCENT || '%' as Coinsurance_Rate,\n    '$' || ds.Deductible_Met || ' of $' || ds.Annual_Deductible as Deductible_Status,\n    CASE \n        WHEN ds.Deductible_Remaining > 0 AND ss.Billed_Amount <= ds.Deductible_Remaining \n            THEN '$' || ss.Billed_Amount || ' (applies to deductible)'\n        WHEN ds.Deductible_Remaining > 0 \n            THEN '$' || ds.Deductible_Remaining || ' (deductible) + $' || \n                 ROUND((ss.Billed_Amount - ds.Deductible_Remaining) * sb.COINS_PERCENT / 100.0, 2) || ' (coinsurance)'\n        WHEN sb.COPAY_AMOUNT > 0 \n            THEN '$' || sb.COPAY_AMOUNT || ' (copay)'\n        ELSE '$' || ROUND(ss.Billed_Amount * sb.COINS_PERCENT / 100.0, 2) || ' (coinsurance)'\n    END as Patient_Owes\nFROM ServiceScenarios ss\nCROSS JOIN DeductibleStatus ds\nLEFT JOIN SERVICE_BENEFITS sb ON sb.CVG_SVC_TYPE_ID_SERVICE_TYPE_NAME = ss.Service_Type\nLEFT JOIN COVERAGE_BENEFITS cb ON sb.RECORD_ID = cb.RECORD_ID\nWHERE cb.CVG_ID = 5934765.0\n  AND sb.COINS_PERCENT = 10\nLIMIT 4;",
    "description": "Model patient responsibility calculation for different scenarios",
    "chapterId": "04-01-insurance-coverage-and-benefits",
    "index": 5
  },
  {
    "id": "04-01-insurance-coverage-and-benefits-6",
    "originalQuery": "SELECT \n    c.COVERAGE_ID,\n    c.VERIFY_USER_ID_NAME as Last_Verified_By,\n    cm.MEM_VERIF_STAT_C_NAME as Member_Verification_Status,\n    cm.LAST_VERIF_DATE as Last_Verification_Date,\n    cm.MEM_COVERED_YN as Currently_Covered,\n    cm.MEM_EFF_FROM_DATE as Coverage_Start,\n    cm.MEM_EFF_TO_DATE as Coverage_End,\n    CASE \n        WHEN cm.MEM_EFF_TO_DATE IS NULL THEN 'Active - No End Date'\n        WHEN DATE(cm.MEM_EFF_TO_DATE) >= DATE('now') THEN 'Active until ' || cm.MEM_EFF_TO_DATE\n        ELSE 'Terminated on ' || cm.MEM_EFF_TO_DATE\n    END as Coverage_Status\nFROM COVERAGE c\nJOIN COVERAGE_MEMBER_LIST cm ON c.COVERAGE_ID = cm.COVERAGE_ID\nWHERE cm.PAT_ID = 'Z7004242';",
    "description": "Check coverage verification and eligibility status",
    "chapterId": "04-01-insurance-coverage-and-benefits",
    "index": 6
  },
  {
    "id": "05-01-demystifying-inpatient-data-id-0",
    "originalQuery": "SELECT \n    COUNT(*) as total_encounters,\n    SUM(CASE WHEN INPATIENT_DATA_ID IS NOT NULL \n             AND LENGTH(INPATIENT_DATA_ID) > 0 \n        THEN 1 ELSE 0 END) as has_inpatient_id,\n    ROUND(SUM(CASE WHEN INPATIENT_DATA_ID IS NOT NULL \n                   AND LENGTH(INPATIENT_DATA_ID) > 0 \n              THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as percentage\nFROM PAT_ENC\nWHERE PAT_ID = 'Z7004242';",
    "description": "Check what fraction of encounters have INPATIENT_DATA_ID",
    "chapterId": "05-01-demystifying-inpatient-data-id",
    "index": 0
  },
  {
    "id": "05-01-demystifying-inpatient-data-id-1",
    "originalQuery": "SELECT \n    CASE \n        WHEN pe.INPATIENT_DATA_ID IS NOT NULL THEN 'Has INPATIENT_DATA_ID'\n        ELSE 'No INPATIENT_DATA_ID'\n    END as Category,\n    COUNT(*) as Encounter_Count,\n    SUM(CASE WHEN hsp.PAT_ENC_CSN_ID IS NOT NULL THEN 1 ELSE 0 END) as Has_Hospital_Record,\n    ROUND(SUM(CASE WHEN hsp.PAT_ENC_CSN_ID IS NOT NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as Hospital_Percentage\nFROM PAT_ENC pe\nLEFT JOIN PAT_ENC_HSP hsp ON pe.PAT_ENC_CSN_ID = hsp.PAT_ENC_CSN_ID\nWHERE pe.PAT_ID = 'Z7004242'\nGROUP BY CASE WHEN pe.INPATIENT_DATA_ID IS NOT NULL THEN 'Has INPATIENT_DATA_ID' ELSE 'No INPATIENT_DATA_ID' END;",
    "description": "Compare INPATIENT_DATA_ID presence with actual hospital records",
    "chapterId": "05-01-demystifying-inpatient-data-id",
    "index": 1
  },
  {
    "id": "05-01-demystifying-inpatient-data-id-2",
    "originalQuery": "SELECT \n    COALESCE(d.DEPARTMENT_NAME, '[No Department]') as Department,\n    COUNT(*) as Encounters_with_Inpatient_ID,\n    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 1) as Percentage\nFROM PAT_ENC pe\nLEFT JOIN CLARITY_DEP d ON pe.DEPARTMENT_ID = d.DEPARTMENT_ID\nWHERE pe.INPATIENT_DATA_ID IS NOT NULL \n  AND LENGTH(pe.INPATIENT_DATA_ID) > 0\n  AND pe.PAT_ID = 'Z7004242'\nGROUP BY d.DEPARTMENT_NAME\nORDER BY COUNT(*) DESC;",
    "description": "List departments using INPATIENT_DATA_ID",
    "chapterId": "05-01-demystifying-inpatient-data-id",
    "index": 2
  },
  {
    "id": "05-01-demystifying-inpatient-data-id-3",
    "originalQuery": "SELECT \n    d.DEPARTMENT_NAME,\n    eds.ED_PAT_STATUS_C_NAME as Workflow_Status,\n    eds.PAT_STATUS_TIME,\n    pe.APPT_STATUS_C_NAME as Appointment_Status\nFROM ED_PAT_STATUS eds\nJOIN PAT_ENC pe ON eds.PAT_ENC_CSN_ID = pe.PAT_ENC_CSN_ID\nLEFT JOIN CLARITY_DEP d ON pe.DEPARTMENT_ID = d.DEPARTMENT_ID\nWHERE pe.PAT_ID = 'Z7004242'\n  AND d.DEPARTMENT_NAME LIKE '%INTERNAL MEDICINE%'\nORDER BY eds.PAT_STATUS_TIME DESC\nLIMIT 10;",
    "description": "Show ED workflow tracking in non-ED departments",
    "chapterId": "05-01-demystifying-inpatient-data-id",
    "index": 3
  },
  {
    "id": "05-01-demystifying-inpatient-data-id-4",
    "originalQuery": "WITH id_usage AS (\n    SELECT DISTINCT INPATIENT_DATA_ID \n    FROM PAT_ENC \n    WHERE INPATIENT_DATA_ID IS NOT NULL\n      AND PAT_ID = 'Z7004242'\n)\nSELECT \n    'IP_DATA_STORE' as Table_Name,\n    COUNT(DISTINCT ids.INPATIENT_DATA_ID) as IDs_Found,\n    'Master inpatient data store' as Purpose\nFROM IP_DATA_STORE ids\nWHERE ids.INPATIENT_DATA_ID IN (SELECT INPATIENT_DATA_ID FROM id_usage)\nUNION ALL\nSELECT \n    'ED_PAT_STATUS',\n    COUNT(DISTINCT eds.INPATIENT_DATA_ID),\n    'Workflow status tracking'\nFROM ED_PAT_STATUS eds\nWHERE eds.INPATIENT_DATA_ID IN (SELECT INPATIENT_DATA_ID FROM id_usage)\nUNION ALL\nSELECT \n    'IP_FLOWSHEET_ROWS',\n    COUNT(DISTINCT ifr.INPATIENT_DATA_ID),\n    'Clinical documentation'\nFROM IP_FLOWSHEET_ROWS ifr\nWHERE ifr.INPATIENT_DATA_ID IN (SELECT INPATIENT_DATA_ID FROM id_usage)\nUNION ALL\nSELECT \n    'PAT_ENC_HSP',\n    COUNT(DISTINCT hsp.INPATIENT_DATA_ID),\n    'True hospital admissions'\nFROM PAT_ENC_HSP hsp\nWHERE hsp.INPATIENT_DATA_ID IN (SELECT INPATIENT_DATA_ID FROM id_usage)\nORDER BY IDs_Found DESC;",
    "description": "Show which tables use INPATIENT_DATA_ID for tracking",
    "chapterId": "05-01-demystifying-inpatient-data-id",
    "index": 4
  },
  {
    "id": "05-01-demystifying-inpatient-data-id-5",
    "originalQuery": "SELECT \n    pe.PAT_ENC_CSN_ID,\n    pe.CONTACT_DATE,\n    d.DEPARTMENT_NAME,\n    ids.INPATIENT_DATA_ID,\n    ids.EPT_CSN as Linked_CSN,\n    ids.RECORD_STATUS_C_NAME\nFROM PAT_ENC pe\nJOIN IP_DATA_STORE ids ON pe.INPATIENT_DATA_ID = ids.INPATIENT_DATA_ID\nLEFT JOIN CLARITY_DEP d ON pe.DEPARTMENT_ID = d.DEPARTMENT_ID\nWHERE pe.PAT_ID = 'Z7004242'\n  AND d.DEPARTMENT_NAME LIKE '%LABORATORY%'\nLIMIT 5;",
    "description": "Examine IP_DATA_STORE connections",
    "chapterId": "05-01-demystifying-inpatient-data-id",
    "index": 5
  },
  {
    "id": "05-01-demystifying-inpatient-data-id-6",
    "originalQuery": "SELECT \n    pe.PAT_ENC_CSN_ID,\n    pe.CONTACT_DATE,\n    d.DEPARTMENT_NAME,\n    hsp.ADT_PAT_CLASS_C_NAME as Patient_Class,\n    hsp.HOSP_ADMSN_TIME as Admission_Time,\n    hsp.HOSP_DISCH_TIME as Discharge_Time,\n    CASE \n        WHEN pe.INPATIENT_DATA_ID IS NOT NULL THEN 'Yes'\n        ELSE 'No'\n    END as Has_Inpatient_Data_ID\nFROM PAT_ENC pe\nJOIN PAT_ENC_HSP hsp ON pe.PAT_ENC_CSN_ID = hsp.PAT_ENC_CSN_ID\nLEFT JOIN CLARITY_DEP d ON pe.DEPARTMENT_ID = d.DEPARTMENT_ID\nWHERE pe.PAT_ID = 'Z7004242'\nORDER BY pe.CONTACT_DATE DESC;",
    "description": "Correctly identify true hospital admissions",
    "chapterId": "05-01-demystifying-inpatient-data-id",
    "index": 6
  },
  {
    "id": "05-01-demystifying-inpatient-data-id-7",
    "originalQuery": "SELECT \n    'Features enabled by INPATIENT_DATA_ID:' as Description\nUNION ALL\nSELECT '• Workflow tracking: ' || COUNT(DISTINCT PAT_ENC_CSN_ID) || ' encounters'\nFROM ED_PAT_STATUS \nWHERE INPATIENT_DATA_ID IN (\n    SELECT INPATIENT_DATA_ID FROM PAT_ENC \n    WHERE PAT_ID = 'Z7004242' AND INPATIENT_DATA_ID IS NOT NULL\n)\nUNION ALL\nSELECT '• Flowsheet documentation: ' || COUNT(DISTINCT INPATIENT_DATA_ID) || ' encounters'\nFROM IP_FLOWSHEET_ROWS\nWHERE INPATIENT_DATA_ID IN (\n    SELECT INPATIENT_DATA_ID FROM PAT_ENC \n    WHERE PAT_ID = 'Z7004242' AND INPATIENT_DATA_ID IS NOT NULL\n)\nUNION ALL\nSELECT '• Date range tracking: ' || COUNT(DISTINCT INPATIENT_DATA_ID) || ' encounters'\nFROM IP_FLOW_DATERNG\nWHERE INPATIENT_DATA_ID IN (\n    SELECT INPATIENT_DATA_ID FROM PAT_ENC \n    WHERE PAT_ID = 'Z7004242' AND INPATIENT_DATA_ID IS NOT NULL\n);",
    "description": "Analyze what features INPATIENT_DATA_ID enables",
    "chapterId": "05-01-demystifying-inpatient-data-id",
    "index": 7
  }
]