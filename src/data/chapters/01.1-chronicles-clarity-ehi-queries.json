[
  {
    "id": "01.1-chronicles-clarity-ehi-0",
    "originalQuery": "-- The ETL process runs nightly, so your data is always historical\nSELECT \n  MAX(CONTACT_DATE) as newest_data,\n  julianday('now') - julianday(MAX(CONTACT_DATE)) as days_behind_real_time\nFROM PAT_ENC\nWHERE CONTACT_DATE IS NOT NULL;",
    "description": "Check how old your newest data is - spoiler: it's at least one day behind",
    "chapterId": "01.1-chronicles-clarity-ehi",
    "index": 0,
    "results": [
      {
        "newest_data": "9/8/2020 12:00:00 AM",
        "days_behind_real_time": null
      }
    ],
    "columns": [
      "newest_data",
      "days_behind_real_time"
    ],
    "error": null
  },
  {
    "id": "01.1-chronicles-clarity-ehi-1",
    "originalQuery": "-- In Chronicles, this would be stored as Patient->Encounter->Diagnoses[1,2,3]\n-- In Clarity, it becomes rows with LINE numbers\nSELECT \n  PAT_ENC_CSN_ID,\n  LINE,\n  CASE WHEN PRIMARY_DX_YN = 'Y' THEN 'Primary' ELSE 'Secondary' END as dx_type\nFROM PAT_ENC_DX\nWHERE PAT_ENC_CSN_ID = 720803470\nORDER BY LINE;",
    "description": "See how hierarchical data becomes relational tables with LINE numbers",
    "chapterId": "01.1-chronicles-clarity-ehi",
    "index": 1,
    "results": [
      {
        "PAT_ENC_CSN_ID": 720803470,
        "LINE": 1,
        "dx_type": "Primary"
      },
      {
        "PAT_ENC_CSN_ID": 720803470,
        "LINE": 2,
        "dx_type": "Secondary"
      },
      {
        "PAT_ENC_CSN_ID": 720803470,
        "LINE": 3,
        "dx_type": "Secondary"
      }
    ],
    "columns": [
      "PAT_ENC_CSN_ID",
      "LINE",
      "dx_type"
    ],
    "error": null
  },
  {
    "id": "01.1-chronicles-clarity-ehi-2",
    "originalQuery": "-- Epic organizes tables by functional area\nSELECT \n  CASE \n    WHEN name LIKE 'PAT_%' THEN 'Patient'\n    WHEN name LIKE 'HSP_%' THEN 'Hospital Billing'\n    WHEN name LIKE 'ARPB_%' THEN 'Professional Billing'\n    WHEN name LIKE 'ORDER_%' THEN 'Orders'\n    WHEN name LIKE 'CLARITY_%' THEN 'Reference Data'\n    ELSE 'Other'\n  END as module,\n  COUNT(*) as table_count\nFROM sqlite_master \nWHERE type = 'table'\nGROUP BY module\nORDER BY table_count DESC;",
    "description": "Count the tables in your export by module prefix",
    "chapterId": "01.1-chronicles-clarity-ehi",
    "index": 2,
    "results": [
      {
        "module": "Other",
        "table_count": 326
      },
      {
        "module": "Patient",
        "table_count": 82
      },
      {
        "module": "Hospital Billing",
        "table_count": 52
      },
      {
        "module": "Orders",
        "table_count": 48
      },
      {
        "module": "Reference Data",
        "table_count": 28
      },
      {
        "module": "Professional Billing",
        "table_count": 15
      }
    ],
    "columns": [
      "module",
      "table_count"
    ],
    "error": null
  },
  {
    "id": "01.1-chronicles-clarity-ehi-3",
    "originalQuery": "-- This query joins multiple tables - imagine running this \n-- on the live system while doctors are placing orders!\nSELECT \n  pe.PAT_ENC_CSN_ID,\n  COUNT(DISTINCT pd.LINE) as diagnosis_count,\n  COUNT(DISTINCT op.ORDER_PROC_ID) as order_count\nFROM PAT_ENC pe\nLEFT JOIN PAT_ENC_DX pd ON pe.PAT_ENC_CSN_ID = pd.PAT_ENC_CSN_ID\nLEFT JOIN ORDER_PROC op ON pe.PAT_ENC_CSN_ID = op.PAT_ENC_CSN_ID\nGROUP BY pe.PAT_ENC_CSN_ID\nHAVING diagnosis_count > 0 OR order_count > 0\nORDER BY diagnosis_count DESC\nLIMIT 10;",
    "description": "Demonstrate why complex analytics can't run on the operational system",
    "chapterId": "01.1-chronicles-clarity-ehi",
    "index": 3,
    "results": [
      {
        "PAT_ENC_CSN_ID": 991225117,
        "diagnosis_count": 4,
        "order_count": 3
      },
      {
        "PAT_ENC_CSN_ID": 720803470,
        "diagnosis_count": 3,
        "order_count": 2
      },
      {
        "PAT_ENC_CSN_ID": 799951565,
        "diagnosis_count": 3,
        "order_count": 1
      },
      {
        "PAT_ENC_CSN_ID": 948004323,
        "diagnosis_count": 3,
        "order_count": 3
      },
      {
        "PAT_ENC_CSN_ID": 1028743701,
        "diagnosis_count": 3,
        "order_count": 3
      },
      {
        "PAT_ENC_CSN_ID": 725327197,
        "diagnosis_count": 2,
        "order_count": 1
      },
      {
        "PAT_ENC_CSN_ID": 829393933,
        "diagnosis_count": 2,
        "order_count": 1
      },
      {
        "PAT_ENC_CSN_ID": 724628999,
        "diagnosis_count": 1,
        "order_count": 1
      },
      {
        "PAT_ENC_CSN_ID": 829213099,
        "diagnosis_count": 1,
        "order_count": 1
      },
      {
        "PAT_ENC_CSN_ID": 829467718,
        "diagnosis_count": 1,
        "order_count": 0
      }
    ],
    "columns": [
      "PAT_ENC_CSN_ID",
      "diagnosis_count",
      "order_count"
    ],
    "error": null
  },
  {
    "id": "01.1-chronicles-clarity-ehi-4",
    "originalQuery": "-- If today is Tuesday, this shows Sunday's data (at best)\nSELECT \n  DATE(MAX(CONTACT_DATE)) as latest_data_date,\n  CASE \n    WHEN julianday('now') - julianday(MAX(CONTACT_DATE)) < 2 THEN 'Fresh (1-2 days old)'\n    WHEN julianday('now') - julianday(MAX(CONTACT_DATE)) < 7 THEN 'Recent (less than a week)'\n    ELSE 'Stale (check your export date!)'\n  END as data_freshness\nFROM PAT_ENC\nWHERE CONTACT_DATE IS NOT NULL;",
    "description": "Understand what 'yesterday's data' really means",
    "chapterId": "01.1-chronicles-clarity-ehi",
    "index": 4,
    "results": [
      {
        "latest_data_date": null,
        "data_freshness": "Stale (check your export date!)"
      }
    ],
    "columns": [
      "latest_data_date",
      "data_freshness"
    ],
    "error": null
  },
  {
    "id": "01.1-chronicles-clarity-ehi-5",
    "originalQuery": "-- The LINE column preserves the original array order\nSELECT \n  'Encounter ' || PAT_ENC_CSN_ID as encounter,\n  'Diagnosis #' || LINE as position,\n  CASE \n    WHEN LINE = 1 THEN 'Primary Diagnosis'\n    ELSE 'Secondary Diagnosis'\n  END as diagnosis_type\nFROM PAT_ENC_DX\nWHERE PAT_ENC_CSN_ID IN (\n  SELECT PAT_ENC_CSN_ID \n  FROM PAT_ENC_DX \n  GROUP BY PAT_ENC_CSN_ID \n  HAVING COUNT(*) >= 3\n  LIMIT 1\n)\nORDER BY LINE;",
    "description": "See the LINE pattern that appears everywhere in Epic data",
    "chapterId": "01.1-chronicles-clarity-ehi",
    "index": 5,
    "results": [
      {
        "encounter": "Encounter 720803470",
        "position": "Diagnosis #1",
        "diagnosis_type": "Primary Diagnosis"
      },
      {
        "encounter": "Encounter 720803470",
        "position": "Diagnosis #2",
        "diagnosis_type": "Secondary Diagnosis"
      },
      {
        "encounter": "Encounter 720803470",
        "position": "Diagnosis #3",
        "diagnosis_type": "Secondary Diagnosis"
      }
    ],
    "columns": [
      "encounter",
      "position",
      "diagnosis_type"
    ],
    "error": null
  },
  {
    "id": "01.1-chronicles-clarity-ehi-6",
    "originalQuery": "-- What would be Patient->Encounter->HSP_Account in Chronicles\n-- becomes a chain of foreign keys in your export\nSELECT \n  p.PAT_ID,\n  pe.PAT_ENC_CSN_ID,\n  pe.HSP_ACCOUNT_ID,\n  ha.TOT_CHGS as total_charges\nFROM PATIENT p\nJOIN PAT_ENC pe ON p.PAT_ID = pe.PAT_ID\nJOIN HSP_ACCOUNT ha ON pe.HSP_ACCOUNT_ID = ha.HSP_ACCOUNT_ID\nWHERE ha.TOT_CHGS > 0\nLIMIT 5;",
    "description": "Trace relationships through foreign keys instead of tree navigation",
    "chapterId": "01.1-chronicles-clarity-ehi",
    "index": 6,
    "results": [
      {
        "PAT_ID": "Z7004242",
        "PAT_ENC_CSN_ID": 922942674,
        "HSP_ACCOUNT_ID": 376684810,
        "total_charges": 1638.82
      },
      {
        "PAT_ID": "Z7004242",
        "PAT_ENC_CSN_ID": 922943112,
        "HSP_ACCOUNT_ID": 376684810,
        "total_charges": 1638.82
      }
    ],
    "columns": [
      "PAT_ID",
      "PAT_ENC_CSN_ID",
      "HSP_ACCOUNT_ID",
      "total_charges"
    ],
    "error": null
  },
  {
    "id": "01.1-chronicles-clarity-ehi-7",
    "originalQuery": "-- Always show users how current the data is\nSELECT \n  'Data current through: ' || DATE(MAX(CONTACT_DATE)) as data_currency,\n  'Report generated on: ' || DATE('now') as report_date,\n  'This report contains data that is ' || \n  CAST(julianday('now') - julianday(MAX(CONTACT_DATE)) as INTEGER) || \n  ' days old' as age_warning\nFROM PAT_ENC\nWHERE CONTACT_DATE IS NOT NULL;",
    "description": "Build lag awareness into your queries",
    "chapterId": "01.1-chronicles-clarity-ehi",
    "index": 7,
    "results": [
      {
        "data_currency": null,
        "report_date": "Report generated on: 2025-06-27",
        "age_warning": null
      }
    ],
    "columns": [
      "data_currency",
      "report_date",
      "age_warning"
    ],
    "error": null
  }
]